/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000
static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_BUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#if PY_VERSION_HEX < 0x01060000
#define PyObject_Del(op) PyMem_DEL((op))
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#elif PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigObject",		/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromString(v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigPacked",		/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return -1;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return -1;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return -1;
  }
  if (PyDict_SetItemString(dict, name, o))
    return -1;
  Py_DECREF(o);
  return 0;
}
#endif

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_OpenBabel__CharPtrLess swig_types[0]
#define SWIGTYPE_p_OpenBabel__FMapType__iterator swig_types[1]
#define SWIGTYPE_p_OpenBabel__OBAngleData swig_types[2]
#define SWIGTYPE_p_OpenBabel__OBAromaticTyper swig_types[3]
#define SWIGTYPE_p_OpenBabel__OBAtom swig_types[4]
#define SWIGTYPE_p_OpenBabel__OBAtomTyper swig_types[5]
#define SWIGTYPE_p_OpenBabel__OBBase swig_types[6]
#define SWIGTYPE_p_OpenBabel__OBBitVec swig_types[7]
#define SWIGTYPE_p_OpenBabel__OBBond swig_types[8]
#define SWIGTYPE_p_OpenBabel__OBChainsParser swig_types[9]
#define SWIGTYPE_p_OpenBabel__OBChiralData swig_types[10]
#define SWIGTYPE_p_OpenBabel__OBCommentData swig_types[11]
#define SWIGTYPE_p_OpenBabel__OBConformerData swig_types[12]
#define SWIGTYPE_p_OpenBabel__OBConversion swig_types[13]
#define SWIGTYPE_p_OpenBabel__OBEdgeBase swig_types[14]
#define SWIGTYPE_p_OpenBabel__OBElement swig_types[15]
#define SWIGTYPE_p_OpenBabel__OBElementTable swig_types[16]
#define SWIGTYPE_p_OpenBabel__OBExternalBondData swig_types[17]
#define SWIGTYPE_p_OpenBabel__OBFormat swig_types[18]
#define SWIGTYPE_p_OpenBabel__OBGenericData swig_types[19]
#define SWIGTYPE_p_OpenBabel__OBGlobalDataBase swig_types[20]
#define SWIGTYPE_p_OpenBabel__OBGraphBase swig_types[21]
#define SWIGTYPE_p_OpenBabel__OBInternalCoord swig_types[22]
#define SWIGTYPE_p_OpenBabel__OBIsotopeTable swig_types[23]
#define SWIGTYPE_p_OpenBabel__OBMol swig_types[24]
#define SWIGTYPE_p_OpenBabel__OBNodeBase swig_types[25]
#define SWIGTYPE_p_OpenBabel__OBPairData swig_types[26]
#define SWIGTYPE_p_OpenBabel__OBResidue swig_types[27]
#define SWIGTYPE_p_OpenBabel__OBResidueData swig_types[28]
#define SWIGTYPE_p_OpenBabel__OBRingData swig_types[29]
#define SWIGTYPE_p_OpenBabel__OBSerialNums swig_types[30]
#define SWIGTYPE_p_OpenBabel__OBSymmetryData swig_types[31]
#define SWIGTYPE_p_OpenBabel__OBTorsionData swig_types[32]
#define SWIGTYPE_p_OpenBabel__OBTypeTable swig_types[33]
#define SWIGTYPE_p_OpenBabel__OBUnitCell swig_types[34]
#define SWIGTYPE_p_OpenBabel__OBVirtualBond swig_types[35]
#define SWIGTYPE_p_OpenBabel__vector3 swig_types[36]
#define SWIGTYPE_p_a_3__double swig_types[37]
#define SWIGTYPE_p_char swig_types[38]
#define SWIGTYPE_p_double swig_types[39]
#define SWIGTYPE_p_int swig_types[40]
#define SWIGTYPE_p_p_OpenBabel__OBFormat swig_types[41]
#define SWIGTYPE_p_p_double swig_types[42]
#define SWIGTYPE_p_std__istream swig_types[43]
#define SWIGTYPE_p_std__mapTchar_const_p_OpenBabel__OBFormat_p_OpenBabel__CharPtrLess_std__allocatorTstd__pairTchar_const_pconst_OpenBabel__OBFormat_p_t_t_t swig_types[44]
#define SWIGTYPE_p_std__mapTstd__string_std__string_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_std__string_t_t_t swig_types[45]
#define SWIGTYPE_p_std__ostream swig_types[46]
#define SWIGTYPE_p_std__streampos swig_types[47]
#define SWIGTYPE_p_std__string swig_types[48]
#define SWIGTYPE_p_std__type_info swig_types[49]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t swig_types[50]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t__iterator swig_types[51]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBBond_p_std__allocatorTOpenBabel__OBBond_p_t_t swig_types[52]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator swig_types[53]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t swig_types[54]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator swig_types[55]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t swig_types[56]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t__iterator swig_types[57]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t swig_types[58]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t__iterator swig_types[59]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBResidue_p_std__allocatorTOpenBabel__OBResidue_p_t_t__iterator swig_types[60]
#define SWIGTYPE_p_std__vectorTOpenBabel__OBRing_p_std__allocatorTOpenBabel__OBRing_p_t_t swig_types[61]
#define SWIGTYPE_p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t swig_types[62]
#define SWIGTYPE_p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t__iterator swig_types[63]
#define SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t swig_types[64]
#define SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t swig_types[65]
#define SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t swig_types[66]
#define SWIGTYPE_p_std__vectorTstd__vectorTint_std__allocatorTint_t_t_std__allocatorTstd__vectorTint_std__allocatorTint_t_t_t_t swig_types[67]
#define SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t swig_types[68]
#define SWIGTYPE_ptrdiff_t swig_types[69]
#define SWIGTYPE_size_t swig_types[70]
#define SWIGTYPE_std__ptrdiff_t swig_types[71]
#define SWIGTYPE_std__size_t swig_types[72]
static swig_type_info *swig_types[74];
static swig_module_info swig_module = {swig_types, 73, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _openbabel.so
  ------------------------------------------------*/
#define SWIG_init    init_openbabel

#define SWIG_name    "_openbabel"

#include "mol.h"
#include "obconversion.h"
#include "data.h"


#include <iostream>  


#if PY_VERSION_HEX < 0x02000000
#define PySequence_Size PySequence_Length
#endif
#include <stdexcept>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


SWIGINTERN void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <stdexcept>


  
#if defined(__SUNPRO_CC) 
#define SWIG_STD_NOASSIGN_STL
#define SWIG_STD_NOINSERT_TEMPLATE_STL
#endif


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif




#include <string>
#include <stdexcept>


#include <algorithm>


#include <list>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>


#include <string>


  /*@/usr/local/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


SWIGINTERNINLINE PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong(static_cast<long >(value)); 
}


#if UINT_MAX < LONG_MAX
/*@/usr/local/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/local/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERNINLINE int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return 1;
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = static_cast<int >(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERNINLINE double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}


  SWIGINTERN int
    SWIG_AsPtr_std_string(PyObject* obj, std::string **val)
    {
      static swig_type_info* string_info = SWIG_TypeQuery("std::string *");
      std::string *vptr;    
      if (SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0) != -1) {
	if (val) *val = vptr;
	return SWIG_OLDOBJ;
      } else {
	PyErr_Clear();
	char* buf = 0 ; size_t size = 0;
	if (SWIG_AsCharPtrAndSize(obj, &buf, &size)) {
	  if (buf) {
	    if (val) *val = new std::string(buf, size - 1);
	    return SWIG_NEWOBJ;
	  }
	} else {
	  PyErr_Clear();
	}  
	if (val) {
	  PyErr_SetString(PyExc_TypeError,"a string is expected");
	}
	return 0;
      }
    }

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}

  
SWIGINTERNINLINE int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}


  /*@/usr/local/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj(const_cast<char* >(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}


  /*@/usr/local/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


SWIGINTERNINLINE PyObject *
SWIG_FromCharArray(const char* carray, size_t size)
{
  if (size > INT_MAX) {
    return SWIG_NewPointerObj(const_cast<char * >(carray), 
			      SWIG_TypeQuery("char *"), 0);
  } else {
    return PyString_FromStringAndSize(carray, static_cast<int >(size));
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_std_string(const std::string& s)
  {
    return SWIG_FromCharArray(s.data(), s.size());
  }


SWIGINTERNINLINE int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = static_cast<unsigned int >(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNINLINE unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject *obj, char *val, size_t size)
{ 
  char* cptr; size_t csize;  
  if (SWIG_AsCharPtrAndSize(obj, &cptr, &csize)) {
    /* in C you can do:        

         char x[5] = "hello"; 

        ie, assing the array using an extra '0' char.
    */
    if ((csize == size + 1) && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize);
	if (csize < size) memset(val + csize, 0, size - csize);
      }
      return 1;
    }
  }
  if (val) {
    PyErr_Format(PyExc_TypeError,
		 "a char array of maximum size %lu is expected", 
		 (unsigned long) size);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_char(PyObject *obj, char *val)
{
  const char* errmsg = val ? "char" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, CHAR_MIN,CHAR_MAX, errmsg)) {
      if (val) *val = static_cast<char >(v);
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
    return SWIG_AsCharArray(obj, val, 1);
  }
 }


SWIGINTERNINLINE char
SWIG_As_char(PyObject* obj)
{
  char v;
  if (!SWIG_AsVal_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(char));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_char(PyObject* obj)
{
  return SWIG_AsVal_char(obj, (char*)0);
}


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNINLINE bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_char(char c) 
{ 
  return PyString_FromStringAndSize(&c,1);
}


SWIGINTERN int
  SWIG_AsVal_short(PyObject *obj, short *val)
{ 
  const char* errmsg = val ? "short" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, SHRT_MIN, SHRT_MAX, errmsg)) {
      if (val) *val = static_cast<short >(v);
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}


SWIGINTERNINLINE short
SWIG_As_short(PyObject* obj)
{
  short v;
  if (!SWIG_AsVal_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(short));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_short(PyObject* obj)
{
  return SWIG_AsVal_short(obj, (short*)0);
}


  /*@/usr/local/share/swig/1.3.27/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_short PyInt_FromLong
/*@@*/


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_short(PyObject *obj, unsigned short *val)
{ 
  const char* errmsg = val ? "unsigned short" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, USHRT_MAX, errmsg)) {
      if (val) *val = static_cast<unsigned short >(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned short
SWIG_As_unsigned_SS_short(PyObject* obj)
{
  unsigned short v;
  if (!SWIG_AsVal_unsigned_SS_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned short));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_short(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_short(obj, (unsigned short*)0);
}

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_OBGlobalDataBase(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBGlobalDataBase *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBGlobalDataBase")) goto fail;
    result = (OpenBabel::OBGlobalDataBase *)new OpenBabel::OBGlobalDataBase();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGlobalDataBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OBGlobalDataBase(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBGlobalDataBase",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBGlobalDataBase_Init(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBGlobalDataBase_Init",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Init();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBGlobalDataBase_GetSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBGlobalDataBase_GetSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->GetSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBGlobalDataBase_SetReadDirectory(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBGlobalDataBase_SetReadDirectory",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->SetReadDirectory(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBGlobalDataBase_SetEnvironmentVariable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBGlobalDataBase_SetEnvironmentVariable",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->SetEnvironmentVariable(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBGlobalDataBase_ParseLine(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBGlobalDataBase_ParseLine",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBGlobalDataBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->ParseLine((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBGlobalDataBase_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBGlobalDataBase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBElement__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBElement")) goto fail;
    result = (OpenBabel::OBElement *)new OpenBabel::OBElement();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBElement__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    char *arg2 = (char *) 0 ;
    double arg3 ;
    double arg4 ;
    int arg5 ;
    double arg6 ;
    double arg7 ;
    double arg8 ;
    double arg9 ;
    double arg10 ;
    double arg11 ;
    double arg12 ;
    std::string arg13 ;
    OpenBabel::OBElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    PyObject * obj12 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:new_OBElement",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = static_cast<double >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<double >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<int >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = static_cast<double >(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = static_cast<double >(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = static_cast<double >(SWIG_As_double(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = static_cast<double >(SWIG_As_double(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = static_cast<double >(SWIG_As_double(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        arg11 = static_cast<double >(SWIG_As_double(obj10)); 
        if (SWIG_arg_fail(11)) SWIG_fail;
    }
    {
        arg12 = static_cast<double >(SWIG_As_double(obj11)); 
        if (SWIG_arg_fail(12)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj12, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj12);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(13)) SWIG_fail;
        arg13 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (OpenBabel::OBElement *)new OpenBabel::OBElement(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBElement(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[14];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 13); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_OBElement__SWIG_0(self,args);
    }
    if (argc == 13) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                _v = SWIG_Check_double(argv[6]);
                                if (_v) {
                                    _v = SWIG_Check_double(argv[7]);
                                    if (_v) {
                                        _v = SWIG_Check_double(argv[8]);
                                        if (_v) {
                                            _v = SWIG_Check_double(argv[9]);
                                            if (_v) {
                                                _v = SWIG_Check_double(argv[10]);
                                                if (_v) {
                                                    _v = SWIG_Check_double(argv[11]);
                                                    if (_v) {
                                                        _v = SWIG_AsPtr_std_string(argv[12], (std::string**)(0));
                                                        if (_v) {
                                                            return _wrap_new_OBElement__SWIG_1(self,args);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_OBElement'");
    return NULL;
}


static PyObject *_wrap_OBElement_GetAtomicNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetAtomicNum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->GetAtomicNum();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetSymbol(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetSymbol",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)(arg1)->GetSymbol();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetCovalentRad(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetCovalentRad",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetCovalentRad();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetVdwRad(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetVdwRad",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetVdwRad();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetMass(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetMass",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetMass();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetMaxBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetMaxBonds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->GetMaxBonds();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetElectroNeg(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetElectroNeg",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetElectroNeg();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetIonization(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetIonization",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetIonization();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetElectronAffinity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetElectronAffinity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetElectronAffinity();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->GetName();
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetRed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetRed",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetRed();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetGreen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetGreen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetGreen();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElement_GetBlue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElement_GetBlue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetBlue();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OBElement(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBElement",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBElement_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBElement, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBElementTable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBElementTable")) goto fail;
    result = (OpenBabel::OBElementTable *)new OpenBabel::OBElementTable();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBElementTable, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OBElementTable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBElementTable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_ParseLine(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_ParseLine",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->ParseLine((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetNumberOfElements(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElementTable_GetNumberOfElements",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->GetNumberOfElements();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBElementTable_GetSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->GetSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetAtomicNum__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    char *arg2 = (char *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetAtomicNum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (int)(arg1)->GetAtomicNum((char const *)arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetAtomicNum__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    char *arg2 = (char *) 0 ;
    int *arg3 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBElementTable_GetAtomicNum",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (int)(arg1)->GetAtomicNum((char const *)arg2,*arg3);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetAtomicNum(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBElementTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBElementTable_GetAtomicNum__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBElementTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_int, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_OBElementTable_GetAtomicNum__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBElementTable_GetAtomicNum'");
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetSymbol(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetSymbol",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (char *)(arg1)->GetSymbol(arg2);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetVdwRad(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetVdwRad",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->GetVdwRad(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetCovalentRad(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetCovalentRad",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->GetCovalentRad(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetMass(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetMass",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->GetMass(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_CorrectedBondRad__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBElementTable_CorrectedBondRad",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->CorrectedBondRad(arg2,arg3);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_CorrectedBondRad__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_CorrectedBondRad",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->CorrectedBondRad(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_CorrectedBondRad(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBElementTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_OBElementTable_CorrectedBondRad__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBElementTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_OBElementTable_CorrectedBondRad__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBElementTable_CorrectedBondRad'");
    return NULL;
}


static PyObject *_wrap_OBElementTable_CorrectedVdwRad__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBElementTable_CorrectedVdwRad",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->CorrectedVdwRad(arg2,arg3);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_CorrectedVdwRad__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_CorrectedVdwRad",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->CorrectedVdwRad(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_CorrectedVdwRad(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBElementTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_OBElementTable_CorrectedVdwRad__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBElementTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_OBElementTable_CorrectedVdwRad__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBElementTable_CorrectedVdwRad'");
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetMaxBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetMaxBonds",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)(arg1)->GetMaxBonds(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetElectroNeg(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetElectroNeg",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->GetElectroNeg(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetIonization(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetIonization",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->GetIonization(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetElectronAffinity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetElectronAffinity",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->GetElectronAffinity(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetRGB(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    SwigValueWrapper<std::vector<double,std::allocator<double > > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetRGB",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->GetRGB(arg2);
    
    {
        std::vector<double,std::allocator<double > > * resultptr;
        resultptr = new std::vector<double,std::allocator<double > >(static_cast<std::vector<double,std::allocator<double > > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBElementTable_GetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
    int arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBElementTable_GetName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->GetName(arg2);
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBElementTable_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBElementTable, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBIsotopeTable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBIsotopeTable *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBIsotopeTable")) goto fail;
    result = (OpenBabel::OBIsotopeTable *)new OpenBabel::OBIsotopeTable();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBIsotopeTable, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OBIsotopeTable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBIsotopeTable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBIsotopeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBIsotopeTable_GetSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBIsotopeTable_GetSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBIsotopeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->GetSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBIsotopeTable_ParseLine(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBIsotopeTable_ParseLine",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBIsotopeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->ParseLine((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBIsotopeTable_GetExactMass__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBIsotopeTable_GetExactMass",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBIsotopeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int const >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<unsigned int const >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->GetExactMass(arg2,arg3);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBIsotopeTable_GetExactMass__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
    unsigned int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBIsotopeTable_GetExactMass",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBIsotopeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int const >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->GetExactMass(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBIsotopeTable_GetExactMass(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBIsotopeTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBIsotopeTable_GetExactMass__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBIsotopeTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_OBIsotopeTable_GetExactMass__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBIsotopeTable_GetExactMass'");
    return NULL;
}


static PyObject * OBIsotopeTable_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBIsotopeTable, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBTypeTable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBTypeTable")) goto fail;
    result = (OpenBabel::OBTypeTable *)new OpenBabel::OBTypeTable();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBTypeTable, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OBTypeTable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBTypeTable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBTypeTable_ParseLine(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBTypeTable_ParseLine",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->ParseLine((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBTypeTable_GetSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBTypeTable_GetSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->GetSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBTypeTable_SetFromType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBTypeTable_SetFromType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->SetFromType((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBTypeTable_SetToType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBTypeTable_SetToType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->SetToType((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBTypeTable_Translate__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBTypeTable_Translate",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    result = (bool)(arg1)->Translate(arg2,(char const *)arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBTypeTable_Translate__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    bool result;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBTypeTable_Translate",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    result = (bool)(arg1)->Translate(*arg2,(std::string const &)*arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_OBTypeTable_Translate(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_OBTypeTable_Translate__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBTypeTable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_AsCharPtr(argv[2], (char **)(0));
                if (_v) {
                    return _wrap_OBTypeTable_Translate__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBTypeTable_Translate'");
    return NULL;
}


static PyObject *_wrap_OBTypeTable_GetFromType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBTypeTable_GetFromType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->GetFromType();
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBTypeTable_GetToType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBTypeTable_GetToType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->GetToType();
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBTypeTable_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBTypeTable, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBResidueData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidueData *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBResidueData")) goto fail;
    result = (OpenBabel::OBResidueData *)new OpenBabel::OBResidueData();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBResidueData, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidueData_ParseLine(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidueData_ParseLine",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidueData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->ParseLine((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidueData_GetSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidueData_GetSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidueData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->GetSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidueData_SetResName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidueData_SetResName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidueData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (bool)(arg1)->SetResName((std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_OBResidueData_LookupBO__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidueData_LookupBO",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidueData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (int)(arg1)->LookupBO((std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_OBResidueData_LookupBO__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int result;
    int res2 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBResidueData_LookupBO",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidueData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    result = (int)(arg1)->LookupBO((std::string const &)*arg2,(std::string const &)*arg3);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_OBResidueData_LookupBO(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidueData, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_OBResidueData_LookupBO__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidueData, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_OBResidueData_LookupBO__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBResidueData_LookupBO'");
    return NULL;
}


static PyObject *_wrap_OBResidueData_LookupType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    int *arg4 = 0 ;
    bool result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:OBResidueData_LookupType",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidueData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("int");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)(arg1)->LookupType((std::string const &)*arg2,*arg3,*arg4);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_OBResidueData_AssignBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
    OpenBabel::OBMol *arg2 = 0 ;
    OpenBabel::OBBitVec *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBResidueData_AssignBonds",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidueData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::OBMol");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBBitVec, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("OpenBabel::OBBitVec");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->AssignBonds(*arg2,*arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OBResidueData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBResidueData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidueData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBResidueData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBResidueData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OBFormat_ReadMolecule(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBFormat_ReadMolecule",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (bool)(arg1)->ReadMolecule(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_ReadChemObject(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBFormat_ReadChemObject",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->ReadChemObject(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_WriteMolecule(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBFormat_WriteMolecule",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (bool)(arg1)->WriteMolecule(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_WriteChemObject(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBFormat_WriteChemObject",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->WriteChemObject(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_Description(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBFormat_Description",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)(arg1)->Description();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_TargetClassDescription(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBFormat_TargetClassDescription",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)(arg1)->TargetClassDescription();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_GetType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    std::type_info *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBFormat_GetType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::type_info const &_result_ref = (arg1)->GetType();
        result = (std::type_info *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__type_info, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_SpecificationURL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBFormat_SpecificationURL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)(arg1)->SpecificationURL();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_GetMIMEType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBFormat_GetMIMEType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)(arg1)->GetMIMEType();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_Flags(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBFormat_Flags",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->Flags();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_SkipObjects(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    int arg2 ;
    OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBFormat_SkipObjects",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (int)(arg1)->SkipObjects(arg2,arg3);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBFormat_MakeNewInstance(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    OpenBabel::OBFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBFormat_MakeNewInstance",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBFormat *)(arg1)->MakeNewInstance();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OBFormat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBFormat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBFormat_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBFormat, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CharPtrLess___call__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::CharPtrLess *arg1 = (OpenBabel::CharPtrLess *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CharPtrLess___call__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__CharPtrLess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    result = (bool)((OpenBabel::CharPtrLess const *)arg1)->operator ()((char const *)arg2,(char const *)arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CharPtrLess(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::CharPtrLess *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CharPtrLess")) goto fail;
    result = (OpenBabel::CharPtrLess *)new OpenBabel::CharPtrLess();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__CharPtrLess, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CharPtrLess(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::CharPtrLess *arg1 = (OpenBabel::CharPtrLess *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CharPtrLess",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__CharPtrLess, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CharPtrLess_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__CharPtrLess, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBConversion__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::istream *arg1 = (std::istream *) 0 ;
    std::ostream *arg2 = (std::ostream *) 0 ;
    OpenBabel::OBConversion *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_OBConversion",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__istream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBConversion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBConversion__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::istream *arg1 = (std::istream *) 0 ;
    OpenBabel::OBConversion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OBConversion",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__istream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBConversion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBConversion__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBConversion")) goto fail;
    result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBConversion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBConversion__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = 0 ;
    OpenBabel::OBConversion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OBConversion",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("OpenBabel::OBConversion");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion((OpenBabel::OBConversion const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBConversion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBConversion(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_OBConversion__SWIG_2(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__istream, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_OBConversion__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_OBConversion__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__istream, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__ostream, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_OBConversion__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_OBConversion'");
    return NULL;
}


static PyObject *_wrap_delete_OBConversion(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBConversion",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_RegisterFormat__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
    char *arg3 = (char *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_RegisterFormat",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2,(char const *)arg3);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_RegisterFormat__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_RegisterFormat",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_RegisterFormat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBConversion_RegisterFormat__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_AsCharPtr(argv[2], (char **)(0));
                if (_v) {
                    return _wrap_OBConversion_RegisterFormat__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_RegisterFormat'");
    return NULL;
}


static PyObject *_wrap_OBConversion_FindFormat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    OpenBabel::OBFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_FindFormat",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FindFormat((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_FormatFromExt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    OpenBabel::OBFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_FormatFromExt",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromExt((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_FormatFromMIME(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    OpenBabel::OBFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_FormatFromMIME",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromMIME((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetNextFormat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::Formatpos *arg1 = 0 ;
    char **arg2 = 0 ;
    OpenBabel::OBFormat **arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_GetNextFormat",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__FMapType__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("OpenBabel::Formatpos");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        char * temp;
        if (!SWIG_AsCharPtr(obj1, (char**)&temp)) {
            SWIG_arg_fail(2);SWIG_fail;
        }
        arg2 = &temp;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("OpenBabel::OBFormat");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)OpenBabel::OBConversion::GetNextFormat(*arg1,(char const *&)*arg2,*arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Description(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *result;
    
    if(!PyArg_ParseTuple(args,(char *)":OBConversion_Description")) goto fail;
    result = (char *)OpenBabel::OBConversion::Description();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetInStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    std::istream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetInStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::istream *)((OpenBabel::OBConversion const *)arg1)->GetInStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__istream, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetOutStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    std::ostream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetOutStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::ostream *)((OpenBabel::OBConversion const *)arg1)->GetOutStream();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__ostream, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetInStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    std::istream *arg2 = (std::istream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_SetInStream",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__istream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetInStream(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetOutStream(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    std::ostream *arg2 = (std::ostream *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_SetOutStream",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetOutStream(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetInAndOutFormats__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_SetInAndOutFormats",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    result = (bool)(arg1)->SetInAndOutFormats((char const *)arg2,(char const *)arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetInAndOutFormats__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
    OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_SetInAndOutFormats",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (bool)(arg1)->SetInAndOutFormats(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetInAndOutFormats(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_OpenBabel__OBFormat, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_OBConversion_SetInAndOutFormats__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_AsCharPtr(argv[2], (char **)(0));
                if (_v) {
                    return _wrap_OBConversion_SetInAndOutFormats__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_SetInAndOutFormats'");
    return NULL;
}


static PyObject *_wrap_OBConversion_SetInFormat__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_SetInFormat",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->SetInFormat((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetInFormat__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_SetInFormat",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->SetInFormat(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetInFormat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBConversion_SetInFormat__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBConversion_SetInFormat__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_SetInFormat'");
    return NULL;
}


static PyObject *_wrap_OBConversion_SetOutFormat__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_SetOutFormat",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->SetOutFormat((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetOutFormat__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_SetOutFormat",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->SetOutFormat(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetOutFormat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBConversion_SetOutFormat__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBConversion_SetOutFormat__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_SetOutFormat'");
    return NULL;
}


static PyObject *_wrap_OBConversion_GetInFormat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetInFormat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetInFormat();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetOutFormat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBFormat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetOutFormat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetOutFormat();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetInFilename(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetInFilename",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((OpenBabel::OBConversion const *)arg1)->GetInFilename();
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetInPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    std::streampos result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetInPos",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((OpenBabel::OBConversion const *)arg1)->GetInPos();
    
    {
        std::streampos * resultptr;
        resultptr = new std::streampos(static_cast<std::streampos & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__streampos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetInLen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetInLen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((OpenBabel::OBConversion const *)arg1)->GetInLen();
    
    {
        resultobj = SWIG_From_unsigned_SS_long(static_cast<unsigned long >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetTitle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetTitle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((OpenBabel::OBConversion const *)arg1)->GetTitle();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetAuxConv(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBConversion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetAuxConv",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBConversion *)((OpenBabel::OBConversion const *)arg1)->GetAuxConv();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBConversion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetAuxConv(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_SetAuxConv",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetAuxConv(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_IsOption__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *arg2 = (char *) 0 ;
    OpenBabel::OBConversion::Option_type arg3 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_IsOption",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = static_cast<OpenBabel::OBConversion::Option_type >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (char *)(arg1)->IsOption((char const *)arg2,arg3);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_IsOption__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_IsOption",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (char *)(arg1)->IsOption((char const *)arg2);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_IsOption(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBConversion_IsOption__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_OBConversion_IsOption__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_IsOption'");
    return NULL;
}


static PyObject *_wrap_OBConversion_GetOptions(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBConversion::Option_type arg2 ;
    std::map<std::string,std::string,std::less<std::string >,std::allocator<std::pair<std::string const,std::string > > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_GetOptions",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<OpenBabel::OBConversion::Option_type >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (std::map<std::string,std::string,std::less<std::string >,std::allocator<std::pair<std::string const,std::string > > > *)(arg1)->GetOptions(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTstd__string_std__string_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_std__string_t_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_AddOption__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *arg2 = (char *) 0 ;
    OpenBabel::OBConversion::Option_type arg3 ;
    char *arg4 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:OBConversion_AddOption",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = static_cast<OpenBabel::OBConversion::Option_type >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    (arg1)->AddOption((char const *)arg2,arg3,(char const *)arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_AddOption__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *arg2 = (char *) 0 ;
    OpenBabel::OBConversion::Option_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_AddOption",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = static_cast<OpenBabel::OBConversion::Option_type >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->AddOption((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_AddOption(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_OBConversion_AddOption__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_AsCharPtr(argv[3], (char **)(0));
                    if (_v) {
                        return _wrap_OBConversion_AddOption__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_AddOption'");
    return NULL;
}


static PyObject *_wrap_OBConversion_RemoveOption(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *arg2 = (char *) 0 ;
    OpenBabel::OBConversion::Option_type arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_RemoveOption",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = static_cast<OpenBabel::OBConversion::Option_type >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->RemoveOption((char const *)arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetOptions(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    char *arg2 = (char *) 0 ;
    OpenBabel::OBConversion::Option_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_SetOptions",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = static_cast<OpenBabel::OBConversion::Option_type >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->SetOptions((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_RegisterOptionParam__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
    int arg3 ;
    OpenBabel::OBConversion::Option_type arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:OBConversion_RegisterOptionParam",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<OpenBabel::OBConversion::Option_type >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_RegisterOptionParam__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_RegisterOptionParam",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_RegisterOptionParam__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_RegisterOptionParam",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBFormat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_RegisterOptionParam(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBConversion_RegisterOptionParam__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_OBConversion_RegisterOptionParam__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBFormat, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_OBConversion_RegisterOptionParam__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_RegisterOptionParam'");
    return NULL;
}


static PyObject *_wrap_OBConversion_GetOptionParams(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    OpenBabel::OBConversion::Option_type arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_GetOptionParams",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = static_cast<OpenBabel::OBConversion::Option_type >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)OpenBabel::OBConversion::GetOptionParams(arg1,arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Convert__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    std::istream *arg2 = (std::istream *) 0 ;
    std::ostream *arg3 = (std::ostream *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_Convert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__istream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (int)(arg1)->Convert(arg2,arg3);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Convert__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_Convert",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->Convert();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Convert(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBConversion_Convert__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__istream, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__ostream, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_OBConversion_Convert__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_Convert'");
    return NULL;
}


static PyObject *_wrap_OBConversion_FullConvert(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    std::vector<std::string,std::allocator<std::string > > *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::vector<std::string,std::allocator<std::string > > *arg4 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:OBConversion_FullConvert",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (int)(arg1)->FullConvert(*arg2,*arg3,*arg4);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_AddChemObject(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_AddChemObject",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (int)(arg1)->AddChemObject(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetChemObject(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetChemObject",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBBase *)(arg1)->GetChemObject();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBase, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_IsLast(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_IsLast",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsLast();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_IsFirstInput(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_IsFirstInput",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsFirstInput();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetOutputIndex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_GetOutputIndex",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((OpenBabel::OBConversion const *)arg1)->GetOutputIndex();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetOutputIndex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_SetOutputIndex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetOutputIndex(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetMoreFilesToCome(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_SetMoreFilesToCome",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetMoreFilesToCome();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_SetOneObjectOnly(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBConversion_SetOneObjectOnly",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetOneObjectOnly();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_GetDefaultFormat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBFormat *result;
    
    if(!PyArg_ParseTuple(args,(char *)":OBConversion_GetDefaultFormat")) goto fail;
    result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::GetDefaultFormat();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBFormat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Write__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    std::ostream *arg3 = (std::ostream *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_Write",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__ostream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (bool)(arg1)->Write(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Write__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_Write",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->Write(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Write(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBBase, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBConversion_Write__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBBase, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__ostream, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_OBConversion_Write__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_Write'");
    return NULL;
}


static PyObject *_wrap_OBConversion_WriteString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_WriteString",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (arg1)->WriteString(arg2);
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_WriteFile(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    std::string arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_WriteFile",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->WriteFile(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Read__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    std::istream *arg3 = (std::istream *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_Read",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__istream, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (bool)(arg1)->Read(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Read__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_Read",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->Read(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_Read(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBBase, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBConversion_Read__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBConversion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBBase, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__istream, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_OBConversion_Read__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBConversion_Read'");
    return NULL;
}


static PyObject *_wrap_OBConversion_ReadString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    std::string arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_ReadString",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->ReadString(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_ReadFile(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
    OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
    std::string arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBConversion_ReadFile",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBConversion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (bool)(arg1)->ReadFile(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_BatchFileName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_BatchFileName",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = OpenBabel::OBConversion::BatchFileName(*arg1,*arg2);
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBConversion_IncrementedFileName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    int arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBConversion_IncrementedFileName",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<int const >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = OpenBabel::OBConversion::IncrementedFileName(*arg1,arg2);
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBConversion_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBConversion, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBResidue__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBResidue")) goto fail;
    result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBResidue, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBResidue__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = 0 ;
    OpenBabel::OBResidue *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OBResidue",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("OpenBabel::OBResidue");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue((OpenBabel::OBResidue const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBResidue, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBResidue(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_OBResidue__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_OBResidue__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_OBResidue'");
    return NULL;
}


static PyObject *_wrap_delete_OBResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBResidue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_AddAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_AddAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->AddAtom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_InsertAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_InsertAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->InsertAtom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_RemoveAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_RemoveAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->RemoveAtom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_Clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_Clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_SetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_SetName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->SetName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_OBResidue_SetNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_SetNum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetNum(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_SetChain(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    char arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_SetChain",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<char >(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetChain(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_SetChainNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_SetChainNum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetChainNum(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_SetIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_SetIdx",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetIdx(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_SetAtomID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    std::string *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBResidue_SetAtomID",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    (arg1)->SetAtomID(arg2,(std::string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_OBResidue_SetHetAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBResidue_SetHetAtom",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->SetHetAtom(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_SetSerialNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBResidue_SetSerialNum",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->SetSerialNum(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((OpenBabel::OBResidue const *)arg1)->GetName();
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetNum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetNum();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetNumAtoms(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetNumAtoms",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetNumAtoms();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetChain(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetChain",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char)((OpenBabel::OBResidue const *)arg1)->GetChain();
    
    {
        resultobj = SWIG_From_char(static_cast<char >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetChainNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetChainNum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetChainNum();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetIdx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetIdx();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetResKey(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetResKey",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetResKey();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetAtoms(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetAtoms",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((OpenBabel::OBResidue const *)arg1)->GetAtoms();
    
    {
        std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > > * resultptr;
        resultptr = new std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > >(static_cast<std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetBonds__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    bool arg2 ;
    SwigValueWrapper<std::vector<OpenBabel::OBBond *,std::allocator<OpenBabel::OBBond * > > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_GetBonds",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((OpenBabel::OBResidue const *)arg1)->GetBonds(arg2);
    
    {
        std::vector<OpenBabel::OBBond *,std::allocator<OpenBabel::OBBond * > > * resultptr;
        resultptr = new std::vector<OpenBabel::OBBond *,std::allocator<OpenBabel::OBBond * > >(static_cast<std::vector<OpenBabel::OBBond *,std::allocator<OpenBabel::OBBond * > > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBBond_p_std__allocatorTOpenBabel__OBBond_p_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetBonds__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBBond *,std::allocator<OpenBabel::OBBond * > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetBonds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((OpenBabel::OBResidue const *)arg1)->GetBonds();
    
    {
        std::vector<OpenBabel::OBBond *,std::allocator<OpenBabel::OBBond * > > * resultptr;
        resultptr = new std::vector<OpenBabel::OBBond *,std::allocator<OpenBabel::OBBond * > >(static_cast<std::vector<OpenBabel::OBBond *,std::allocator<OpenBabel::OBBond * > > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBBond_p_std__allocatorTOpenBabel__OBBond_p_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetBonds(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBResidue_GetBonds__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_OBResidue_GetBonds__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBResidue_GetBonds'");
    return NULL;
}


static PyObject *_wrap_OBResidue_GetAtomID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_GetAtomID",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = ((OpenBabel::OBResidue const *)arg1)->GetAtomID(arg2);
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetSerialNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_GetSerialNum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetSerialNum(arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetAminoAcidProperty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_GetAminoAcidProperty",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAminoAcidProperty(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetAtomProperty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBResidue_GetAtomProperty",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAtomProperty(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetResidueProperty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_GetResidueProperty",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((OpenBabel::OBResidue const *)arg1)->GetResidueProperty(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_IsHetAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_IsHetAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)((OpenBabel::OBResidue const *)arg1)->IsHetAtom(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_IsResidueType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_IsResidueType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((OpenBabel::OBResidue const *)arg1)->IsResidueType(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_BeginAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > >::iterator *arg2 = 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_BeginAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBAtom *)(arg1)->BeginAtom(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_NextAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > >::iterator *arg2 = 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_NextAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBAtom *)(arg1)->NextAtom(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_HasData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasData(*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_HasData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->HasData((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_HasData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasData(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_HasData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBResidue_HasData__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBResidue_HasData__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBResidue_HasData__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBResidue_HasData'");
    return NULL;
}


static PyObject *_wrap_OBResidue_DeleteData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->DeleteData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_DeleteData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBGenericData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->DeleteData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_DeleteData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->DeleteData(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_DeleteData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBGenericData, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBResidue_DeleteData__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBResidue_DeleteData__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBResidue_DeleteData__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBResidue_DeleteData'");
    return NULL;
}


static PyObject *_wrap_OBResidue_SetData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_SetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBGenericData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_DataSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_DataSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->DataSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    unsigned int arg2 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    std::string *arg2 = 0 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    char *arg2 = (char *) 0 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBResidue_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData((char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetData__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_GetData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > &_result_ref = (arg1)->GetData();
        result = (std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_GetData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBResidue_GetData__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBResidue_GetData__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBResidue_GetData__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBResidue, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBResidue_GetData__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBResidue_GetData'");
    return NULL;
}


static PyObject *_wrap_OBResidue_BeginData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_BeginData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->BeginData();
    
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator(static_cast<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBResidue_EndData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBResidue_EndData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->EndData();
    
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator(static_cast<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBResidue_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBResidue, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBAtom")) goto fail;
    result = (OpenBabel::OBAtom *)new OpenBabel::OBAtom();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OBAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBAtom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_Clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_Clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetIdx",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetIdx(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetHyb(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetHyb",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetHyb(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetAtomicNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetAtomicNum",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetAtomicNum(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetIsotope(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetIsotope",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetIsotope(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetImplicitValence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetImplicitValence",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetImplicitValence(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IncrementImplicitValence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IncrementImplicitValence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->IncrementImplicitValence();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_DecrementImplicitValence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_DecrementImplicitValence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->DecrementImplicitValence();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetFormalCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetFormalCharge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetFormalCharge(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetSpinMultiplicity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetSpinMultiplicity",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<short >(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetSpinMultiplicity(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetType__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->SetType(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetType__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::string *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetType(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetType(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBAtom_SetType__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBAtom_SetType__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBAtom_SetType'");
    return NULL;
}


static PyObject *_wrap_OBAtom_SetPartialCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetPartialCharge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<double >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetPartialCharge(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetVector__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::vector3 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetVector",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__vector3, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::vector3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetVector(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetVector__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:OBAtom_SetVector",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<double const >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<double const >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<double const >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->SetVector(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetCoordPtr(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double **arg2 = (double **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetCoordPtr",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetCoordPtr(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetVector__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_SetVector",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetVector();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBAtom_SetVector__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__vector3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBAtom_SetVector__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_OBAtom_SetVector__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBAtom_SetVector'");
    return NULL;
}


static PyObject *_wrap_OBAtom_SetResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetResidue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetResidue(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetAromatic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_SetAromatic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetAromatic();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_UnsetAromatic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_UnsetAromatic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->UnsetAromatic();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetClockwiseStereo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_SetClockwiseStereo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetClockwiseStereo();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetAntiClockwiseStereo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_SetAntiClockwiseStereo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetAntiClockwiseStereo();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetPositiveStereo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_SetPositiveStereo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetPositiveStereo();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetNegativeStereo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_SetNegativeStereo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetNegativeStereo();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_UnsetStereo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_UnsetStereo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->UnsetStereo();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetInRing(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_SetInRing",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetInRing();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetChiral(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_SetChiral",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetChiral();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_ClearCoordPtr(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_ClearCoordPtr",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->ClearCoordPtr();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetFormalCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetFormalCharge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((OpenBabel::OBAtom const *)arg1)->GetFormalCharge();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetAtomicNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetAtomicNum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetAtomicNum();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetIsotope(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetIsotope",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned short)((OpenBabel::OBAtom const *)arg1)->GetIsotope();
    
    {
        resultobj = SWIG_From_unsigned_SS_short(static_cast<unsigned short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetSpinMultiplicity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetSpinMultiplicity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((OpenBabel::OBAtom const *)arg1)->GetSpinMultiplicity();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetAtomicMass(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetAtomicMass",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((OpenBabel::OBAtom const *)arg1)->GetAtomicMass();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetExactMass(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetExactMass",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((OpenBabel::OBAtom const *)arg1)->GetExactMass();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetIdx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetIdx();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetCoordinateIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetCoordinateIdx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetCoordinateIdx();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetCIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetCIdx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetCIdx();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetValence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetValence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetValence();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetHyb(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetHyb",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHyb();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetImplicitValence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetImplicitValence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetImplicitValence();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetHvyValence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetHvyValence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHvyValence();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetHeteroValence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetHeteroValence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHeteroValence();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)(arg1)->GetType();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetX(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetX",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetX();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetY(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetY",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetY();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetZ(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetZ",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetZ();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_x(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_x",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->x();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_y(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_y",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->y();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_z(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_z",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->z();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetCoordinate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetCoordinate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double *)(arg1)->GetCoordinate();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetVector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::vector3 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetVector",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        OpenBabel::vector3 &_result_ref = (arg1)->GetVector();
        result = (OpenBabel::vector3 *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__vector3, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetPartialCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetPartialCharge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetPartialCharge();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBResidue *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetResidue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBResidue *)(arg1)->GetResidue();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBResidue, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetNewBondVector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::vector3 *arg2 = 0 ;
    double arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBAtom_GetNewBondVector",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__vector3, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::vector3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<double >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->GetNewBondVector(*arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBBond *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_GetBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetNextAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetNextAtom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBAtom *)(arg1)->GetNextAtom();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_BeginBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_BeginBonds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->BeginBonds();
    
    {
        std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator(static_cast<std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_EndBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_EndBonds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->EndBonds();
    
    {
        std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator(static_cast<std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_BeginBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator *arg2 = 0 ;
    OpenBabel::OBBond *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_BeginBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBBond *)(arg1)->BeginBond(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_NextBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator *arg2 = 0 ;
    OpenBabel::OBBond *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_NextBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBBond *)(arg1)->NextBond(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_BeginNbrAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator *arg2 = 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_BeginNbrAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBAtom *)(arg1)->BeginNbrAtom(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_NextNbrAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator *arg2 = 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_NextNbrAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBAtom *)(arg1)->NextNbrAtom(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetDistance__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_GetDistance",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double)(arg1)->GetDistance(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetDistance__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_GetDistance",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (double)(arg1)->GetDistance(arg2);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetDistance(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBAtom_GetDistance__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_OBAtom_GetDistance__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBAtom_GetDistance'");
    return NULL;
}


static PyObject *_wrap_OBAtom_GetAngle__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBAtom_GetAngle",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)(arg1)->GetAngle(arg2,arg3);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetAngle__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBAtom_GetAngle",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (double)(arg1)->GetAngle(arg2,arg3);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetAngle(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_OBAtom_GetAngle__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_OBAtom_GetAngle__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBAtom_GetAngle'");
    return NULL;
}


static PyObject *_wrap_OBAtom_NewResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_NewResidue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NewResidue();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_DeleteResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_DeleteResidue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->DeleteResidue();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_AddBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_AddBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->AddBond(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_InsertBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator *arg2 = 0 ;
    OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBAtom_InsertBond",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->InsertBond(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_DeleteBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_DeleteBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->DeleteBond(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_ClearBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_ClearBond",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->ClearBond();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_CountFreeOxygens(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_CountFreeOxygens",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountFreeOxygens();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_ImplicitHydrogenCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_ImplicitHydrogenCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ImplicitHydrogenCount();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_ExplicitHydrogenCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_ExplicitHydrogenCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ExplicitHydrogenCount();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_MemberOfRingCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_MemberOfRingCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingCount();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_MemberOfRingSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_MemberOfRingSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SmallestBondAngle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_SmallestBondAngle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->SmallestBondAngle();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_AverageBondAngle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_AverageBondAngle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->AverageBondAngle();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_BOSum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_BOSum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->BOSum();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_KBOSum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_KBOSum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->KBOSum();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HtoMethyl(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_HtoMethyl",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HtoMethyl();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_SetHybAndGeom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetHybAndGeom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->SetHybAndGeom(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_HasResidue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasResidue();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsHydrogen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsHydrogen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsHydrogen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsCarbon(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsCarbon",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsCarbon();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsNitrogen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsNitrogen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsNitrogen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsOxygen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsOxygen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsOxygen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsSulfur(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsSulfur",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsSulfur();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsPhosphorus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsPhosphorus",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsPhosphorus();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsAromatic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsAromatic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((OpenBabel::OBAtom const *)arg1)->IsAromatic();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsInRing(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsInRing",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRing();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsInRingSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_IsInRingSize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRingSize(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsHeteroatom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsHeteroatom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsHeteroatom();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsNotCorH(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsNotCorH",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsNotCorH();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsConnected(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_IsConnected",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->IsConnected(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsOneThree(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_IsOneThree",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->IsOneThree(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsOneFour(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_IsOneFour",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->IsOneFour(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsCarboxylOxygen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsCarboxylOxygen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsCarboxylOxygen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsPhosphateOxygen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsPhosphateOxygen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsPhosphateOxygen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsSulfateOxygen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsSulfateOxygen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsSulfateOxygen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsNitroOxygen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsNitroOxygen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsNitroOxygen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsAmideNitrogen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsAmideNitrogen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsAmideNitrogen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsPolarHydrogen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsPolarHydrogen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsPolarHydrogen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsNonPolarHydrogen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsNonPolarHydrogen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsNonPolarHydrogen();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsAromaticNOxide(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsAromaticNOxide",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsAromaticNOxide();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsChiral(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsChiral",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsChiral();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsAxial(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsAxial",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsAxial();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsClockwise(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsClockwise",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsClockwise();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsAntiClockwise(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsAntiClockwise",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsAntiClockwise();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsPositiveStereo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsPositiveStereo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsPositiveStereo();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsNegativeStereo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsNegativeStereo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsNegativeStereo();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasChiralitySpecified(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_HasChiralitySpecified",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasChiralitySpecified();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasChiralVolume(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_HasChiralVolume",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasChiralVolume();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsHbondAcceptor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsHbondAcceptor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsHbondAcceptor();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsHbondDonor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsHbondDonor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsHbondDonor();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_IsHbondDonorH(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_IsHbondDonorH",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsHbondDonorH();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasAlphaBetaUnsat__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_HasAlphaBetaUnsat",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasAlphaBetaUnsat(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasAlphaBetaUnsat__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_HasAlphaBetaUnsat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasAlphaBetaUnsat();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasAlphaBetaUnsat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBAtom_HasAlphaBetaUnsat__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_OBAtom_HasAlphaBetaUnsat__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBAtom_HasAlphaBetaUnsat'");
    return NULL;
}


static PyObject *_wrap_OBAtom_HasBondOfOrder(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_HasBondOfOrder",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasBondOfOrder(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_CountBondsOfOrder(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_CountBondsOfOrder",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)(arg1)->CountBondsOfOrder(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasNonSingleBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_HasNonSingleBond",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasNonSingleBond();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasSingleBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_HasSingleBond",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasSingleBond();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasDoubleBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_HasDoubleBond",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasDoubleBond();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasAromaticBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_HasAromaticBond",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasAromaticBond();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_MatchesSMARTS(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_MatchesSMARTS",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->MatchesSMARTS((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasData(*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->HasData((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasData(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_HasData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBAtom_HasData__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBAtom_HasData__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBAtom_HasData__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBAtom_HasData'");
    return NULL;
}


static PyObject *_wrap_OBAtom_DeleteData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->DeleteData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_DeleteData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBGenericData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->DeleteData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_DeleteData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->DeleteData(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_DeleteData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBGenericData, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBAtom_DeleteData__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBAtom_DeleteData__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBAtom_DeleteData__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBAtom_DeleteData'");
    return NULL;
}


static PyObject *_wrap_OBAtom_SetData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_SetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBGenericData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_DataSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_DataSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->DataSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    unsigned int arg2 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::string *arg2 = 0 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    char *arg2 = (char *) 0 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBAtom_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData((char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetData__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_GetData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > &_result_ref = (arg1)->GetData();
        result = (std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_GetData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBAtom_GetData__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBAtom_GetData__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBAtom_GetData__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBAtom_GetData__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBAtom_GetData'");
    return NULL;
}


static PyObject *_wrap_OBAtom_BeginData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_BeginData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->BeginData();
    
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator(static_cast<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBAtom_EndData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBAtom_EndData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->EndData();
    
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator(static_cast<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBAtom_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBAtom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBBond")) goto fail;
    result = (OpenBabel::OBBond *)new OpenBabel::OBBond();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_OBBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBBond",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_SetIdx",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetIdx(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetBO(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_SetBO",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetBO(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetBegin(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_SetBegin",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetBegin(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetEnd(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_SetEnd",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetEnd(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetLength(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBBond_SetLength",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<double >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->SetLength(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    int arg2 ;
    OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
    int arg5 ;
    int arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:OBBond_Set",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = static_cast<int >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = static_cast<int >(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    (arg1)->Set(arg2,arg3,arg4,arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetKSingle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetKSingle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetKSingle();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetKDouble(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetKDouble",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetKDouble();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetKTriple(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetKTriple",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetKTriple();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetAromatic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetAromatic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetAromatic();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetHash(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetHash",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetHash();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetWedge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetWedge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetWedge();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetUp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetUp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetUp();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetDown(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetDown",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetDown();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetInRing(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetInRing",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetInRing();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_SetClosure(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_SetClosure",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetClosure();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_UnsetAromatic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_UnsetAromatic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->UnsetAromatic();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_UnsetKekule(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_UnsetKekule",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->UnsetKekule();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetBO(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetBO",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBO();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetBondOrder(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetBondOrder",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBondOrder();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetFlags(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetFlags",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetFlags();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetBeginAtomIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetBeginAtomIdx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBeginAtomIdx();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetEndAtomIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetEndAtomIdx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetEndAtomIdx();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetBeginAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetBeginAtom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBAtom *)(arg1)->GetBeginAtom();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetEndAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetEndAtom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBAtom *)(arg1)->GetEndAtom();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetNbrAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_GetNbrAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (OpenBabel::OBAtom *)(arg1)->GetNbrAtom(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetEquibLength(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetEquibLength",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetEquibLength();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetLength(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetLength",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetLength();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetNbrAtomIdx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_GetNbrAtomIdx",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (int)(arg1)->GetNbrAtomIdx(arg2);
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsAromatic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsAromatic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((OpenBabel::OBBond const *)arg1)->IsAromatic();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsInRing(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsInRing",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((OpenBabel::OBBond const *)arg1)->IsInRing();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsRotor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsRotor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsRotor();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsAmide(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsAmide",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsAmide();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsPrimaryAmide(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsPrimaryAmide",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsPrimaryAmide();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsSecondaryAmide(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsSecondaryAmide",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsSecondaryAmide();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsEster(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsEster",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsEster();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsCarbonyl(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsCarbonyl",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsCarbonyl();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsSingle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsSingle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsSingle();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsDouble(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsDouble",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsDouble();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsTriple(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsTriple",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsTriple();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsKSingle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsKSingle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsKSingle();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsKDouble(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsKDouble",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsKDouble();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsKTriple(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsKTriple",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsKTriple();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsClosure(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsClosure",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsClosure();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsUp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsUp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsUp();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsDown(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsDown",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsDown();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsWedge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsWedge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsWedge();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsHash(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsHash",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsHash();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_IsDoubleBondGeometry(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_IsDoubleBondGeometry",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsDoubleBondGeometry();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_HasData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasData(*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_HasData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->HasData((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_HasData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasData(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_HasData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBBond_HasData__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBBond_HasData__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBBond_HasData__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBBond_HasData'");
    return NULL;
}


static PyObject *_wrap_OBBond_DeleteData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->DeleteData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_DeleteData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBGenericData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->DeleteData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_DeleteData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->DeleteData(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_DeleteData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBGenericData, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBBond_DeleteData__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBBond_DeleteData__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBBond_DeleteData__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBBond_DeleteData'");
    return NULL;
}


static PyObject *_wrap_OBBond_SetData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_SetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBGenericData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_DataSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_DataSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->DataSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    unsigned int arg2 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    std::string *arg2 = 0 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    char *arg2 = (char *) 0 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBBond_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData((char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetData__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_GetData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > &_result_ref = (arg1)->GetData();
        result = (std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_GetData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBBond_GetData__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBBond_GetData__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBBond_GetData__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBBond_GetData__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBBond_GetData'");
    return NULL;
}


static PyObject *_wrap_OBBond_BeginData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_BeginData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->BeginData();
    
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator(static_cast<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBBond_EndData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBBond_EndData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->EndData();
    
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator(static_cast<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBBond_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBBond, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_OBMol__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBMol")) goto fail;
    result = (OpenBabel::OBMol *)new OpenBabel::OBMol();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBMol, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBMol__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = 0 ;
    OpenBabel::OBMol *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OBMol",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("OpenBabel::OBMol");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (OpenBabel::OBMol *)new OpenBabel::OBMol((OpenBabel::OBMol const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBMol, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBMol(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_OBMol__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_OBMol__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_OBMol'");
    return NULL;
}


static PyObject *_wrap_delete_OBMol(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBMol",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBMol *arg2 = 0 ;
    OpenBabel::OBMol *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::OBMol");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        OpenBabel::OBMol &_result_ref = (arg1)->operator +=((OpenBabel::OBMol const &)*arg2);
        result = (OpenBabel::OBMol *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBMol, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_ReserveAtoms(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_ReserveAtoms",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->ReserveAtoms(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_CreateAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_CreateAtom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBAtom *)(arg1)->CreateAtom();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_CreateBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBBond *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_CreateBond",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBBond *)(arg1)->CreateBond();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DestroyAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DestroyAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBNodeBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->DestroyAtom(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DestroyBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DestroyBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBEdgeBase, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->DestroyBond(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_AddAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::OBAtom");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->AddAtom(*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddBond__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:OBMol_AddBond",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<int >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = static_cast<int >(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5,arg6);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddBond__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:OBMol_AddBond",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<int >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddBond__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:OBMol_AddBond",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)(arg1)->AddBond(arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddBond__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBBond *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_AddBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::OBBond");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->AddBond(*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddBond(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBBond, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBMol_AddBond__SWIG_3(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_OBMol_AddBond__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_OBMol_AddBond__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            _v = SWIG_Check_int(argv[5]);
                            if (_v) {
                                return _wrap_OBMol_AddBond__SWIG_0(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_AddBond'");
    return NULL;
}


static PyObject *_wrap_OBMol_AddResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBResidue *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_AddResidue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::OBResidue");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->AddResidue(*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_InsertAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_InsertAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::OBAtom");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->InsertAtom(*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DeleteAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->DeleteAtom(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DeleteBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBond, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->DeleteBond(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DeleteResidue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBResidue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->DeleteResidue(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NewAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_NewAtom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBAtom *)(arg1)->NewAtom();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NewResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBResidue *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_NewResidue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBResidue *)(arg1)->NewResidue();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBResidue, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_BeginModify(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_BeginModify",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->BeginModify();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_EndModify__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_EndModify",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->EndModify(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_EndModify__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_EndModify",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->EndModify();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_EndModify(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBMol_EndModify__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_OBMol_EndModify__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_EndModify'");
    return NULL;
}


static PyObject *_wrap_OBMol_GetMod(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetMod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->GetMod();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_IncrementMod(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_IncrementMod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->IncrementMod();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DecrementMod(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_DecrementMod",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->DecrementMod();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasData(*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)(arg1)->HasData((char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_HasData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->HasData(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBMol_HasData__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBMol_HasData__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBMol_HasData__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_HasData'");
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->DeleteData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBGenericData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->DeleteData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DeleteData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->DeleteData(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBGenericData, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBMol_DeleteData__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBMol_DeleteData__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBMol_DeleteData__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_DeleteData'");
    return NULL;
}


static PyObject *_wrap_OBMol_SetData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBGenericData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->SetData(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DataSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_DataSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->DataSize();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetData__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int arg2 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetData__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::string *arg2 = 0 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetData__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    char *arg2 = (char *) 0 ;
    OpenBabel::OBGenericData *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetData",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (OpenBabel::OBGenericData *)(arg1)->GetData((char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBGenericData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetData__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > &_result_ref = (arg1)->GetData();
        result = (std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetData(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBMol_GetData__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBMol_GetData__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_OBMol_GetData__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBMol_GetData__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_GetData'");
    return NULL;
}


static PyObject *_wrap_OBMol_BeginData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_BeginData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->BeginData();
    
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator(static_cast<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_EndData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_EndData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->EndData();
    
    {
        std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator * resultptr;
        resultptr = new std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator(static_cast<std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetFlags(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetFlags",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->GetFlags();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetTitle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetTitle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((OpenBabel::OBMol const *)arg1)->GetTitle();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NumAtoms(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_NumAtoms",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumAtoms();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NumBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_NumBonds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumBonds();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NumHvyAtoms(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_NumHvyAtoms",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->NumHvyAtoms();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NumResidues(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_NumResidues",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumResidues();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NumRotors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_NumRotors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->NumRotors();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBAtom *)(arg1)->GetAtom(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetFirstAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetFirstAtom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBAtom *)(arg1)->GetFirstAtom();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetBond__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    OpenBabel::OBBond *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetBond__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    int arg3 ;
    OpenBabel::OBBond *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBMol_GetBond",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetBond__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBBond *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBMol_GetBond",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetBond(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_OBMol_GetBond__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_OBMol_GetBond__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_OBMol_GetBond__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_GetBond'");
    return NULL;
}


static PyObject *_wrap_OBMol_GetResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    OpenBabel::OBResidue *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetResidue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBResidue *)(arg1)->GetResidue(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBResidue, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetInternalCoord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetInternalCoord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->GetInternalCoord();
    
    {
        std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > > * resultptr;
        resultptr = new std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > >(static_cast<std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetTorsion__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:OBMol_GetTorsion",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<int >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetTorsion__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:OBMol_GetTorsion",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetTorsion(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_OBMol_GetTorsion__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_OBMol_GetTorsion__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_GetTorsion'");
    return NULL;
}


static PyObject *_wrap_OBMol_GetFormula(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetFormula",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->GetFormula();
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetEnergy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((OpenBabel::OBMol const *)arg1)->GetEnergy();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetMolWt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetMolWt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetMolWt();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetExactMass(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetExactMass",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)(arg1)->GetExactMass();
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetTotalCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetTotalCharge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->GetTotalCharge();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetTotalSpinMultiplicity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetTotalSpinMultiplicity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)(arg1)->GetTotalSpinMultiplicity();
    
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetDimension(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetDimension",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned short)((OpenBabel::OBMol const *)arg1)->GetDimension();
    
    {
        resultobj = SWIG_From_unsigned_SS_short(static_cast<unsigned short >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetCoordinates(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetCoordinates",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double *)(arg1)->GetCoordinates();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetSSSR(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBRing *,std::allocator<OpenBabel::OBRing * > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetSSSR",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<OpenBabel::OBRing *,std::allocator<OpenBabel::OBRing * > > &_result_ref = (arg1)->GetSSSR();
        result = (std::vector<OpenBabel::OBRing *,std::allocator<OpenBabel::OBRing * > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTOpenBabel__OBRing_p_std__allocatorTOpenBabel__OBRing_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AutomaticFormalCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_AutomaticFormalCharge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->AutomaticFormalCharge();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AutomaticPartialCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_AutomaticPartialCharge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->AutomaticPartialCharge();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetTitle__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetTitle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    (arg1)->SetTitle((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetTitle__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::string *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetTitle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetTitle(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetTitle(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBMol_SetTitle__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_OBMol_SetTitle__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_SetTitle'");
    return NULL;
}


static PyObject *_wrap_OBMol_SetFormula(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetFormula",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    (arg1)->SetFormula(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetEnergy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetEnergy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<double >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetEnergy(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetDimension(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetDimension",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned short >(SWIG_As_unsigned_SS_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetDimension(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetTotalCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetTotalCharge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetTotalCharge(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetTotalSpinMultiplicity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetTotalSpinMultiplicity",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetTotalSpinMultiplicity(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetInternalCoord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    SwigValueWrapper<std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > > > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetInternalCoord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    (arg1)->SetInternalCoord(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetAutomaticFormalCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetAutomaticFormalCharge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetAutomaticFormalCharge(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetAutomaticPartialCharge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetAutomaticPartialCharge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetAutomaticPartialCharge(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetAromaticPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetAromaticPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetAromaticPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetSSSRPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetSSSRPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetSSSRPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetRingAtomsAndBondsPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetRingAtomsAndBondsPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetRingAtomsAndBondsPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetAtomTypesPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetAtomTypesPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetAtomTypesPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetChainsPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetChainsPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetChainsPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetChiralityPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetChiralityPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetChiralityPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetPartialChargesPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetPartialChargesPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetPartialChargesPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetHybridizationPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetHybridizationPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetHybridizationPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetImplicitValencePerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetImplicitValencePerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetImplicitValencePerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetKekulePerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetKekulePerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetKekulePerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetClosureBondsPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetClosureBondsPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetClosureBondsPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetHydrogensAdded(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetHydrogensAdded",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetHydrogensAdded();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetCorrectedForPH(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetCorrectedForPH",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetCorrectedForPH();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetAromaticCorrected(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetAromaticCorrected",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetAromaticCorrected();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetSpinMultiplicityAssigned(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_SetSpinMultiplicityAssigned",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->SetSpinMultiplicityAssigned();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetFlags(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetFlags",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetFlags(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_UnsetAromaticPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_UnsetAromaticPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->UnsetAromaticPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_UnsetPartialChargesPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_UnsetPartialChargesPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->UnsetPartialChargesPerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_UnsetImplicitValencePerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_UnsetImplicitValencePerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->UnsetImplicitValencePerceived();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_UnsetFlag(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_UnsetFlag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->UnsetFlag(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DoTransformations(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::map<std::string,std::string,std::less<std::string >,std::allocator<std::pair<std::string const,std::string > > > *arg2 = (std::map<std::string,std::string,std::less<std::string >,std::allocator<std::pair<std::string const,std::string > > > *) 0 ;
    OpenBabel::OBBase *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DoTransformations",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTstd__string_std__string_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_std__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (OpenBabel::OBBase *)(arg1)->DoTransformations((std::map<std::string,std::string,std::less<std::string >,std::allocator<std::pair<std::string const,std::string > > > const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBase, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_ClassDescription(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *result;
    
    if(!PyArg_ParseTuple(args,(char *)":OBMol_ClassDescription")) goto fail;
    result = (char *)OpenBabel::OBMol::ClassDescription();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_Clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->Clear();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_RenumberAtoms(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBNodeBase *,std::allocator<OpenBabel::OBNodeBase * > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_RenumberAtoms",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBNodeBase *,std::allocator<OpenBabel::OBNodeBase * > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->RenumberAtoms(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_ToInertialFrame__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBMol_ToInertialFrame",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->ToInertialFrame(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_ToInertialFrame__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_ToInertialFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->ToInertialFrame();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_ToInertialFrame(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBMol_ToInertialFrame__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_double, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_OBMol_ToInertialFrame__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_ToInertialFrame'");
    return NULL;
}


static PyObject *_wrap_OBMol_Translate__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::vector3 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_Translate",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__vector3, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::vector3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->Translate((OpenBabel::vector3 const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Translate__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::vector3 *arg2 = 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBMol_Translate",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__vector3, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::vector3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->Translate((OpenBabel::vector3 const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Translate(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__vector3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_OBMol_Translate__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__vector3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_OBMol_Translate__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_Translate'");
    return NULL;
}


static PyObject *_wrap_OBMol_Rotate__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double (*arg2)[3] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_Rotate",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_a_3__double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->Rotate((double const (*)[3])arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Rotate__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_Rotate",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->Rotate((double const (*))arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Rotate__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double *arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBMol_Rotate",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->Rotate((double const (*))arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Rotate(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_a_3__double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBMol_Rotate__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBMol_Rotate__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_OBMol_Rotate__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_Rotate'");
    return NULL;
}


static PyObject *_wrap_OBMol_Center__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_Center",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->Center();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Kekulize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_Kekulize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->Kekulize();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_PerceiveKekuleBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_PerceiveKekuleBonds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->PerceiveKekuleBonds();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NewPerceiveKekuleBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_NewPerceiveKekuleBonds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->NewPerceiveKekuleBonds();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteHydrogen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DeleteHydrogen",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->DeleteHydrogen(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteHydrogens__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_DeleteHydrogens",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->DeleteHydrogens();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteHydrogens__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DeleteHydrogens",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->DeleteHydrogens(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteHydrogens(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBMol_DeleteHydrogens__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBMol_DeleteHydrogens__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_DeleteHydrogens'");
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteNonPolarHydrogens(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_DeleteNonPolarHydrogens",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->DeleteNonPolarHydrogens();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddHydrogens__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool arg2 ;
    bool arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBMol_AddHydrogens",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->AddHydrogens(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddHydrogens__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_AddHydrogens",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->AddHydrogens(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddHydrogens__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_AddHydrogens",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->AddHydrogens();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddHydrogens__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_AddHydrogens",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (bool)(arg1)->AddHydrogens(arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddHydrogens(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBMol_AddHydrogens__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_OBMol_AddHydrogens__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_OBMol_AddHydrogens__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_OBMol_AddHydrogens__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_AddHydrogens'");
    return NULL;
}


static PyObject *_wrap_OBMol_AddPolarHydrogens(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_AddPolarHydrogens",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->AddPolarHydrogens();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_StripSalts(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_StripSalts",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->StripSalts();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_ConvertDativeBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_ConvertDativeBonds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->ConvertDativeBonds();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_CorrectForPH(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_CorrectForPH",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->CorrectForPH();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AssignSpinMultiplicity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_AssignSpinMultiplicity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->AssignSpinMultiplicity();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Center__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    OpenBabel::vector3 result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_Center",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (arg1)->Center(arg2);
    
    {
        OpenBabel::vector3 * resultptr;
        resultptr = new OpenBabel::vector3(static_cast<OpenBabel::vector3 & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_OpenBabel__vector3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Center(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_OBMol_Center__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_OBMol_Center__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_Center'");
    return NULL;
}


static PyObject *_wrap_OBMol_SetTorsion(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ;
    double arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:OBMol_SetTorsion",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        arg6 = static_cast<double >(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    (arg1)->SetTorsion(arg2,arg3,arg4,arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_FindSSSR(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_FindSSSR",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->FindSSSR();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_FindRingAtomsAndBonds(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_FindRingAtomsAndBonds",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->FindRingAtomsAndBonds();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_FindChiralCenters(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_FindChiralCenters",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->FindChiralCenters();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_FindChildren__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<int,std::allocator<int > > *arg2 = 0 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:OBMol_FindChildren",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<int,std::allocator<int > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->FindChildren(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_FindChildren__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > > *arg2 = 0 ;
    OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:OBMol_FindChildren",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    (arg1)->FindChildren(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_FindChildren(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_OBMol_FindChildren__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBMol, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_OBMol_FindChildren__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'OBMol_FindChildren'");
    return NULL;
}


static PyObject *_wrap_OBMol_FindLargestFragment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBBitVec *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_FindLargestFragment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBBitVec, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::OBBitVec");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->FindLargestFragment(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_ContigFragList(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<std::vector<int,std::allocator<int > >,std::allocator<std::vector<int,std::allocator<int > > > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_ContigFragList",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTstd__vectorTint_std__allocatorTint_t_t_std__allocatorTstd__vectorTint_std__allocatorTint_t_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<std::vector<int,std::allocator<int > >,std::allocator<std::vector<int,std::allocator<int > > > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->ContigFragList(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Align(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::vector3 *arg4 = 0 ;
    OpenBabel::vector3 *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:OBMol_Align",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_OpenBabel__vector3, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("OpenBabel::vector3");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_OpenBabel__vector3, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("OpenBabel::vector3");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    (arg1)->Align(arg2,arg3,*arg4,*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_ConnectTheDots(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_ConnectTheDots",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->ConnectTheDots();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_PerceiveBondOrders(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_PerceiveBondOrders",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->PerceiveBondOrders();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_FindTorsions(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_FindTorsions",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->FindTorsions();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetGTDVector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<int,std::allocator<int > > *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetGTDVector",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<int,std::allocator<int > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->GetGTDVector(*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetGIVector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<unsigned int,std::allocator<unsigned int > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetGIVector",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<unsigned int,std::allocator<unsigned int > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->GetGIVector(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetGIDVector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<unsigned int,std::allocator<unsigned int > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetGIDVector",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<unsigned int,std::allocator<unsigned int > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->GetGIDVector(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Has2D(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_Has2D",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->Has2D();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Has3D(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_Has3D",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->Has3D();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasNonZeroCoords(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasNonZeroCoords",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasNonZeroCoords();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasAromaticPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasAromaticPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasAromaticPerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasSSSRPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasSSSRPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasSSSRPerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasRingAtomsAndBondsPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasRingAtomsAndBondsPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasRingAtomsAndBondsPerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasAtomTypesPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasAtomTypesPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasAtomTypesPerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasChiralityPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasChiralityPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasChiralityPerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasPartialChargesPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasPartialChargesPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasPartialChargesPerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasHybridizationPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasHybridizationPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasHybridizationPerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasImplicitValencePerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasImplicitValencePerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasImplicitValencePerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasKekulePerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasKekulePerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasKekulePerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasClosureBondsPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasClosureBondsPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasClosureBondsPerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasChainsPerceived(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasChainsPerceived",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasChainsPerceived();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasHydrogensAdded(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasHydrogensAdded",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasHydrogensAdded();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasAromaticCorrected(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasAromaticCorrected",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasAromaticCorrected();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_IsCorrectedForPH(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_IsCorrectedForPH",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsCorrectedForPH();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_HasSpinMultiplicityAssigned(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_HasSpinMultiplicityAssigned",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->HasSpinMultiplicityAssigned();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_IsChiral(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_IsChiral",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->IsChiral();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_Empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_Empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->Empty();
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NumConformers(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_NumConformers",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->NumConformers();
    
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetConformers(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<double *,std::allocator<double * > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetConformers",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<double *,std::allocator<double * > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetConformers(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_AddConformer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double *arg2 = (double *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_AddConformer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->AddConformer(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_SetConformer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_SetConformer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->SetConformer(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_CopyConformer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    double *arg2 = (double *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:OBMol_CopyConformer",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->CopyConformer(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_DeleteConformer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_DeleteConformer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->DeleteConformer(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetConformer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    int arg2 ;
    double *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_GetConformer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double *)(arg1)->GetConformer(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_BeginConformer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<double *,std::allocator<double * > >::iterator *arg2 = 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_BeginConformer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<double *,std::allocator<double * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double *)(arg1)->BeginConformer(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NextConformer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<double *,std::allocator<double * > >::iterator *arg2 = 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_NextConformer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<double *,std::allocator<double * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (double *)(arg1)->NextConformer(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_GetConformers(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<double *,std::allocator<double * > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBMol_GetConformers",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<double *,std::allocator<double * > > &_result_ref = (arg1)->GetConformers();
        result = (std::vector<double *,std::allocator<double * > > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_BeginAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBNodeBase *,std::allocator<OpenBabel::OBNodeBase * > >::iterator *arg2 = 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_BeginAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBNodeBase *,std::allocator<OpenBabel::OBNodeBase * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBAtom *)(arg1)->BeginAtom(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NextAtom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBNodeBase *,std::allocator<OpenBabel::OBNodeBase * > >::iterator *arg2 = 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_NextAtom",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBNodeBase *,std::allocator<OpenBabel::OBNodeBase * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBAtom *)(arg1)->NextAtom(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_BeginBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator *arg2 = 0 ;
    OpenBabel::OBBond *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_BeginBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBBond *)(arg1)->BeginBond(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NextBond(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator *arg2 = 0 ;
    OpenBabel::OBBond *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_NextBond",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBBond *)(arg1)->NextBond(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBBond, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_BeginResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBResidue *,std::allocator<OpenBabel::OBResidue * > >::iterator *arg2 = 0 ;
    OpenBabel::OBResidue *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_BeginResidue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBResidue_p_std__allocatorTOpenBabel__OBResidue_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBResidue *,std::allocator<OpenBabel::OBResidue * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBResidue *)(arg1)->BeginResidue(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBResidue, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NextResidue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBResidue *,std::allocator<OpenBabel::OBResidue * > >::iterator *arg2 = 0 ;
    OpenBabel::OBResidue *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_NextResidue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBResidue_p_std__allocatorTOpenBabel__OBResidue_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBResidue *,std::allocator<OpenBabel::OBResidue * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBResidue *)(arg1)->NextResidue(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBResidue, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_BeginInternalCoord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > >::iterator *arg2 = 0 ;
    OpenBabel::OBInternalCoord *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_BeginInternalCoord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBInternalCoord *)(arg1)->BeginInternalCoord(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBInternalCoord, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBMol_NextInternalCoord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
    std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > >::iterator *arg2 = 0 ;
    OpenBabel::OBInternalCoord *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBMol_NextInternalCoord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t__iterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > >::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (OpenBabel::OBInternalCoord *)(arg1)->NextInternalCoord(*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBInternalCoord, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBMol_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBMol, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_OBInternalCoord__a_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBInternalCoord__a_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->_a = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__a_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBInternalCoord__a_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBAtom *) ((arg1)->_a);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__b_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBInternalCoord__b_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->_b = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__b_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBInternalCoord__b_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBAtom *) ((arg1)->_b);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__c_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBInternalCoord__c_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->_c = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__c_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    OpenBabel::OBAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBInternalCoord__c_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBAtom *) ((arg1)->_c);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBAtom, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__dst_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBInternalCoord__dst_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<double >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->_dst = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__dst_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBInternalCoord__dst_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->_dst);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__ang_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBInternalCoord__ang_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<double >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->_ang = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__ang_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBInternalCoord__ang_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->_ang);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__tor_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:OBInternalCoord__tor_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<double >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->_tor = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_OBInternalCoord__tor_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:OBInternalCoord__tor_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->_tor);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBInternalCoord__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBInternalCoord *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_OBInternalCoord",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBInternalCoord, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBInternalCoord__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBInternalCoord *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_OBInternalCoord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBInternalCoord, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBInternalCoord__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
    OpenBabel::OBInternalCoord *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_OBInternalCoord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBInternalCoord, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBInternalCoord__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_OBInternalCoord")) goto fail;
    result = (OpenBabel::OBInternalCoord *)new OpenBabel::OBInternalCoord();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_OpenBabel__OBInternalCoord, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_OBInternalCoord(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_OBInternalCoord__SWIG_3(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_OBInternalCoord__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_OBInternalCoord__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_OpenBabel__OBAtom, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_new_OBInternalCoord__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_OBInternalCoord'");
    return NULL;
}


static PyObject *_wrap_delete_OBInternalCoord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    OpenBabel::OBInternalCoord *arg1 = (OpenBabel::OBInternalCoord *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_OBInternalCoord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_OpenBabel__OBInternalCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * OBInternalCoord_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_OpenBabel__OBInternalCoord, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_tokenize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string,std::allocator<std::string > > *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:tokenize",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    result = (bool)OpenBabel::tokenize(*arg1,(char const *)arg2,(char const *)arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tokenize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string,std::allocator<std::string > > *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tokenize",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = (bool)OpenBabel::tokenize(*arg1,(char const *)arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tokenize__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string,std::allocator<std::string > > *arg1 = 0 ;
    std::string *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    int arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:tokenize",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)OpenBabel::tokenize(*arg1,*arg2,(char const *)arg3,arg4);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tokenize__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string,std::allocator<std::string > > *arg1 = 0 ;
    std::string *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:tokenize",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    result = (bool)OpenBabel::tokenize(*arg1,*arg2,(char const *)arg3);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tokenize__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<std::string,std::allocator<std::string > > *arg1 = 0 ;
    std::string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tokenize",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::vector<std::string,std::allocator<std::string > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)OpenBabel::tokenize(*arg1,*arg2);
    
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tokenize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_tokenize__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_tokenize__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_AsCharPtr(argv[2], (char **)(0));
                if (_v) {
                    return _wrap_tokenize__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_AsCharPtr(argv[2], (char **)(0));
                if (_v) {
                    return _wrap_tokenize__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_AsCharPtr(argv[2], (char **)(0));
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_tokenize__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'tokenize'");
    return NULL;
}


static PyObject *_wrap_ThrowError__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ThrowError",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    OpenBabel::ThrowError(*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ThrowError(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_ThrowError__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ThrowError'");
    return NULL;
}


static PyObject *_wrap_CartesianToInternal(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > > *arg1 = 0 ;
    OpenBabel::OBMol *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CartesianToInternal",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::OBMol");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    OpenBabel::CartesianToInternal(*arg1,*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InternalToCartesian(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > > *arg1 = 0 ;
    OpenBabel::OBMol *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InternalToCartesian",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_OpenBabel__OBMol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("OpenBabel::OBMol");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    OpenBabel::InternalToCartesian(*arg1,*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NewExtension(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NewExtension",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    result = OpenBabel::NewExtension(*arg1,arg2);
    
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_etab_set(PyObject *_val) {
    {
        OpenBabel::OBElementTable * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_OpenBabel__OBElementTable, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'OpenBabel::etab'");
            return 1;
        }
        OpenBabel::etab = *((OpenBabel::OBElementTable *) temp);
    }
    return 0;
}


static PyObject *_wrap_etab_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&OpenBabel::etab), SWIGTYPE_p_OpenBabel__OBElementTable, 0);
    return pyobj;
}


static int _wrap_ttab_set(PyObject *_val) {
    {
        OpenBabel::OBTypeTable * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_OpenBabel__OBTypeTable, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'OpenBabel::ttab'");
            return 1;
        }
        OpenBabel::ttab = *((OpenBabel::OBTypeTable *) temp);
    }
    return 0;
}


static PyObject *_wrap_ttab_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&OpenBabel::ttab), SWIGTYPE_p_OpenBabel__OBTypeTable, 0);
    return pyobj;
}


static int _wrap_isotab_set(PyObject *_val) {
    {
        OpenBabel::OBIsotopeTable * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_OpenBabel__OBIsotopeTable, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'OpenBabel::isotab'");
            return 1;
        }
        OpenBabel::isotab = *((OpenBabel::OBIsotopeTable *) temp);
    }
    return 0;
}


static PyObject *_wrap_isotab_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&OpenBabel::isotab), SWIGTYPE_p_OpenBabel__OBIsotopeTable, 0);
    return pyobj;
}


static int _wrap_aromtyper_set(PyObject *_val) {
    {
        OpenBabel::OBAromaticTyper * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_OpenBabel__OBAromaticTyper, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'OpenBabel::aromtyper'");
            return 1;
        }
        OpenBabel::aromtyper = *((OpenBabel::OBAromaticTyper *) temp);
    }
    return 0;
}


static PyObject *_wrap_aromtyper_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&OpenBabel::aromtyper), SWIGTYPE_p_OpenBabel__OBAromaticTyper, 0);
    return pyobj;
}


static int _wrap_atomtyper_set(PyObject *_val) {
    {
        OpenBabel::OBAtomTyper * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_OpenBabel__OBAtomTyper, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'OpenBabel::atomtyper'");
            return 1;
        }
        OpenBabel::atomtyper = *((OpenBabel::OBAtomTyper *) temp);
    }
    return 0;
}


static PyObject *_wrap_atomtyper_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&OpenBabel::atomtyper), SWIGTYPE_p_OpenBabel__OBAtomTyper, 0);
    return pyobj;
}


static int _wrap_chainsparser_set(PyObject *_val) {
    {
        OpenBabel::OBChainsParser * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_OpenBabel__OBChainsParser, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'OpenBabel::chainsparser'");
            return 1;
        }
        OpenBabel::chainsparser = *((OpenBabel::OBChainsParser *) temp);
    }
    return 0;
}


static PyObject *_wrap_chainsparser_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&OpenBabel::chainsparser), SWIGTYPE_p_OpenBabel__OBChainsParser, 0);
    return pyobj;
}


static int _wrap_resdat_set(PyObject *_val) {
    {
        OpenBabel::OBResidueData * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_OpenBabel__OBResidueData, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'OpenBabel::resdat'");
            return 1;
        }
        OpenBabel::resdat = *((OpenBabel::OBResidueData *) temp);
    }
    return 0;
}


static PyObject *_wrap_resdat_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&OpenBabel::resdat), SWIGTYPE_p_OpenBabel__OBResidueData, 0);
    return pyobj;
}


static PyObject *_wrap_get_rmat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = (double *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:get_rmat",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    OpenBabel::get_rmat(arg1,arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ob_make_rmat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double (*arg1)[3] ;
    double *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ob_make_rmat",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_a_3__double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    OpenBabel::ob_make_rmat((double (*)[3])arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_qtrfit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = (double *) 0 ;
    double *arg2 = (double *) 0 ;
    int arg3 ;
    double (*arg4)[3] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:qtrfit",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_a_3__double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    OpenBabel::qtrfit(arg1,arg2,arg3,(double (*)[3])arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_superimpose(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = (double *) 0 ;
    double *arg2 = (double *) 0 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:superimpose",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (double)OpenBabel::superimpose(arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"new_OBGlobalDataBase", _wrap_new_OBGlobalDataBase, METH_VARARGS, NULL},
	 { (char *)"delete_OBGlobalDataBase", _wrap_delete_OBGlobalDataBase, METH_VARARGS, NULL},
	 { (char *)"OBGlobalDataBase_Init", _wrap_OBGlobalDataBase_Init, METH_VARARGS, NULL},
	 { (char *)"OBGlobalDataBase_GetSize", _wrap_OBGlobalDataBase_GetSize, METH_VARARGS, NULL},
	 { (char *)"OBGlobalDataBase_SetReadDirectory", _wrap_OBGlobalDataBase_SetReadDirectory, METH_VARARGS, NULL},
	 { (char *)"OBGlobalDataBase_SetEnvironmentVariable", _wrap_OBGlobalDataBase_SetEnvironmentVariable, METH_VARARGS, NULL},
	 { (char *)"OBGlobalDataBase_ParseLine", _wrap_OBGlobalDataBase_ParseLine, METH_VARARGS, NULL},
	 { (char *)"OBGlobalDataBase_swigregister", OBGlobalDataBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBElement", _wrap_new_OBElement, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetAtomicNum", _wrap_OBElement_GetAtomicNum, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetSymbol", _wrap_OBElement_GetSymbol, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetCovalentRad", _wrap_OBElement_GetCovalentRad, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetVdwRad", _wrap_OBElement_GetVdwRad, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetMass", _wrap_OBElement_GetMass, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetMaxBonds", _wrap_OBElement_GetMaxBonds, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetElectroNeg", _wrap_OBElement_GetElectroNeg, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetIonization", _wrap_OBElement_GetIonization, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetElectronAffinity", _wrap_OBElement_GetElectronAffinity, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetName", _wrap_OBElement_GetName, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetRed", _wrap_OBElement_GetRed, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetGreen", _wrap_OBElement_GetGreen, METH_VARARGS, NULL},
	 { (char *)"OBElement_GetBlue", _wrap_OBElement_GetBlue, METH_VARARGS, NULL},
	 { (char *)"delete_OBElement", _wrap_delete_OBElement, METH_VARARGS, NULL},
	 { (char *)"OBElement_swigregister", OBElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBElementTable", _wrap_new_OBElementTable, METH_VARARGS, NULL},
	 { (char *)"delete_OBElementTable", _wrap_delete_OBElementTable, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_ParseLine", _wrap_OBElementTable_ParseLine, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetNumberOfElements", _wrap_OBElementTable_GetNumberOfElements, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetSize", _wrap_OBElementTable_GetSize, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetAtomicNum", _wrap_OBElementTable_GetAtomicNum, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetSymbol", _wrap_OBElementTable_GetSymbol, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetVdwRad", _wrap_OBElementTable_GetVdwRad, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetCovalentRad", _wrap_OBElementTable_GetCovalentRad, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetMass", _wrap_OBElementTable_GetMass, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_CorrectedBondRad", _wrap_OBElementTable_CorrectedBondRad, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_CorrectedVdwRad", _wrap_OBElementTable_CorrectedVdwRad, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetMaxBonds", _wrap_OBElementTable_GetMaxBonds, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetElectroNeg", _wrap_OBElementTable_GetElectroNeg, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetIonization", _wrap_OBElementTable_GetIonization, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetElectronAffinity", _wrap_OBElementTable_GetElectronAffinity, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetRGB", _wrap_OBElementTable_GetRGB, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_GetName", _wrap_OBElementTable_GetName, METH_VARARGS, NULL},
	 { (char *)"OBElementTable_swigregister", OBElementTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBIsotopeTable", _wrap_new_OBIsotopeTable, METH_VARARGS, NULL},
	 { (char *)"delete_OBIsotopeTable", _wrap_delete_OBIsotopeTable, METH_VARARGS, NULL},
	 { (char *)"OBIsotopeTable_GetSize", _wrap_OBIsotopeTable_GetSize, METH_VARARGS, NULL},
	 { (char *)"OBIsotopeTable_ParseLine", _wrap_OBIsotopeTable_ParseLine, METH_VARARGS, NULL},
	 { (char *)"OBIsotopeTable_GetExactMass", _wrap_OBIsotopeTable_GetExactMass, METH_VARARGS, NULL},
	 { (char *)"OBIsotopeTable_swigregister", OBIsotopeTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBTypeTable", _wrap_new_OBTypeTable, METH_VARARGS, NULL},
	 { (char *)"delete_OBTypeTable", _wrap_delete_OBTypeTable, METH_VARARGS, NULL},
	 { (char *)"OBTypeTable_ParseLine", _wrap_OBTypeTable_ParseLine, METH_VARARGS, NULL},
	 { (char *)"OBTypeTable_GetSize", _wrap_OBTypeTable_GetSize, METH_VARARGS, NULL},
	 { (char *)"OBTypeTable_SetFromType", _wrap_OBTypeTable_SetFromType, METH_VARARGS, NULL},
	 { (char *)"OBTypeTable_SetToType", _wrap_OBTypeTable_SetToType, METH_VARARGS, NULL},
	 { (char *)"OBTypeTable_Translate", _wrap_OBTypeTable_Translate, METH_VARARGS, NULL},
	 { (char *)"OBTypeTable_GetFromType", _wrap_OBTypeTable_GetFromType, METH_VARARGS, NULL},
	 { (char *)"OBTypeTable_GetToType", _wrap_OBTypeTable_GetToType, METH_VARARGS, NULL},
	 { (char *)"OBTypeTable_swigregister", OBTypeTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBResidueData", _wrap_new_OBResidueData, METH_VARARGS, NULL},
	 { (char *)"OBResidueData_ParseLine", _wrap_OBResidueData_ParseLine, METH_VARARGS, NULL},
	 { (char *)"OBResidueData_GetSize", _wrap_OBResidueData_GetSize, METH_VARARGS, NULL},
	 { (char *)"OBResidueData_SetResName", _wrap_OBResidueData_SetResName, METH_VARARGS, NULL},
	 { (char *)"OBResidueData_LookupBO", _wrap_OBResidueData_LookupBO, METH_VARARGS, NULL},
	 { (char *)"OBResidueData_LookupType", _wrap_OBResidueData_LookupType, METH_VARARGS, NULL},
	 { (char *)"OBResidueData_AssignBonds", _wrap_OBResidueData_AssignBonds, METH_VARARGS, NULL},
	 { (char *)"delete_OBResidueData", _wrap_delete_OBResidueData, METH_VARARGS, NULL},
	 { (char *)"OBResidueData_swigregister", OBResidueData_swigregister, METH_VARARGS, NULL},
	 { (char *)"OBFormat_ReadMolecule", _wrap_OBFormat_ReadMolecule, METH_VARARGS, NULL},
	 { (char *)"OBFormat_ReadChemObject", _wrap_OBFormat_ReadChemObject, METH_VARARGS, NULL},
	 { (char *)"OBFormat_WriteMolecule", _wrap_OBFormat_WriteMolecule, METH_VARARGS, NULL},
	 { (char *)"OBFormat_WriteChemObject", _wrap_OBFormat_WriteChemObject, METH_VARARGS, NULL},
	 { (char *)"OBFormat_Description", _wrap_OBFormat_Description, METH_VARARGS, NULL},
	 { (char *)"OBFormat_TargetClassDescription", _wrap_OBFormat_TargetClassDescription, METH_VARARGS, NULL},
	 { (char *)"OBFormat_GetType", _wrap_OBFormat_GetType, METH_VARARGS, NULL},
	 { (char *)"OBFormat_SpecificationURL", _wrap_OBFormat_SpecificationURL, METH_VARARGS, NULL},
	 { (char *)"OBFormat_GetMIMEType", _wrap_OBFormat_GetMIMEType, METH_VARARGS, NULL},
	 { (char *)"OBFormat_Flags", _wrap_OBFormat_Flags, METH_VARARGS, NULL},
	 { (char *)"OBFormat_SkipObjects", _wrap_OBFormat_SkipObjects, METH_VARARGS, NULL},
	 { (char *)"OBFormat_MakeNewInstance", _wrap_OBFormat_MakeNewInstance, METH_VARARGS, NULL},
	 { (char *)"delete_OBFormat", _wrap_delete_OBFormat, METH_VARARGS, NULL},
	 { (char *)"OBFormat_swigregister", OBFormat_swigregister, METH_VARARGS, NULL},
	 { (char *)"CharPtrLess___call__", _wrap_CharPtrLess___call__, METH_VARARGS, NULL},
	 { (char *)"new_CharPtrLess", _wrap_new_CharPtrLess, METH_VARARGS, NULL},
	 { (char *)"delete_CharPtrLess", _wrap_delete_CharPtrLess, METH_VARARGS, NULL},
	 { (char *)"CharPtrLess_swigregister", CharPtrLess_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBConversion", _wrap_new_OBConversion, METH_VARARGS, NULL},
	 { (char *)"delete_OBConversion", _wrap_delete_OBConversion, METH_VARARGS, NULL},
	 { (char *)"OBConversion_RegisterFormat", _wrap_OBConversion_RegisterFormat, METH_VARARGS, NULL},
	 { (char *)"OBConversion_FindFormat", _wrap_OBConversion_FindFormat, METH_VARARGS, NULL},
	 { (char *)"OBConversion_FormatFromExt", _wrap_OBConversion_FormatFromExt, METH_VARARGS, NULL},
	 { (char *)"OBConversion_FormatFromMIME", _wrap_OBConversion_FormatFromMIME, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetNextFormat", _wrap_OBConversion_GetNextFormat, METH_VARARGS, NULL},
	 { (char *)"OBConversion_Description", _wrap_OBConversion_Description, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetInStream", _wrap_OBConversion_GetInStream, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetOutStream", _wrap_OBConversion_GetOutStream, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetInStream", _wrap_OBConversion_SetInStream, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetOutStream", _wrap_OBConversion_SetOutStream, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetInAndOutFormats", _wrap_OBConversion_SetInAndOutFormats, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetInFormat", _wrap_OBConversion_SetInFormat, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetOutFormat", _wrap_OBConversion_SetOutFormat, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetInFormat", _wrap_OBConversion_GetInFormat, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetOutFormat", _wrap_OBConversion_GetOutFormat, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetInFilename", _wrap_OBConversion_GetInFilename, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetInPos", _wrap_OBConversion_GetInPos, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetInLen", _wrap_OBConversion_GetInLen, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetTitle", _wrap_OBConversion_GetTitle, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetAuxConv", _wrap_OBConversion_GetAuxConv, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetAuxConv", _wrap_OBConversion_SetAuxConv, METH_VARARGS, NULL},
	 { (char *)"OBConversion_IsOption", _wrap_OBConversion_IsOption, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetOptions", _wrap_OBConversion_GetOptions, METH_VARARGS, NULL},
	 { (char *)"OBConversion_AddOption", _wrap_OBConversion_AddOption, METH_VARARGS, NULL},
	 { (char *)"OBConversion_RemoveOption", _wrap_OBConversion_RemoveOption, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetOptions", _wrap_OBConversion_SetOptions, METH_VARARGS, NULL},
	 { (char *)"OBConversion_RegisterOptionParam", _wrap_OBConversion_RegisterOptionParam, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetOptionParams", _wrap_OBConversion_GetOptionParams, METH_VARARGS, NULL},
	 { (char *)"OBConversion_Convert", _wrap_OBConversion_Convert, METH_VARARGS, NULL},
	 { (char *)"OBConversion_FullConvert", _wrap_OBConversion_FullConvert, METH_VARARGS, NULL},
	 { (char *)"OBConversion_AddChemObject", _wrap_OBConversion_AddChemObject, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetChemObject", _wrap_OBConversion_GetChemObject, METH_VARARGS, NULL},
	 { (char *)"OBConversion_IsLast", _wrap_OBConversion_IsLast, METH_VARARGS, NULL},
	 { (char *)"OBConversion_IsFirstInput", _wrap_OBConversion_IsFirstInput, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetOutputIndex", _wrap_OBConversion_GetOutputIndex, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetOutputIndex", _wrap_OBConversion_SetOutputIndex, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetMoreFilesToCome", _wrap_OBConversion_SetMoreFilesToCome, METH_VARARGS, NULL},
	 { (char *)"OBConversion_SetOneObjectOnly", _wrap_OBConversion_SetOneObjectOnly, METH_VARARGS, NULL},
	 { (char *)"OBConversion_GetDefaultFormat", _wrap_OBConversion_GetDefaultFormat, METH_VARARGS, NULL},
	 { (char *)"OBConversion_Write", _wrap_OBConversion_Write, METH_VARARGS, NULL},
	 { (char *)"OBConversion_WriteString", _wrap_OBConversion_WriteString, METH_VARARGS, NULL},
	 { (char *)"OBConversion_WriteFile", _wrap_OBConversion_WriteFile, METH_VARARGS, NULL},
	 { (char *)"OBConversion_Read", _wrap_OBConversion_Read, METH_VARARGS, NULL},
	 { (char *)"OBConversion_ReadString", _wrap_OBConversion_ReadString, METH_VARARGS, NULL},
	 { (char *)"OBConversion_ReadFile", _wrap_OBConversion_ReadFile, METH_VARARGS, NULL},
	 { (char *)"OBConversion_BatchFileName", _wrap_OBConversion_BatchFileName, METH_VARARGS, NULL},
	 { (char *)"OBConversion_IncrementedFileName", _wrap_OBConversion_IncrementedFileName, METH_VARARGS, NULL},
	 { (char *)"OBConversion_swigregister", OBConversion_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBResidue", _wrap_new_OBResidue, METH_VARARGS, NULL},
	 { (char *)"delete_OBResidue", _wrap_delete_OBResidue, METH_VARARGS, NULL},
	 { (char *)"OBResidue_AddAtom", _wrap_OBResidue_AddAtom, METH_VARARGS, NULL},
	 { (char *)"OBResidue_InsertAtom", _wrap_OBResidue_InsertAtom, METH_VARARGS, NULL},
	 { (char *)"OBResidue_RemoveAtom", _wrap_OBResidue_RemoveAtom, METH_VARARGS, NULL},
	 { (char *)"OBResidue_Clear", _wrap_OBResidue_Clear, METH_VARARGS, NULL},
	 { (char *)"OBResidue_SetName", _wrap_OBResidue_SetName, METH_VARARGS, NULL},
	 { (char *)"OBResidue_SetNum", _wrap_OBResidue_SetNum, METH_VARARGS, NULL},
	 { (char *)"OBResidue_SetChain", _wrap_OBResidue_SetChain, METH_VARARGS, NULL},
	 { (char *)"OBResidue_SetChainNum", _wrap_OBResidue_SetChainNum, METH_VARARGS, NULL},
	 { (char *)"OBResidue_SetIdx", _wrap_OBResidue_SetIdx, METH_VARARGS, NULL},
	 { (char *)"OBResidue_SetAtomID", _wrap_OBResidue_SetAtomID, METH_VARARGS, NULL},
	 { (char *)"OBResidue_SetHetAtom", _wrap_OBResidue_SetHetAtom, METH_VARARGS, NULL},
	 { (char *)"OBResidue_SetSerialNum", _wrap_OBResidue_SetSerialNum, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetName", _wrap_OBResidue_GetName, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetNum", _wrap_OBResidue_GetNum, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetNumAtoms", _wrap_OBResidue_GetNumAtoms, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetChain", _wrap_OBResidue_GetChain, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetChainNum", _wrap_OBResidue_GetChainNum, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetIdx", _wrap_OBResidue_GetIdx, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetResKey", _wrap_OBResidue_GetResKey, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetAtoms", _wrap_OBResidue_GetAtoms, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetBonds", _wrap_OBResidue_GetBonds, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetAtomID", _wrap_OBResidue_GetAtomID, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetSerialNum", _wrap_OBResidue_GetSerialNum, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetAminoAcidProperty", _wrap_OBResidue_GetAminoAcidProperty, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetAtomProperty", _wrap_OBResidue_GetAtomProperty, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetResidueProperty", _wrap_OBResidue_GetResidueProperty, METH_VARARGS, NULL},
	 { (char *)"OBResidue_IsHetAtom", _wrap_OBResidue_IsHetAtom, METH_VARARGS, NULL},
	 { (char *)"OBResidue_IsResidueType", _wrap_OBResidue_IsResidueType, METH_VARARGS, NULL},
	 { (char *)"OBResidue_BeginAtom", _wrap_OBResidue_BeginAtom, METH_VARARGS, NULL},
	 { (char *)"OBResidue_NextAtom", _wrap_OBResidue_NextAtom, METH_VARARGS, NULL},
	 { (char *)"OBResidue_HasData", _wrap_OBResidue_HasData, METH_VARARGS, NULL},
	 { (char *)"OBResidue_DeleteData", _wrap_OBResidue_DeleteData, METH_VARARGS, NULL},
	 { (char *)"OBResidue_SetData", _wrap_OBResidue_SetData, METH_VARARGS, NULL},
	 { (char *)"OBResidue_DataSize", _wrap_OBResidue_DataSize, METH_VARARGS, NULL},
	 { (char *)"OBResidue_GetData", _wrap_OBResidue_GetData, METH_VARARGS, NULL},
	 { (char *)"OBResidue_BeginData", _wrap_OBResidue_BeginData, METH_VARARGS, NULL},
	 { (char *)"OBResidue_EndData", _wrap_OBResidue_EndData, METH_VARARGS, NULL},
	 { (char *)"OBResidue_swigregister", OBResidue_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBAtom", _wrap_new_OBAtom, METH_VARARGS, NULL},
	 { (char *)"delete_OBAtom", _wrap_delete_OBAtom, METH_VARARGS, NULL},
	 { (char *)"OBAtom_Clear", _wrap_OBAtom_Clear, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetIdx", _wrap_OBAtom_SetIdx, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetHyb", _wrap_OBAtom_SetHyb, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetAtomicNum", _wrap_OBAtom_SetAtomicNum, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetIsotope", _wrap_OBAtom_SetIsotope, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetImplicitValence", _wrap_OBAtom_SetImplicitValence, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IncrementImplicitValence", _wrap_OBAtom_IncrementImplicitValence, METH_VARARGS, NULL},
	 { (char *)"OBAtom_DecrementImplicitValence", _wrap_OBAtom_DecrementImplicitValence, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetFormalCharge", _wrap_OBAtom_SetFormalCharge, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetSpinMultiplicity", _wrap_OBAtom_SetSpinMultiplicity, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetType", _wrap_OBAtom_SetType, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetPartialCharge", _wrap_OBAtom_SetPartialCharge, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetCoordPtr", _wrap_OBAtom_SetCoordPtr, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetVector", _wrap_OBAtom_SetVector, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetResidue", _wrap_OBAtom_SetResidue, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetAromatic", _wrap_OBAtom_SetAromatic, METH_VARARGS, NULL},
	 { (char *)"OBAtom_UnsetAromatic", _wrap_OBAtom_UnsetAromatic, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetClockwiseStereo", _wrap_OBAtom_SetClockwiseStereo, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetAntiClockwiseStereo", _wrap_OBAtom_SetAntiClockwiseStereo, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetPositiveStereo", _wrap_OBAtom_SetPositiveStereo, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetNegativeStereo", _wrap_OBAtom_SetNegativeStereo, METH_VARARGS, NULL},
	 { (char *)"OBAtom_UnsetStereo", _wrap_OBAtom_UnsetStereo, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetInRing", _wrap_OBAtom_SetInRing, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetChiral", _wrap_OBAtom_SetChiral, METH_VARARGS, NULL},
	 { (char *)"OBAtom_ClearCoordPtr", _wrap_OBAtom_ClearCoordPtr, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetFormalCharge", _wrap_OBAtom_GetFormalCharge, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetAtomicNum", _wrap_OBAtom_GetAtomicNum, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetIsotope", _wrap_OBAtom_GetIsotope, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetSpinMultiplicity", _wrap_OBAtom_GetSpinMultiplicity, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetAtomicMass", _wrap_OBAtom_GetAtomicMass, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetExactMass", _wrap_OBAtom_GetExactMass, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetIdx", _wrap_OBAtom_GetIdx, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetCoordinateIdx", _wrap_OBAtom_GetCoordinateIdx, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetCIdx", _wrap_OBAtom_GetCIdx, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetValence", _wrap_OBAtom_GetValence, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetHyb", _wrap_OBAtom_GetHyb, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetImplicitValence", _wrap_OBAtom_GetImplicitValence, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetHvyValence", _wrap_OBAtom_GetHvyValence, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetHeteroValence", _wrap_OBAtom_GetHeteroValence, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetType", _wrap_OBAtom_GetType, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetX", _wrap_OBAtom_GetX, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetY", _wrap_OBAtom_GetY, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetZ", _wrap_OBAtom_GetZ, METH_VARARGS, NULL},
	 { (char *)"OBAtom_x", _wrap_OBAtom_x, METH_VARARGS, NULL},
	 { (char *)"OBAtom_y", _wrap_OBAtom_y, METH_VARARGS, NULL},
	 { (char *)"OBAtom_z", _wrap_OBAtom_z, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetCoordinate", _wrap_OBAtom_GetCoordinate, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetVector", _wrap_OBAtom_GetVector, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetPartialCharge", _wrap_OBAtom_GetPartialCharge, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetResidue", _wrap_OBAtom_GetResidue, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetNewBondVector", _wrap_OBAtom_GetNewBondVector, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetBond", _wrap_OBAtom_GetBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetNextAtom", _wrap_OBAtom_GetNextAtom, METH_VARARGS, NULL},
	 { (char *)"OBAtom_BeginBonds", _wrap_OBAtom_BeginBonds, METH_VARARGS, NULL},
	 { (char *)"OBAtom_EndBonds", _wrap_OBAtom_EndBonds, METH_VARARGS, NULL},
	 { (char *)"OBAtom_BeginBond", _wrap_OBAtom_BeginBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_NextBond", _wrap_OBAtom_NextBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_BeginNbrAtom", _wrap_OBAtom_BeginNbrAtom, METH_VARARGS, NULL},
	 { (char *)"OBAtom_NextNbrAtom", _wrap_OBAtom_NextNbrAtom, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetDistance", _wrap_OBAtom_GetDistance, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetAngle", _wrap_OBAtom_GetAngle, METH_VARARGS, NULL},
	 { (char *)"OBAtom_NewResidue", _wrap_OBAtom_NewResidue, METH_VARARGS, NULL},
	 { (char *)"OBAtom_DeleteResidue", _wrap_OBAtom_DeleteResidue, METH_VARARGS, NULL},
	 { (char *)"OBAtom_AddBond", _wrap_OBAtom_AddBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_InsertBond", _wrap_OBAtom_InsertBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_DeleteBond", _wrap_OBAtom_DeleteBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_ClearBond", _wrap_OBAtom_ClearBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_CountFreeOxygens", _wrap_OBAtom_CountFreeOxygens, METH_VARARGS, NULL},
	 { (char *)"OBAtom_ImplicitHydrogenCount", _wrap_OBAtom_ImplicitHydrogenCount, METH_VARARGS, NULL},
	 { (char *)"OBAtom_ExplicitHydrogenCount", _wrap_OBAtom_ExplicitHydrogenCount, METH_VARARGS, NULL},
	 { (char *)"OBAtom_MemberOfRingCount", _wrap_OBAtom_MemberOfRingCount, METH_VARARGS, NULL},
	 { (char *)"OBAtom_MemberOfRingSize", _wrap_OBAtom_MemberOfRingSize, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SmallestBondAngle", _wrap_OBAtom_SmallestBondAngle, METH_VARARGS, NULL},
	 { (char *)"OBAtom_AverageBondAngle", _wrap_OBAtom_AverageBondAngle, METH_VARARGS, NULL},
	 { (char *)"OBAtom_BOSum", _wrap_OBAtom_BOSum, METH_VARARGS, NULL},
	 { (char *)"OBAtom_KBOSum", _wrap_OBAtom_KBOSum, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HtoMethyl", _wrap_OBAtom_HtoMethyl, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetHybAndGeom", _wrap_OBAtom_SetHybAndGeom, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasResidue", _wrap_OBAtom_HasResidue, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsHydrogen", _wrap_OBAtom_IsHydrogen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsCarbon", _wrap_OBAtom_IsCarbon, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsNitrogen", _wrap_OBAtom_IsNitrogen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsOxygen", _wrap_OBAtom_IsOxygen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsSulfur", _wrap_OBAtom_IsSulfur, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsPhosphorus", _wrap_OBAtom_IsPhosphorus, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsAromatic", _wrap_OBAtom_IsAromatic, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsInRing", _wrap_OBAtom_IsInRing, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsInRingSize", _wrap_OBAtom_IsInRingSize, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsHeteroatom", _wrap_OBAtom_IsHeteroatom, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsNotCorH", _wrap_OBAtom_IsNotCorH, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsConnected", _wrap_OBAtom_IsConnected, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsOneThree", _wrap_OBAtom_IsOneThree, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsOneFour", _wrap_OBAtom_IsOneFour, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsCarboxylOxygen", _wrap_OBAtom_IsCarboxylOxygen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsPhosphateOxygen", _wrap_OBAtom_IsPhosphateOxygen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsSulfateOxygen", _wrap_OBAtom_IsSulfateOxygen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsNitroOxygen", _wrap_OBAtom_IsNitroOxygen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsAmideNitrogen", _wrap_OBAtom_IsAmideNitrogen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsPolarHydrogen", _wrap_OBAtom_IsPolarHydrogen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsNonPolarHydrogen", _wrap_OBAtom_IsNonPolarHydrogen, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsAromaticNOxide", _wrap_OBAtom_IsAromaticNOxide, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsChiral", _wrap_OBAtom_IsChiral, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsAxial", _wrap_OBAtom_IsAxial, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsClockwise", _wrap_OBAtom_IsClockwise, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsAntiClockwise", _wrap_OBAtom_IsAntiClockwise, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsPositiveStereo", _wrap_OBAtom_IsPositiveStereo, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsNegativeStereo", _wrap_OBAtom_IsNegativeStereo, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasChiralitySpecified", _wrap_OBAtom_HasChiralitySpecified, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasChiralVolume", _wrap_OBAtom_HasChiralVolume, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsHbondAcceptor", _wrap_OBAtom_IsHbondAcceptor, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsHbondDonor", _wrap_OBAtom_IsHbondDonor, METH_VARARGS, NULL},
	 { (char *)"OBAtom_IsHbondDonorH", _wrap_OBAtom_IsHbondDonorH, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasAlphaBetaUnsat", _wrap_OBAtom_HasAlphaBetaUnsat, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasBondOfOrder", _wrap_OBAtom_HasBondOfOrder, METH_VARARGS, NULL},
	 { (char *)"OBAtom_CountBondsOfOrder", _wrap_OBAtom_CountBondsOfOrder, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasNonSingleBond", _wrap_OBAtom_HasNonSingleBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasSingleBond", _wrap_OBAtom_HasSingleBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasDoubleBond", _wrap_OBAtom_HasDoubleBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasAromaticBond", _wrap_OBAtom_HasAromaticBond, METH_VARARGS, NULL},
	 { (char *)"OBAtom_MatchesSMARTS", _wrap_OBAtom_MatchesSMARTS, METH_VARARGS, NULL},
	 { (char *)"OBAtom_HasData", _wrap_OBAtom_HasData, METH_VARARGS, NULL},
	 { (char *)"OBAtom_DeleteData", _wrap_OBAtom_DeleteData, METH_VARARGS, NULL},
	 { (char *)"OBAtom_SetData", _wrap_OBAtom_SetData, METH_VARARGS, NULL},
	 { (char *)"OBAtom_DataSize", _wrap_OBAtom_DataSize, METH_VARARGS, NULL},
	 { (char *)"OBAtom_GetData", _wrap_OBAtom_GetData, METH_VARARGS, NULL},
	 { (char *)"OBAtom_BeginData", _wrap_OBAtom_BeginData, METH_VARARGS, NULL},
	 { (char *)"OBAtom_EndData", _wrap_OBAtom_EndData, METH_VARARGS, NULL},
	 { (char *)"OBAtom_swigregister", OBAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBBond", _wrap_new_OBBond, METH_VARARGS, NULL},
	 { (char *)"delete_OBBond", _wrap_delete_OBBond, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetIdx", _wrap_OBBond_SetIdx, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetBO", _wrap_OBBond_SetBO, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetBegin", _wrap_OBBond_SetBegin, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetEnd", _wrap_OBBond_SetEnd, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetLength", _wrap_OBBond_SetLength, METH_VARARGS, NULL},
	 { (char *)"OBBond_Set", _wrap_OBBond_Set, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetKSingle", _wrap_OBBond_SetKSingle, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetKDouble", _wrap_OBBond_SetKDouble, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetKTriple", _wrap_OBBond_SetKTriple, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetAromatic", _wrap_OBBond_SetAromatic, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetHash", _wrap_OBBond_SetHash, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetWedge", _wrap_OBBond_SetWedge, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetUp", _wrap_OBBond_SetUp, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetDown", _wrap_OBBond_SetDown, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetInRing", _wrap_OBBond_SetInRing, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetClosure", _wrap_OBBond_SetClosure, METH_VARARGS, NULL},
	 { (char *)"OBBond_UnsetAromatic", _wrap_OBBond_UnsetAromatic, METH_VARARGS, NULL},
	 { (char *)"OBBond_UnsetKekule", _wrap_OBBond_UnsetKekule, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetBO", _wrap_OBBond_GetBO, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetBondOrder", _wrap_OBBond_GetBondOrder, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetFlags", _wrap_OBBond_GetFlags, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetBeginAtomIdx", _wrap_OBBond_GetBeginAtomIdx, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetEndAtomIdx", _wrap_OBBond_GetEndAtomIdx, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetBeginAtom", _wrap_OBBond_GetBeginAtom, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetEndAtom", _wrap_OBBond_GetEndAtom, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetNbrAtom", _wrap_OBBond_GetNbrAtom, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetEquibLength", _wrap_OBBond_GetEquibLength, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetLength", _wrap_OBBond_GetLength, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetNbrAtomIdx", _wrap_OBBond_GetNbrAtomIdx, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsAromatic", _wrap_OBBond_IsAromatic, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsInRing", _wrap_OBBond_IsInRing, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsRotor", _wrap_OBBond_IsRotor, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsAmide", _wrap_OBBond_IsAmide, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsPrimaryAmide", _wrap_OBBond_IsPrimaryAmide, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsSecondaryAmide", _wrap_OBBond_IsSecondaryAmide, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsEster", _wrap_OBBond_IsEster, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsCarbonyl", _wrap_OBBond_IsCarbonyl, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsSingle", _wrap_OBBond_IsSingle, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsDouble", _wrap_OBBond_IsDouble, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsTriple", _wrap_OBBond_IsTriple, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsKSingle", _wrap_OBBond_IsKSingle, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsKDouble", _wrap_OBBond_IsKDouble, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsKTriple", _wrap_OBBond_IsKTriple, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsClosure", _wrap_OBBond_IsClosure, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsUp", _wrap_OBBond_IsUp, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsDown", _wrap_OBBond_IsDown, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsWedge", _wrap_OBBond_IsWedge, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsHash", _wrap_OBBond_IsHash, METH_VARARGS, NULL},
	 { (char *)"OBBond_IsDoubleBondGeometry", _wrap_OBBond_IsDoubleBondGeometry, METH_VARARGS, NULL},
	 { (char *)"OBBond_HasData", _wrap_OBBond_HasData, METH_VARARGS, NULL},
	 { (char *)"OBBond_DeleteData", _wrap_OBBond_DeleteData, METH_VARARGS, NULL},
	 { (char *)"OBBond_SetData", _wrap_OBBond_SetData, METH_VARARGS, NULL},
	 { (char *)"OBBond_DataSize", _wrap_OBBond_DataSize, METH_VARARGS, NULL},
	 { (char *)"OBBond_GetData", _wrap_OBBond_GetData, METH_VARARGS, NULL},
	 { (char *)"OBBond_BeginData", _wrap_OBBond_BeginData, METH_VARARGS, NULL},
	 { (char *)"OBBond_EndData", _wrap_OBBond_EndData, METH_VARARGS, NULL},
	 { (char *)"OBBond_swigregister", OBBond_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OBMol", _wrap_new_OBMol, METH_VARARGS, NULL},
	 { (char *)"delete_OBMol", _wrap_delete_OBMol, METH_VARARGS, NULL},
	 { (char *)"OBMol___iadd__", _wrap_OBMol___iadd__, METH_VARARGS, NULL},
	 { (char *)"OBMol_ReserveAtoms", _wrap_OBMol_ReserveAtoms, METH_VARARGS, NULL},
	 { (char *)"OBMol_CreateAtom", _wrap_OBMol_CreateAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_CreateBond", _wrap_OBMol_CreateBond, METH_VARARGS, NULL},
	 { (char *)"OBMol_DestroyAtom", _wrap_OBMol_DestroyAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_DestroyBond", _wrap_OBMol_DestroyBond, METH_VARARGS, NULL},
	 { (char *)"OBMol_AddAtom", _wrap_OBMol_AddAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_AddBond", _wrap_OBMol_AddBond, METH_VARARGS, NULL},
	 { (char *)"OBMol_AddResidue", _wrap_OBMol_AddResidue, METH_VARARGS, NULL},
	 { (char *)"OBMol_InsertAtom", _wrap_OBMol_InsertAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_DeleteAtom", _wrap_OBMol_DeleteAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_DeleteBond", _wrap_OBMol_DeleteBond, METH_VARARGS, NULL},
	 { (char *)"OBMol_DeleteResidue", _wrap_OBMol_DeleteResidue, METH_VARARGS, NULL},
	 { (char *)"OBMol_NewAtom", _wrap_OBMol_NewAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_NewResidue", _wrap_OBMol_NewResidue, METH_VARARGS, NULL},
	 { (char *)"OBMol_BeginModify", _wrap_OBMol_BeginModify, METH_VARARGS, NULL},
	 { (char *)"OBMol_EndModify", _wrap_OBMol_EndModify, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetMod", _wrap_OBMol_GetMod, METH_VARARGS, NULL},
	 { (char *)"OBMol_IncrementMod", _wrap_OBMol_IncrementMod, METH_VARARGS, NULL},
	 { (char *)"OBMol_DecrementMod", _wrap_OBMol_DecrementMod, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasData", _wrap_OBMol_HasData, METH_VARARGS, NULL},
	 { (char *)"OBMol_DeleteData", _wrap_OBMol_DeleteData, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetData", _wrap_OBMol_SetData, METH_VARARGS, NULL},
	 { (char *)"OBMol_DataSize", _wrap_OBMol_DataSize, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetData", _wrap_OBMol_GetData, METH_VARARGS, NULL},
	 { (char *)"OBMol_BeginData", _wrap_OBMol_BeginData, METH_VARARGS, NULL},
	 { (char *)"OBMol_EndData", _wrap_OBMol_EndData, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetFlags", _wrap_OBMol_GetFlags, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetTitle", _wrap_OBMol_GetTitle, METH_VARARGS, NULL},
	 { (char *)"OBMol_NumAtoms", _wrap_OBMol_NumAtoms, METH_VARARGS, NULL},
	 { (char *)"OBMol_NumBonds", _wrap_OBMol_NumBonds, METH_VARARGS, NULL},
	 { (char *)"OBMol_NumHvyAtoms", _wrap_OBMol_NumHvyAtoms, METH_VARARGS, NULL},
	 { (char *)"OBMol_NumResidues", _wrap_OBMol_NumResidues, METH_VARARGS, NULL},
	 { (char *)"OBMol_NumRotors", _wrap_OBMol_NumRotors, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetAtom", _wrap_OBMol_GetAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetFirstAtom", _wrap_OBMol_GetFirstAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetBond", _wrap_OBMol_GetBond, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetResidue", _wrap_OBMol_GetResidue, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetInternalCoord", _wrap_OBMol_GetInternalCoord, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetTorsion", _wrap_OBMol_GetTorsion, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetFormula", _wrap_OBMol_GetFormula, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetEnergy", _wrap_OBMol_GetEnergy, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetMolWt", _wrap_OBMol_GetMolWt, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetExactMass", _wrap_OBMol_GetExactMass, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetTotalCharge", _wrap_OBMol_GetTotalCharge, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetTotalSpinMultiplicity", _wrap_OBMol_GetTotalSpinMultiplicity, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetDimension", _wrap_OBMol_GetDimension, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetCoordinates", _wrap_OBMol_GetCoordinates, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetSSSR", _wrap_OBMol_GetSSSR, METH_VARARGS, NULL},
	 { (char *)"OBMol_AutomaticFormalCharge", _wrap_OBMol_AutomaticFormalCharge, METH_VARARGS, NULL},
	 { (char *)"OBMol_AutomaticPartialCharge", _wrap_OBMol_AutomaticPartialCharge, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetTitle", _wrap_OBMol_SetTitle, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetFormula", _wrap_OBMol_SetFormula, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetEnergy", _wrap_OBMol_SetEnergy, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetDimension", _wrap_OBMol_SetDimension, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetTotalCharge", _wrap_OBMol_SetTotalCharge, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetTotalSpinMultiplicity", _wrap_OBMol_SetTotalSpinMultiplicity, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetInternalCoord", _wrap_OBMol_SetInternalCoord, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetAutomaticFormalCharge", _wrap_OBMol_SetAutomaticFormalCharge, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetAutomaticPartialCharge", _wrap_OBMol_SetAutomaticPartialCharge, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetAromaticPerceived", _wrap_OBMol_SetAromaticPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetSSSRPerceived", _wrap_OBMol_SetSSSRPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetRingAtomsAndBondsPerceived", _wrap_OBMol_SetRingAtomsAndBondsPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetAtomTypesPerceived", _wrap_OBMol_SetAtomTypesPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetChainsPerceived", _wrap_OBMol_SetChainsPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetChiralityPerceived", _wrap_OBMol_SetChiralityPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetPartialChargesPerceived", _wrap_OBMol_SetPartialChargesPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetHybridizationPerceived", _wrap_OBMol_SetHybridizationPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetImplicitValencePerceived", _wrap_OBMol_SetImplicitValencePerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetKekulePerceived", _wrap_OBMol_SetKekulePerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetClosureBondsPerceived", _wrap_OBMol_SetClosureBondsPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetHydrogensAdded", _wrap_OBMol_SetHydrogensAdded, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetCorrectedForPH", _wrap_OBMol_SetCorrectedForPH, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetAromaticCorrected", _wrap_OBMol_SetAromaticCorrected, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetSpinMultiplicityAssigned", _wrap_OBMol_SetSpinMultiplicityAssigned, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetFlags", _wrap_OBMol_SetFlags, METH_VARARGS, NULL},
	 { (char *)"OBMol_UnsetAromaticPerceived", _wrap_OBMol_UnsetAromaticPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_UnsetPartialChargesPerceived", _wrap_OBMol_UnsetPartialChargesPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_UnsetImplicitValencePerceived", _wrap_OBMol_UnsetImplicitValencePerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_UnsetFlag", _wrap_OBMol_UnsetFlag, METH_VARARGS, NULL},
	 { (char *)"OBMol_DoTransformations", _wrap_OBMol_DoTransformations, METH_VARARGS, NULL},
	 { (char *)"OBMol_ClassDescription", _wrap_OBMol_ClassDescription, METH_VARARGS, NULL},
	 { (char *)"OBMol_Clear", _wrap_OBMol_Clear, METH_VARARGS, NULL},
	 { (char *)"OBMol_RenumberAtoms", _wrap_OBMol_RenumberAtoms, METH_VARARGS, NULL},
	 { (char *)"OBMol_ToInertialFrame", _wrap_OBMol_ToInertialFrame, METH_VARARGS, NULL},
	 { (char *)"OBMol_Translate", _wrap_OBMol_Translate, METH_VARARGS, NULL},
	 { (char *)"OBMol_Rotate", _wrap_OBMol_Rotate, METH_VARARGS, NULL},
	 { (char *)"OBMol_Kekulize", _wrap_OBMol_Kekulize, METH_VARARGS, NULL},
	 { (char *)"OBMol_PerceiveKekuleBonds", _wrap_OBMol_PerceiveKekuleBonds, METH_VARARGS, NULL},
	 { (char *)"OBMol_NewPerceiveKekuleBonds", _wrap_OBMol_NewPerceiveKekuleBonds, METH_VARARGS, NULL},
	 { (char *)"OBMol_DeleteHydrogen", _wrap_OBMol_DeleteHydrogen, METH_VARARGS, NULL},
	 { (char *)"OBMol_DeleteHydrogens", _wrap_OBMol_DeleteHydrogens, METH_VARARGS, NULL},
	 { (char *)"OBMol_DeleteNonPolarHydrogens", _wrap_OBMol_DeleteNonPolarHydrogens, METH_VARARGS, NULL},
	 { (char *)"OBMol_AddHydrogens", _wrap_OBMol_AddHydrogens, METH_VARARGS, NULL},
	 { (char *)"OBMol_AddPolarHydrogens", _wrap_OBMol_AddPolarHydrogens, METH_VARARGS, NULL},
	 { (char *)"OBMol_StripSalts", _wrap_OBMol_StripSalts, METH_VARARGS, NULL},
	 { (char *)"OBMol_ConvertDativeBonds", _wrap_OBMol_ConvertDativeBonds, METH_VARARGS, NULL},
	 { (char *)"OBMol_CorrectForPH", _wrap_OBMol_CorrectForPH, METH_VARARGS, NULL},
	 { (char *)"OBMol_AssignSpinMultiplicity", _wrap_OBMol_AssignSpinMultiplicity, METH_VARARGS, NULL},
	 { (char *)"OBMol_Center", _wrap_OBMol_Center, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetTorsion", _wrap_OBMol_SetTorsion, METH_VARARGS, NULL},
	 { (char *)"OBMol_FindSSSR", _wrap_OBMol_FindSSSR, METH_VARARGS, NULL},
	 { (char *)"OBMol_FindRingAtomsAndBonds", _wrap_OBMol_FindRingAtomsAndBonds, METH_VARARGS, NULL},
	 { (char *)"OBMol_FindChiralCenters", _wrap_OBMol_FindChiralCenters, METH_VARARGS, NULL},
	 { (char *)"OBMol_FindChildren", _wrap_OBMol_FindChildren, METH_VARARGS, NULL},
	 { (char *)"OBMol_FindLargestFragment", _wrap_OBMol_FindLargestFragment, METH_VARARGS, NULL},
	 { (char *)"OBMol_ContigFragList", _wrap_OBMol_ContigFragList, METH_VARARGS, NULL},
	 { (char *)"OBMol_Align", _wrap_OBMol_Align, METH_VARARGS, NULL},
	 { (char *)"OBMol_ConnectTheDots", _wrap_OBMol_ConnectTheDots, METH_VARARGS, NULL},
	 { (char *)"OBMol_PerceiveBondOrders", _wrap_OBMol_PerceiveBondOrders, METH_VARARGS, NULL},
	 { (char *)"OBMol_FindTorsions", _wrap_OBMol_FindTorsions, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetGTDVector", _wrap_OBMol_GetGTDVector, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetGIVector", _wrap_OBMol_GetGIVector, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetGIDVector", _wrap_OBMol_GetGIDVector, METH_VARARGS, NULL},
	 { (char *)"OBMol_Has2D", _wrap_OBMol_Has2D, METH_VARARGS, NULL},
	 { (char *)"OBMol_Has3D", _wrap_OBMol_Has3D, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasNonZeroCoords", _wrap_OBMol_HasNonZeroCoords, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasAromaticPerceived", _wrap_OBMol_HasAromaticPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasSSSRPerceived", _wrap_OBMol_HasSSSRPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasRingAtomsAndBondsPerceived", _wrap_OBMol_HasRingAtomsAndBondsPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasAtomTypesPerceived", _wrap_OBMol_HasAtomTypesPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasChiralityPerceived", _wrap_OBMol_HasChiralityPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasPartialChargesPerceived", _wrap_OBMol_HasPartialChargesPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasHybridizationPerceived", _wrap_OBMol_HasHybridizationPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasImplicitValencePerceived", _wrap_OBMol_HasImplicitValencePerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasKekulePerceived", _wrap_OBMol_HasKekulePerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasClosureBondsPerceived", _wrap_OBMol_HasClosureBondsPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasChainsPerceived", _wrap_OBMol_HasChainsPerceived, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasHydrogensAdded", _wrap_OBMol_HasHydrogensAdded, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasAromaticCorrected", _wrap_OBMol_HasAromaticCorrected, METH_VARARGS, NULL},
	 { (char *)"OBMol_IsCorrectedForPH", _wrap_OBMol_IsCorrectedForPH, METH_VARARGS, NULL},
	 { (char *)"OBMol_HasSpinMultiplicityAssigned", _wrap_OBMol_HasSpinMultiplicityAssigned, METH_VARARGS, NULL},
	 { (char *)"OBMol_IsChiral", _wrap_OBMol_IsChiral, METH_VARARGS, NULL},
	 { (char *)"OBMol_Empty", _wrap_OBMol_Empty, METH_VARARGS, NULL},
	 { (char *)"OBMol_NumConformers", _wrap_OBMol_NumConformers, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetConformers", _wrap_OBMol_SetConformers, METH_VARARGS, NULL},
	 { (char *)"OBMol_AddConformer", _wrap_OBMol_AddConformer, METH_VARARGS, NULL},
	 { (char *)"OBMol_SetConformer", _wrap_OBMol_SetConformer, METH_VARARGS, NULL},
	 { (char *)"OBMol_CopyConformer", _wrap_OBMol_CopyConformer, METH_VARARGS, NULL},
	 { (char *)"OBMol_DeleteConformer", _wrap_OBMol_DeleteConformer, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetConformer", _wrap_OBMol_GetConformer, METH_VARARGS, NULL},
	 { (char *)"OBMol_BeginConformer", _wrap_OBMol_BeginConformer, METH_VARARGS, NULL},
	 { (char *)"OBMol_NextConformer", _wrap_OBMol_NextConformer, METH_VARARGS, NULL},
	 { (char *)"OBMol_GetConformers", _wrap_OBMol_GetConformers, METH_VARARGS, NULL},
	 { (char *)"OBMol_BeginAtom", _wrap_OBMol_BeginAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_NextAtom", _wrap_OBMol_NextAtom, METH_VARARGS, NULL},
	 { (char *)"OBMol_BeginBond", _wrap_OBMol_BeginBond, METH_VARARGS, NULL},
	 { (char *)"OBMol_NextBond", _wrap_OBMol_NextBond, METH_VARARGS, NULL},
	 { (char *)"OBMol_BeginResidue", _wrap_OBMol_BeginResidue, METH_VARARGS, NULL},
	 { (char *)"OBMol_NextResidue", _wrap_OBMol_NextResidue, METH_VARARGS, NULL},
	 { (char *)"OBMol_BeginInternalCoord", _wrap_OBMol_BeginInternalCoord, METH_VARARGS, NULL},
	 { (char *)"OBMol_NextInternalCoord", _wrap_OBMol_NextInternalCoord, METH_VARARGS, NULL},
	 { (char *)"OBMol_swigregister", OBMol_swigregister, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__a_set", _wrap_OBInternalCoord__a_set, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__a_get", _wrap_OBInternalCoord__a_get, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__b_set", _wrap_OBInternalCoord__b_set, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__b_get", _wrap_OBInternalCoord__b_get, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__c_set", _wrap_OBInternalCoord__c_set, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__c_get", _wrap_OBInternalCoord__c_get, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__dst_set", _wrap_OBInternalCoord__dst_set, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__dst_get", _wrap_OBInternalCoord__dst_get, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__ang_set", _wrap_OBInternalCoord__ang_set, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__ang_get", _wrap_OBInternalCoord__ang_get, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__tor_set", _wrap_OBInternalCoord__tor_set, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord__tor_get", _wrap_OBInternalCoord__tor_get, METH_VARARGS, NULL},
	 { (char *)"new_OBInternalCoord", _wrap_new_OBInternalCoord, METH_VARARGS, NULL},
	 { (char *)"delete_OBInternalCoord", _wrap_delete_OBInternalCoord, METH_VARARGS, NULL},
	 { (char *)"OBInternalCoord_swigregister", OBInternalCoord_swigregister, METH_VARARGS, NULL},
	 { (char *)"tokenize", _wrap_tokenize, METH_VARARGS, NULL},
	 { (char *)"ThrowError", _wrap_ThrowError, METH_VARARGS, NULL},
	 { (char *)"CartesianToInternal", _wrap_CartesianToInternal, METH_VARARGS, NULL},
	 { (char *)"InternalToCartesian", _wrap_InternalToCartesian, METH_VARARGS, NULL},
	 { (char *)"NewExtension", _wrap_NewExtension, METH_VARARGS, NULL},
	 { (char *)"get_rmat", _wrap_get_rmat, METH_VARARGS, NULL},
	 { (char *)"ob_make_rmat", _wrap_ob_make_rmat, METH_VARARGS, NULL},
	 { (char *)"qtrfit", _wrap_qtrfit, METH_VARARGS, NULL},
	 { (char *)"superimpose", _wrap_superimpose, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_OpenBabel__OBAtomTo_p_OpenBabel__OBNodeBase(void *x) {
    return (void *)((OpenBabel::OBNodeBase *)  ((OpenBabel::OBAtom *) x));
}
static void *_p_OpenBabel__OBMolTo_p_OpenBabel__OBGraphBase(void *x) {
    return (void *)((OpenBabel::OBGraphBase *)  ((OpenBabel::OBMol *) x));
}
static void *_p_OpenBabel__OBMolTo_p_OpenBabel__OBBase(void *x) {
    return (void *)((OpenBabel::OBBase *) (OpenBabel::OBGraphBase *) ((OpenBabel::OBMol *) x));
}
static void *_p_OpenBabel__OBNodeBaseTo_p_OpenBabel__OBBase(void *x) {
    return (void *)((OpenBabel::OBBase *)  ((OpenBabel::OBNodeBase *) x));
}
static void *_p_OpenBabel__OBEdgeBaseTo_p_OpenBabel__OBBase(void *x) {
    return (void *)((OpenBabel::OBBase *)  ((OpenBabel::OBEdgeBase *) x));
}
static void *_p_OpenBabel__OBGraphBaseTo_p_OpenBabel__OBBase(void *x) {
    return (void *)((OpenBabel::OBBase *)  ((OpenBabel::OBGraphBase *) x));
}
static void *_p_OpenBabel__OBBondTo_p_OpenBabel__OBBase(void *x) {
    return (void *)((OpenBabel::OBBase *) (OpenBabel::OBEdgeBase *) ((OpenBabel::OBBond *) x));
}
static void *_p_OpenBabel__OBAtomTo_p_OpenBabel__OBBase(void *x) {
    return (void *)((OpenBabel::OBBase *) (OpenBabel::OBNodeBase *) ((OpenBabel::OBAtom *) x));
}
static void *_p_OpenBabel__OBSymmetryDataTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBSymmetryData *) x));
}
static void *_p_OpenBabel__OBConformerDataTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBConformerData *) x));
}
static void *_p_OpenBabel__OBPairDataTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBPairData *) x));
}
static void *_p_OpenBabel__OBVirtualBondTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBVirtualBond *) x));
}
static void *_p_OpenBabel__OBSerialNumsTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBSerialNums *) x));
}
static void *_p_OpenBabel__OBRingDataTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBRingData *) x));
}
static void *_p_OpenBabel__OBUnitCellTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBUnitCell *) x));
}
static void *_p_OpenBabel__OBExternalBondDataTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBExternalBondData *) x));
}
static void *_p_OpenBabel__OBTorsionDataTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBTorsionData *) x));
}
static void *_p_OpenBabel__OBAngleDataTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBAngleData *) x));
}
static void *_p_OpenBabel__OBChiralDataTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBChiralData *) x));
}
static void *_p_OpenBabel__OBCommentDataTo_p_OpenBabel__OBGenericData(void *x) {
    return (void *)((OpenBabel::OBGenericData *)  ((OpenBabel::OBCommentData *) x));
}
static void *_p_OpenBabel__OBBondTo_p_OpenBabel__OBEdgeBase(void *x) {
    return (void *)((OpenBabel::OBEdgeBase *)  ((OpenBabel::OBBond *) x));
}
static void *_p_OpenBabel__OBAtomTyperTo_p_OpenBabel__OBGlobalDataBase(void *x) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBAtomTyper *) x));
}
static void *_p_OpenBabel__OBAromaticTyperTo_p_OpenBabel__OBGlobalDataBase(void *x) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBAromaticTyper *) x));
}
static void *_p_OpenBabel__OBResidueDataTo_p_OpenBabel__OBGlobalDataBase(void *x) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBResidueData *) x));
}
static void *_p_OpenBabel__OBIsotopeTableTo_p_OpenBabel__OBGlobalDataBase(void *x) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBIsotopeTable *) x));
}
static void *_p_OpenBabel__OBTypeTableTo_p_OpenBabel__OBGlobalDataBase(void *x) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBTypeTable *) x));
}
static void *_p_OpenBabel__OBElementTableTo_p_OpenBabel__OBGlobalDataBase(void *x) {
    return (void *)((OpenBabel::OBGlobalDataBase *)  ((OpenBabel::OBElementTable *) x));
}
static swig_type_info _swigt__p_OpenBabel__CharPtrLess = {"_p_OpenBabel__CharPtrLess", "OpenBabel::CharPtrLess *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__FMapType__iterator = {"_p_OpenBabel__FMapType__iterator", "OpenBabel::FMapType::iterator *|OpenBabel::Formatpos *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAromaticTyper = {"_p_OpenBabel__OBAromaticTyper", "OpenBabel::OBAromaticTyper *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAtom = {"_p_OpenBabel__OBAtom", "OpenBabel::OBAtom *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAtomTyper = {"_p_OpenBabel__OBAtomTyper", "OpenBabel::OBAtomTyper *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBBase = {"_p_OpenBabel__OBBase", "OpenBabel::OBBase *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBBitVec = {"_p_OpenBabel__OBBitVec", "OpenBabel::OBBitVec *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBBond = {"_p_OpenBabel__OBBond", "OpenBabel::OBBond *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBChainsParser = {"_p_OpenBabel__OBChainsParser", "OpenBabel::OBChainsParser *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBConversion = {"_p_OpenBabel__OBConversion", "OpenBabel::OBConversion *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBEdgeBase = {"_p_OpenBabel__OBEdgeBase", "OpenBabel::OBEdgeBase *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBElement = {"_p_OpenBabel__OBElement", "OpenBabel::OBElement *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBElementTable = {"_p_OpenBabel__OBElementTable", "OpenBabel::OBElementTable *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBFormat = {"_p_OpenBabel__OBFormat", "OpenBabel::OBFormat *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBGenericData = {"_p_OpenBabel__OBGenericData", "OpenBabel::OBGenericData *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSymmetryData = {"_p_OpenBabel__OBSymmetryData", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBConformerData = {"_p_OpenBabel__OBConformerData", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBPairData = {"_p_OpenBabel__OBPairData", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBVirtualBond = {"_p_OpenBabel__OBVirtualBond", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBSerialNums = {"_p_OpenBabel__OBSerialNums", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBRingData = {"_p_OpenBabel__OBRingData", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBUnitCell = {"_p_OpenBabel__OBUnitCell", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBExternalBondData = {"_p_OpenBabel__OBExternalBondData", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBTorsionData = {"_p_OpenBabel__OBTorsionData", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBAngleData = {"_p_OpenBabel__OBAngleData", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBChiralData = {"_p_OpenBabel__OBChiralData", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBCommentData = {"_p_OpenBabel__OBCommentData", 0, 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBGlobalDataBase = {"_p_OpenBabel__OBGlobalDataBase", "OpenBabel::OBGlobalDataBase *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBGraphBase = {"_p_OpenBabel__OBGraphBase", "OpenBabel::OBGraphBase *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBInternalCoord = {"_p_OpenBabel__OBInternalCoord", "OpenBabel::OBInternalCoord *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBIsotopeTable = {"_p_OpenBabel__OBIsotopeTable", "OpenBabel::OBIsotopeTable *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBMol = {"_p_OpenBabel__OBMol", "OpenBabel::OBMol *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBNodeBase = {"_p_OpenBabel__OBNodeBase", "OpenBabel::OBNodeBase *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBResidue = {"_p_OpenBabel__OBResidue", "OpenBabel::OBResidue *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBResidueData = {"_p_OpenBabel__OBResidueData", "OpenBabel::OBResidueData *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__OBTypeTable = {"_p_OpenBabel__OBTypeTable", "OpenBabel::OBTypeTable *", 0, 0, 0};
static swig_type_info _swigt__p_OpenBabel__vector3 = {"_p_OpenBabel__vector3", "OpenBabel::vector3 *", 0, 0, 0};
static swig_type_info _swigt__p_a_3__double = {"_p_a_3__double", "double (*)[3]", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, 0};
static swig_type_info _swigt__p_p_OpenBabel__OBFormat = {"_p_p_OpenBabel__OBFormat", "OpenBabel::OBFormat **", 0, 0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTchar_const_p_OpenBabel__OBFormat_p_OpenBabel__CharPtrLess_std__allocatorTstd__pairTchar_const_pconst_OpenBabel__OBFormat_p_t_t_t = {"_p_std__mapTchar_const_p_OpenBabel__OBFormat_p_OpenBabel__CharPtrLess_std__allocatorTstd__pairTchar_const_pconst_OpenBabel__OBFormat_p_t_t_t", "std::map<char const *,OpenBabel::OBFormat *,OpenBabel::CharPtrLess,std::allocator<std::pair<char const *const,OpenBabel::OBFormat * > > > *|OpenBabel::FMapType *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTstd__string_std__string_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_std__string_t_t_t = {"_p_std__mapTstd__string_std__string_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_std__string_t_t_t", "std::map<std::string,std::string,std::less<std::string >,std::allocator<std::pair<std::string const,std::string > > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, 0};
static swig_type_info _swigt__p_std__streampos = {"_p_std__streampos", "std::streampos *", 0, 0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, 0};
static swig_type_info _swigt__p_std__type_info = {"_p_std__type_info", "std::type_info *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t = {"_p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t", "std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t__iterator = {"_p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t__iterator", "std::vector<OpenBabel::OBAtom *,std::allocator<OpenBabel::OBAtom * > >::iterator *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBBond_p_std__allocatorTOpenBabel__OBBond_p_t_t = {"_p_std__vectorTOpenBabel__OBBond_p_std__allocatorTOpenBabel__OBBond_p_t_t", "std::vector<OpenBabel::OBBond *,std::allocator<OpenBabel::OBBond * > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator = {"_p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator", "std::vector<OpenBabel::OBEdgeBase *,std::allocator<OpenBabel::OBEdgeBase * > >::iterator *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t = {"_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t", "std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator = {"_p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator", "std::vector<OpenBabel::OBGenericData *,std::allocator<OpenBabel::OBGenericData * > >::iterator *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t = {"_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t", "std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t__iterator = {"_p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t__iterator", "std::vector<OpenBabel::OBInternalCoord *,std::allocator<OpenBabel::OBInternalCoord * > >::iterator *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t = {"_p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t", "std::vector<OpenBabel::OBNodeBase *,std::allocator<OpenBabel::OBNodeBase * > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t__iterator = {"_p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t__iterator", "std::vector<OpenBabel::OBNodeBase *,std::allocator<OpenBabel::OBNodeBase * > >::iterator *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBResidue_p_std__allocatorTOpenBabel__OBResidue_p_t_t__iterator = {"_p_std__vectorTOpenBabel__OBResidue_p_std__allocatorTOpenBabel__OBResidue_p_t_t__iterator", "std::vector<OpenBabel::OBResidue *,std::allocator<OpenBabel::OBResidue * > >::iterator *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTOpenBabel__OBRing_p_std__allocatorTOpenBabel__OBRing_p_t_t = {"_p_std__vectorTOpenBabel__OBRing_p_std__allocatorTOpenBabel__OBRing_p_t_t", "std::vector<OpenBabel::OBRing *,std::allocator<OpenBabel::OBRing * > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t = {"_p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t", "std::vector<double *,std::allocator<double * > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t__iterator = {"_p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t__iterator", "std::vector<double *,std::allocator<double * > >::iterator *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t = {"_p_std__vectorTdouble_std__allocatorTdouble_t_t", "std::vector<double,std::allocator<double > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTint_std__allocatorTint_t_t = {"_p_std__vectorTint_std__allocatorTint_t_t", "std::vector<int,std::allocator<int > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t = {"_p_std__vectorTstd__string_std__allocatorTstd__string_t_t", "std::vector<std::string,std::allocator<std::string > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__vectorTint_std__allocatorTint_t_t_std__allocatorTstd__vectorTint_std__allocatorTint_t_t_t_t = {"_p_std__vectorTstd__vectorTint_std__allocatorTint_t_t_std__allocatorTstd__vectorTint_std__allocatorTint_t_t_t_t", "std::vector<std::vector<int,std::allocator<int > >,std::allocator<std::vector<int,std::allocator<int > > > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t = {"_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t", "std::vector<unsigned int,std::allocator<unsigned int > > *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__size_t = {"_size_t", "size_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_OpenBabel__CharPtrLess,
  &_swigt__p_OpenBabel__FMapType__iterator,
  &_swigt__p_OpenBabel__OBAngleData,
  &_swigt__p_OpenBabel__OBAromaticTyper,
  &_swigt__p_OpenBabel__OBAtom,
  &_swigt__p_OpenBabel__OBAtomTyper,
  &_swigt__p_OpenBabel__OBBase,
  &_swigt__p_OpenBabel__OBBitVec,
  &_swigt__p_OpenBabel__OBBond,
  &_swigt__p_OpenBabel__OBChainsParser,
  &_swigt__p_OpenBabel__OBChiralData,
  &_swigt__p_OpenBabel__OBCommentData,
  &_swigt__p_OpenBabel__OBConformerData,
  &_swigt__p_OpenBabel__OBConversion,
  &_swigt__p_OpenBabel__OBEdgeBase,
  &_swigt__p_OpenBabel__OBElement,
  &_swigt__p_OpenBabel__OBElementTable,
  &_swigt__p_OpenBabel__OBExternalBondData,
  &_swigt__p_OpenBabel__OBFormat,
  &_swigt__p_OpenBabel__OBGenericData,
  &_swigt__p_OpenBabel__OBGlobalDataBase,
  &_swigt__p_OpenBabel__OBGraphBase,
  &_swigt__p_OpenBabel__OBInternalCoord,
  &_swigt__p_OpenBabel__OBIsotopeTable,
  &_swigt__p_OpenBabel__OBMol,
  &_swigt__p_OpenBabel__OBNodeBase,
  &_swigt__p_OpenBabel__OBPairData,
  &_swigt__p_OpenBabel__OBResidue,
  &_swigt__p_OpenBabel__OBResidueData,
  &_swigt__p_OpenBabel__OBRingData,
  &_swigt__p_OpenBabel__OBSerialNums,
  &_swigt__p_OpenBabel__OBSymmetryData,
  &_swigt__p_OpenBabel__OBTorsionData,
  &_swigt__p_OpenBabel__OBTypeTable,
  &_swigt__p_OpenBabel__OBUnitCell,
  &_swigt__p_OpenBabel__OBVirtualBond,
  &_swigt__p_OpenBabel__vector3,
  &_swigt__p_a_3__double,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_p_OpenBabel__OBFormat,
  &_swigt__p_p_double,
  &_swigt__p_std__istream,
  &_swigt__p_std__mapTchar_const_p_OpenBabel__OBFormat_p_OpenBabel__CharPtrLess_std__allocatorTstd__pairTchar_const_pconst_OpenBabel__OBFormat_p_t_t_t,
  &_swigt__p_std__mapTstd__string_std__string_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_std__string_t_t_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__streampos,
  &_swigt__p_std__string,
  &_swigt__p_std__type_info,
  &_swigt__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t,
  &_swigt__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t__iterator,
  &_swigt__p_std__vectorTOpenBabel__OBBond_p_std__allocatorTOpenBabel__OBBond_p_t_t,
  &_swigt__p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator,
  &_swigt__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t,
  &_swigt__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator,
  &_swigt__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t,
  &_swigt__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t__iterator,
  &_swigt__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t,
  &_swigt__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t__iterator,
  &_swigt__p_std__vectorTOpenBabel__OBResidue_p_std__allocatorTOpenBabel__OBResidue_p_t_t__iterator,
  &_swigt__p_std__vectorTOpenBabel__OBRing_p_std__allocatorTOpenBabel__OBRing_p_t_t,
  &_swigt__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t,
  &_swigt__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t__iterator,
  &_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t,
  &_swigt__p_std__vectorTint_std__allocatorTint_t_t,
  &_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t,
  &_swigt__p_std__vectorTstd__vectorTint_std__allocatorTint_t_t_std__allocatorTstd__vectorTint_std__allocatorTint_t_t_t_t,
  &_swigt__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t,
  &_swigt__ptrdiff_t,
  &_swigt__size_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_OpenBabel__CharPtrLess[] = {  {&_swigt__p_OpenBabel__CharPtrLess, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__FMapType__iterator[] = {  {&_swigt__p_OpenBabel__FMapType__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAromaticTyper[] = {  {&_swigt__p_OpenBabel__OBAromaticTyper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAtom[] = {  {&_swigt__p_OpenBabel__OBAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAtomTyper[] = {  {&_swigt__p_OpenBabel__OBAtomTyper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBBase[] = {  {&_swigt__p_OpenBabel__OBMol, _p_OpenBabel__OBMolTo_p_OpenBabel__OBBase, 0, 0},  {&_swigt__p_OpenBabel__OBNodeBase, _p_OpenBabel__OBNodeBaseTo_p_OpenBabel__OBBase, 0, 0},  {&_swigt__p_OpenBabel__OBEdgeBase, _p_OpenBabel__OBEdgeBaseTo_p_OpenBabel__OBBase, 0, 0},  {&_swigt__p_OpenBabel__OBGraphBase, _p_OpenBabel__OBGraphBaseTo_p_OpenBabel__OBBase, 0, 0},  {&_swigt__p_OpenBabel__OBBase, 0, 0, 0},  {&_swigt__p_OpenBabel__OBBond, _p_OpenBabel__OBBondTo_p_OpenBabel__OBBase, 0, 0},  {&_swigt__p_OpenBabel__OBAtom, _p_OpenBabel__OBAtomTo_p_OpenBabel__OBBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBBitVec[] = {  {&_swigt__p_OpenBabel__OBBitVec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBBond[] = {  {&_swigt__p_OpenBabel__OBBond, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBChainsParser[] = {  {&_swigt__p_OpenBabel__OBChainsParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBConversion[] = {  {&_swigt__p_OpenBabel__OBConversion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBEdgeBase[] = {  {&_swigt__p_OpenBabel__OBEdgeBase, 0, 0, 0},  {&_swigt__p_OpenBabel__OBBond, _p_OpenBabel__OBBondTo_p_OpenBabel__OBEdgeBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBElement[] = {  {&_swigt__p_OpenBabel__OBElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBElementTable[] = {  {&_swigt__p_OpenBabel__OBElementTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBFormat[] = {  {&_swigt__p_OpenBabel__OBFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSymmetryData[] = {{&_swigt__p_OpenBabel__OBSymmetryData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBConformerData[] = {{&_swigt__p_OpenBabel__OBConformerData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBPairData[] = {{&_swigt__p_OpenBabel__OBPairData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBVirtualBond[] = {{&_swigt__p_OpenBabel__OBVirtualBond, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBSerialNums[] = {{&_swigt__p_OpenBabel__OBSerialNums, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBRingData[] = {{&_swigt__p_OpenBabel__OBRingData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBUnitCell[] = {{&_swigt__p_OpenBabel__OBUnitCell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBExternalBondData[] = {{&_swigt__p_OpenBabel__OBExternalBondData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBTorsionData[] = {{&_swigt__p_OpenBabel__OBTorsionData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBAngleData[] = {{&_swigt__p_OpenBabel__OBAngleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBChiralData[] = {{&_swigt__p_OpenBabel__OBChiralData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBCommentData[] = {{&_swigt__p_OpenBabel__OBCommentData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBGenericData[] = {  {&_swigt__p_OpenBabel__OBSymmetryData, _p_OpenBabel__OBSymmetryDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBConformerData, _p_OpenBabel__OBConformerDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBPairData, _p_OpenBabel__OBPairDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBVirtualBond, _p_OpenBabel__OBVirtualBondTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBSerialNums, _p_OpenBabel__OBSerialNumsTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBRingData, _p_OpenBabel__OBRingDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBUnitCell, _p_OpenBabel__OBUnitCellTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBExternalBondData, _p_OpenBabel__OBExternalBondDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBTorsionData, _p_OpenBabel__OBTorsionDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBAngleData, _p_OpenBabel__OBAngleDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBChiralData, _p_OpenBabel__OBChiralDataTo_p_OpenBabel__OBGenericData, 0, 0},  {&_swigt__p_OpenBabel__OBGenericData, 0, 0, 0},  {&_swigt__p_OpenBabel__OBCommentData, _p_OpenBabel__OBCommentDataTo_p_OpenBabel__OBGenericData, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBGlobalDataBase[] = {  {&_swigt__p_OpenBabel__OBAtomTyper, _p_OpenBabel__OBAtomTyperTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBAromaticTyper, _p_OpenBabel__OBAromaticTyperTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBGlobalDataBase, 0, 0, 0},  {&_swigt__p_OpenBabel__OBResidueData, _p_OpenBabel__OBResidueDataTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBIsotopeTable, _p_OpenBabel__OBIsotopeTableTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBTypeTable, _p_OpenBabel__OBTypeTableTo_p_OpenBabel__OBGlobalDataBase, 0, 0},  {&_swigt__p_OpenBabel__OBElementTable, _p_OpenBabel__OBElementTableTo_p_OpenBabel__OBGlobalDataBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBGraphBase[] = {  {&_swigt__p_OpenBabel__OBMol, _p_OpenBabel__OBMolTo_p_OpenBabel__OBGraphBase, 0, 0},  {&_swigt__p_OpenBabel__OBGraphBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBInternalCoord[] = {  {&_swigt__p_OpenBabel__OBInternalCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBIsotopeTable[] = {  {&_swigt__p_OpenBabel__OBIsotopeTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBMol[] = {  {&_swigt__p_OpenBabel__OBMol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBNodeBase[] = {  {&_swigt__p_OpenBabel__OBNodeBase, 0, 0, 0},  {&_swigt__p_OpenBabel__OBAtom, _p_OpenBabel__OBAtomTo_p_OpenBabel__OBNodeBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBResidue[] = {  {&_swigt__p_OpenBabel__OBResidue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBResidueData[] = {  {&_swigt__p_OpenBabel__OBResidueData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__OBTypeTable[] = {  {&_swigt__p_OpenBabel__OBTypeTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpenBabel__vector3[] = {  {&_swigt__p_OpenBabel__vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_3__double[] = {  {&_swigt__p_a_3__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_OpenBabel__OBFormat[] = {  {&_swigt__p_p_OpenBabel__OBFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTchar_const_p_OpenBabel__OBFormat_p_OpenBabel__CharPtrLess_std__allocatorTstd__pairTchar_const_pconst_OpenBabel__OBFormat_p_t_t_t[] = {  {&_swigt__p_std__mapTchar_const_p_OpenBabel__OBFormat_p_OpenBabel__CharPtrLess_std__allocatorTstd__pairTchar_const_pconst_OpenBabel__OBFormat_p_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTstd__string_std__string_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapTstd__string_std__string_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__streampos[] = {  {&_swigt__p_std__streampos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__type_info[] = {  {&_swigt__p_std__type_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t[] = {  {&_swigt__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t__iterator[] = {  {&_swigt__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBBond_p_std__allocatorTOpenBabel__OBBond_p_t_t[] = {  {&_swigt__p_std__vectorTOpenBabel__OBBond_p_std__allocatorTOpenBabel__OBBond_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator[] = {  {&_swigt__p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t[] = {  {&_swigt__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator[] = {  {&_swigt__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t[] = {  {&_swigt__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t__iterator[] = {  {&_swigt__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t[] = {  {&_swigt__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t__iterator[] = {  {&_swigt__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBResidue_p_std__allocatorTOpenBabel__OBResidue_p_t_t__iterator[] = {  {&_swigt__p_std__vectorTOpenBabel__OBResidue_p_std__allocatorTOpenBabel__OBResidue_p_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTOpenBabel__OBRing_p_std__allocatorTOpenBabel__OBRing_p_t_t[] = {  {&_swigt__p_std__vectorTOpenBabel__OBRing_p_std__allocatorTOpenBabel__OBRing_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t[] = {  {&_swigt__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t__iterator[] = {  {&_swigt__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t[] = {  {&_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint_std__allocatorTint_t_t[] = {  {&_swigt__p_std__vectorTint_std__allocatorTint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t[] = {  {&_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__vectorTint_std__allocatorTint_t_t_std__allocatorTstd__vectorTint_std__allocatorTint_t_t_t_t[] = {  {&_swigt__p_std__vectorTstd__vectorTint_std__allocatorTint_t_t_std__allocatorTstd__vectorTint_std__allocatorTint_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t[] = {  {&_swigt__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__size_t[] = {  {&_swigt__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_OpenBabel__CharPtrLess,
  _swigc__p_OpenBabel__FMapType__iterator,
  _swigc__p_OpenBabel__OBAngleData,
  _swigc__p_OpenBabel__OBAromaticTyper,
  _swigc__p_OpenBabel__OBAtom,
  _swigc__p_OpenBabel__OBAtomTyper,
  _swigc__p_OpenBabel__OBBase,
  _swigc__p_OpenBabel__OBBitVec,
  _swigc__p_OpenBabel__OBBond,
  _swigc__p_OpenBabel__OBChainsParser,
  _swigc__p_OpenBabel__OBChiralData,
  _swigc__p_OpenBabel__OBCommentData,
  _swigc__p_OpenBabel__OBConformerData,
  _swigc__p_OpenBabel__OBConversion,
  _swigc__p_OpenBabel__OBEdgeBase,
  _swigc__p_OpenBabel__OBElement,
  _swigc__p_OpenBabel__OBElementTable,
  _swigc__p_OpenBabel__OBExternalBondData,
  _swigc__p_OpenBabel__OBFormat,
  _swigc__p_OpenBabel__OBGenericData,
  _swigc__p_OpenBabel__OBGlobalDataBase,
  _swigc__p_OpenBabel__OBGraphBase,
  _swigc__p_OpenBabel__OBInternalCoord,
  _swigc__p_OpenBabel__OBIsotopeTable,
  _swigc__p_OpenBabel__OBMol,
  _swigc__p_OpenBabel__OBNodeBase,
  _swigc__p_OpenBabel__OBPairData,
  _swigc__p_OpenBabel__OBResidue,
  _swigc__p_OpenBabel__OBResidueData,
  _swigc__p_OpenBabel__OBRingData,
  _swigc__p_OpenBabel__OBSerialNums,
  _swigc__p_OpenBabel__OBSymmetryData,
  _swigc__p_OpenBabel__OBTorsionData,
  _swigc__p_OpenBabel__OBTypeTable,
  _swigc__p_OpenBabel__OBUnitCell,
  _swigc__p_OpenBabel__OBVirtualBond,
  _swigc__p_OpenBabel__vector3,
  _swigc__p_a_3__double,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_p_OpenBabel__OBFormat,
  _swigc__p_p_double,
  _swigc__p_std__istream,
  _swigc__p_std__mapTchar_const_p_OpenBabel__OBFormat_p_OpenBabel__CharPtrLess_std__allocatorTstd__pairTchar_const_pconst_OpenBabel__OBFormat_p_t_t_t,
  _swigc__p_std__mapTstd__string_std__string_std__lessTstd__string_t_std__allocatorTstd__pairTstd__string_const_std__string_t_t_t,
  _swigc__p_std__ostream,
  _swigc__p_std__streampos,
  _swigc__p_std__string,
  _swigc__p_std__type_info,
  _swigc__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t,
  _swigc__p_std__vectorTOpenBabel__OBAtom_p_std__allocatorTOpenBabel__OBAtom_p_t_t__iterator,
  _swigc__p_std__vectorTOpenBabel__OBBond_p_std__allocatorTOpenBabel__OBBond_p_t_t,
  _swigc__p_std__vectorTOpenBabel__OBEdgeBase_p_std__allocatorTOpenBabel__OBEdgeBase_p_t_t__iterator,
  _swigc__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t,
  _swigc__p_std__vectorTOpenBabel__OBGenericData_p_std__allocatorTOpenBabel__OBGenericData_p_t_t__iterator,
  _swigc__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t,
  _swigc__p_std__vectorTOpenBabel__OBInternalCoord_p_std__allocatorTOpenBabel__OBInternalCoord_p_t_t__iterator,
  _swigc__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t,
  _swigc__p_std__vectorTOpenBabel__OBNodeBase_p_std__allocatorTOpenBabel__OBNodeBase_p_t_t__iterator,
  _swigc__p_std__vectorTOpenBabel__OBResidue_p_std__allocatorTOpenBabel__OBResidue_p_t_t__iterator,
  _swigc__p_std__vectorTOpenBabel__OBRing_p_std__allocatorTOpenBabel__OBRing_p_t_t,
  _swigc__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t,
  _swigc__p_std__vectorTdouble_p_std__allocatorTdouble_p_t_t__iterator,
  _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t,
  _swigc__p_std__vectorTint_std__allocatorTint_t_t,
  _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t,
  _swigc__p_std__vectorTstd__vectorTint_std__allocatorTint_t_t_std__allocatorTstd__vectorTint_std__allocatorTint_t_t_t_t,
  _swigc__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t,
  _swigc__ptrdiff_t,
  _swigc__size_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"FILE_SEP_CHAR", 0, 0, (void *)"/", &SWIGTYPE_p_char},
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
        swig_module.types[i] = 0;
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,"FILE_SEP_CHAR", SWIG_FromCharPtr("/"));
    {
        PyDict_SetItemString(d,"OBConversion_INOPTIONS", SWIG_From_int(static_cast<int >(OpenBabel::OBConversion::INOPTIONS))); 
    }
    {
        PyDict_SetItemString(d,"OBConversion_OUTOPTIONS", SWIG_From_int(static_cast<int >(OpenBabel::OBConversion::OUTOPTIONS))); 
    }
    {
        PyDict_SetItemString(d,"OBConversion_GENOPTIONS", SWIG_From_int(static_cast<int >(OpenBabel::OBConversion::GENOPTIONS))); 
    }
    {
        PyDict_SetItemString(d,"NOTREADABLE", SWIG_From_int(static_cast<int >(0x01))); 
    }
    {
        PyDict_SetItemString(d,"READONEONLY", SWIG_From_int(static_cast<int >(0x02))); 
    }
    {
        PyDict_SetItemString(d,"READBINARY", SWIG_From_int(static_cast<int >(0x04))); 
    }
    {
        PyDict_SetItemString(d,"NOTWRITABLE", SWIG_From_int(static_cast<int >(0x10))); 
    }
    {
        PyDict_SetItemString(d,"WRITEONEONLY", SWIG_From_int(static_cast<int >(0x20))); 
    }
    {
        PyDict_SetItemString(d,"WRITEBINARY", SWIG_From_int(static_cast<int >(0x40))); 
    }
    {
        PyDict_SetItemString(d,"DEFAULTFORMAT", SWIG_From_int(static_cast<int >(0x4000))); 
    }
    {
        PyDict_SetItemString(d,"OB_4RING_ATOM", SWIG_From_int(static_cast<int >((1<<1)))); 
    }
    {
        PyDict_SetItemString(d,"OB_3RING_ATOM", SWIG_From_int(static_cast<int >((1<<2)))); 
    }
    {
        PyDict_SetItemString(d,"OB_AROMATIC_ATOM", SWIG_From_int(static_cast<int >((1<<3)))); 
    }
    {
        PyDict_SetItemString(d,"OB_RING_ATOM", SWIG_From_int(static_cast<int >((1<<4)))); 
    }
    {
        PyDict_SetItemString(d,"OB_CSTEREO_ATOM", SWIG_From_int(static_cast<int >((1<<5)))); 
    }
    {
        PyDict_SetItemString(d,"OB_ACSTEREO_ATOM", SWIG_From_int(static_cast<int >((1<<6)))); 
    }
    {
        PyDict_SetItemString(d,"OB_DONOR_ATOM", SWIG_From_int(static_cast<int >((1<<7)))); 
    }
    {
        PyDict_SetItemString(d,"OB_ACCEPTOR_ATOM", SWIG_From_int(static_cast<int >((1<<8)))); 
    }
    {
        PyDict_SetItemString(d,"OB_CHIRAL_ATOM", SWIG_From_int(static_cast<int >((1<<9)))); 
    }
    {
        PyDict_SetItemString(d,"OB_POS_CHIRAL_ATOM", SWIG_From_int(static_cast<int >((1<<10)))); 
    }
    {
        PyDict_SetItemString(d,"OB_NEG_CHIRAL_ATOM", SWIG_From_int(static_cast<int >((1<<11)))); 
    }
    {
        PyDict_SetItemString(d,"OB_AROMATIC_BOND", SWIG_From_int(static_cast<int >((1<<1)))); 
    }
    {
        PyDict_SetItemString(d,"OB_WEDGE_BOND", SWIG_From_int(static_cast<int >((1<<2)))); 
    }
    {
        PyDict_SetItemString(d,"OB_HASH_BOND", SWIG_From_int(static_cast<int >((1<<3)))); 
    }
    {
        PyDict_SetItemString(d,"OB_RING_BOND", SWIG_From_int(static_cast<int >((1<<4)))); 
    }
    {
        PyDict_SetItemString(d,"OB_TORUP_BOND", SWIG_From_int(static_cast<int >((1<<5)))); 
    }
    {
        PyDict_SetItemString(d,"OB_TORDOWN_BOND", SWIG_From_int(static_cast<int >((1<<6)))); 
    }
    {
        PyDict_SetItemString(d,"OB_KSINGLE_BOND", SWIG_From_int(static_cast<int >((1<<7)))); 
    }
    {
        PyDict_SetItemString(d,"OB_KDOUBLE_BOND", SWIG_From_int(static_cast<int >((1<<8)))); 
    }
    {
        PyDict_SetItemString(d,"OB_KTRIPLE_BOND", SWIG_From_int(static_cast<int >((1<<9)))); 
    }
    {
        PyDict_SetItemString(d,"OB_CLOSURE_BOND", SWIG_From_int(static_cast<int >((1<<10)))); 
    }
    {
        PyDict_SetItemString(d,"OB_SSSR_MOL", SWIG_From_int(static_cast<int >((1<<1)))); 
    }
    {
        PyDict_SetItemString(d,"OB_RINGFLAGS_MOL", SWIG_From_int(static_cast<int >((1<<2)))); 
    }
    {
        PyDict_SetItemString(d,"OB_AROMATIC_MOL", SWIG_From_int(static_cast<int >((1<<3)))); 
    }
    {
        PyDict_SetItemString(d,"OB_ATOMTYPES_MOL", SWIG_From_int(static_cast<int >((1<<4)))); 
    }
    {
        PyDict_SetItemString(d,"OB_CHIRALITY_MOL", SWIG_From_int(static_cast<int >((1<<5)))); 
    }
    {
        PyDict_SetItemString(d,"OB_PCHARGE_MOL", SWIG_From_int(static_cast<int >((1<<6)))); 
    }
    {
        PyDict_SetItemString(d,"OB_HYBRID_MOL", SWIG_From_int(static_cast<int >((1<<8)))); 
    }
    {
        PyDict_SetItemString(d,"OB_IMPVAL_MOL", SWIG_From_int(static_cast<int >((1<<9)))); 
    }
    {
        PyDict_SetItemString(d,"OB_KEKULE_MOL", SWIG_From_int(static_cast<int >((1<<10)))); 
    }
    {
        PyDict_SetItemString(d,"OB_CLOSURE_MOL", SWIG_From_int(static_cast<int >((1<<11)))); 
    }
    {
        PyDict_SetItemString(d,"OB_H_ADDED_MOL", SWIG_From_int(static_cast<int >((1<<12)))); 
    }
    {
        PyDict_SetItemString(d,"OB_PH_CORRECTED_MOL", SWIG_From_int(static_cast<int >((1<<13)))); 
    }
    {
        PyDict_SetItemString(d,"OB_AROM_CORRECTED_MOL", SWIG_From_int(static_cast<int >((1<<14)))); 
    }
    {
        PyDict_SetItemString(d,"OB_CHAINS_MOL", SWIG_From_int(static_cast<int >((1<<15)))); 
    }
    {
        PyDict_SetItemString(d,"OB_TCHARGE_MOL", SWIG_From_int(static_cast<int >((1<<16)))); 
    }
    {
        PyDict_SetItemString(d,"OB_TSPIN_MOL", SWIG_From_int(static_cast<int >((1<<17)))); 
    }
    {
        PyDict_SetItemString(d,"OB_CURRENT_CONFORMER", SWIG_From_int(static_cast<int >(-1))); 
    }
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"etab",_wrap_etab_get, _wrap_etab_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ttab",_wrap_ttab_get, _wrap_ttab_set);
    SWIG_addvarlink(SWIG_globals,(char*)"isotab",_wrap_isotab_get, _wrap_isotab_set);
    SWIG_addvarlink(SWIG_globals,(char*)"aromtyper",_wrap_aromtyper_get, _wrap_aromtyper_set);
    SWIG_addvarlink(SWIG_globals,(char*)"atomtyper",_wrap_atomtyper_get, _wrap_atomtyper_set);
    SWIG_addvarlink(SWIG_globals,(char*)"chainsparser",_wrap_chainsparser_get, _wrap_chainsparser_set);
    SWIG_addvarlink(SWIG_globals,(char*)"resdat",_wrap_resdat_get, _wrap_resdat_set);
    {
        PyDict_SetItemString(d,"BUFF_SIZE", SWIG_From_int(static_cast<int >(32768))); 
    }
}

