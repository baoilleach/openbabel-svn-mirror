/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class pluginiterFingerprint {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected pluginiterFingerprint(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(pluginiterFingerprint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      openbabelJNI.delete_pluginiterFingerprint(swigCPtr);
    }
    swigCPtr = 0;
  }

  public void Register(OBFingerprint pType, String ID, boolean IsDefault) {
    openbabelJNI.pluginiterFingerprint_Register(swigCPtr, this, OBFingerprint.getCPtr(pType), pType, ID, IsDefault);
  }

  public OBFingerprint FindType(String ID) {
    long cPtr = openbabelJNI.pluginiterFingerprint_FindType(swigCPtr, this, ID);
    return (cPtr == 0) ? null : new OBFingerprint(cPtr, false);
  }

  public OBFingerprint FindDefaultType() {
    long cPtr = openbabelJNI.pluginiterFingerprint_FindDefaultType(swigCPtr, this);
    return (cPtr == 0) ? null : new OBFingerprint(cPtr, false);
  }

  public String ID() {
    return openbabelJNI.pluginiterFingerprint_ID(swigCPtr, this);
  }

  public void ToStart() {
    openbabelJNI.pluginiterFingerprint_ToStart(swigCPtr, this);
  }

  public OBFingerprint __deref__() {
    long cPtr = openbabelJNI.pluginiterFingerprint___deref__(swigCPtr, this);
    return (cPtr == 0) ? null : new OBFingerprint(cPtr, false);
  }

  public pluginiterFingerprint() {
    this(openbabelJNI.new_pluginiterFingerprint(), true);
  }

  public pluginiterFingerprint Iter() {
    return new pluginiterFingerprint(openbabelJNI.pluginiterFingerprint_Iter(swigCPtr, this), false);
  }

  public void SetBit(vectorUnsignedInt vec, long n) {
    openbabelJNI.pluginiterFingerprint_SetBit(swigCPtr, this, vectorUnsignedInt.getCPtr(vec), vec, n);
  }

  public void Fold(vectorUnsignedInt vec, long nbits) {
    openbabelJNI.pluginiterFingerprint_Fold(swigCPtr, this, vectorUnsignedInt.getCPtr(vec), vec, nbits);
  }

  public boolean GetFingerprint(OBBase pOb, vectorUnsignedInt fp, int nbits) {
    return openbabelJNI.pluginiterFingerprint_GetFingerprint__SWIG_0(swigCPtr, this, OBBase.getCPtr(pOb), pOb, vectorUnsignedInt.getCPtr(fp), fp, nbits);
  }

  public boolean GetFingerprint(OBBase pOb, vectorUnsignedInt fp) {
    return openbabelJNI.pluginiterFingerprint_GetFingerprint__SWIG_1(swigCPtr, this, OBBase.getCPtr(pOb), pOb, vectorUnsignedInt.getCPtr(fp), fp);
  }

  public String Description() {
    return openbabelJNI.pluginiterFingerprint_Description(swigCPtr, this);
  }

  public long Flags() {
    return openbabelJNI.pluginiterFingerprint_Flags(swigCPtr, this);
  }

  public double Tanimoto(vectorUnsignedInt vec1, vectorUnsignedInt vec2) {
    return openbabelJNI.pluginiterFingerprint_Tanimoto__SWIG_0(swigCPtr, this, vectorUnsignedInt.getCPtr(vec1), vec1, vectorUnsignedInt.getCPtr(vec2), vec2);
  }

  public double Tanimoto(vectorUnsignedInt vec1, SWIGTYPE_p_unsigned_int p2) {
    return openbabelJNI.pluginiterFingerprint_Tanimoto__SWIG_1(swigCPtr, this, vectorUnsignedInt.getCPtr(vec1), vec1, SWIGTYPE_p_unsigned_int.getCPtr(p2));
  }

  public long Getbitsperint() {
    return openbabelJNI.pluginiterFingerprint_Getbitsperint(swigCPtr, this);
  }

  public OBFingerprint FindFingerprint(String ID) {
    long cPtr = openbabelJNI.pluginiterFingerprint_FindFingerprint(swigCPtr, this, ID);
    return (cPtr == 0) ? null : new OBFingerprint(cPtr, false);
  }

}
