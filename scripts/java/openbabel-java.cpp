/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


// used to set import/export for Cygwin DLLs
#ifdef WIN32
#define USING_OBDLL
#endif


#include "obutil.h"
#include "math/vector3.h"
#include "math/matrix3x3.h"
#include "generic.h"

#include "base.h"
#include "mol.h"
#include "ring.h"
#include "obconversion.h"
#include "oberror.h"

#include "data.h"
#include "parsmart.h"


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector<int >::const_reference std_vector_Sl_int_Sg__get(std::vector<int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector<int > *self,int i,std::vector<int >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<std::vector<int > >::const_reference std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(std::vector<std::vector<int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(std::vector<std::vector<int > > *self,int i,std::vector<std::vector<int > >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<double >::const_reference std_vector_Sl_double_Sg__get(std::vector<double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector<double > *self,int i,std::vector<double >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::vector3 >::const_reference std_vector_Sl_OpenBabel_vector3_Sg__get(std::vector<OpenBabel::vector3 > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_vector3_Sg__set(std::vector<OpenBabel::vector3 > *self,int i,std::vector<OpenBabel::vector3 >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBMol >::const_reference std_vector_Sl_OpenBabel_OBMol_Sg__get(std::vector<OpenBabel::OBMol > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBMol_Sg__set(std::vector<OpenBabel::OBMol > *self,int i,std::vector<OpenBabel::OBMol >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBBond >::const_reference std_vector_Sl_OpenBabel_OBBond_Sg__get(std::vector<OpenBabel::OBBond > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBBond_Sg__set(std::vector<OpenBabel::OBBond > *self,int i,std::vector<OpenBabel::OBBond >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBResidue >::const_reference std_vector_Sl_OpenBabel_OBResidue_Sg__get(std::vector<OpenBabel::OBResidue > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBResidue_Sg__set(std::vector<OpenBabel::OBResidue > *self,int i,std::vector<OpenBabel::OBResidue >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBRing >::const_reference std_vector_Sl_OpenBabel_OBRing_Sg__get(std::vector<OpenBabel::OBRing > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBRing_Sg__set(std::vector<OpenBabel::OBRing > *self,int i,std::vector<OpenBabel::OBRing >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBGenericData * >::const_reference std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__get(std::vector<OpenBabel::OBGenericData * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__set(std::vector<OpenBabel::OBGenericData * > *self,int i,std::vector<OpenBabel::OBGenericData * >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorInt_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<int > *)new std::vector<int >();
  *(std::vector<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorInt_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<int >::size_type arg1 ;
  std::vector<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<int >::size_type)jarg1; 
  result = (std::vector<int > *)new std::vector<int >(arg1);
  *(std::vector<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorInt_1size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  result = ((std::vector<int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorInt_1capacity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  result = ((std::vector<int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorInt_1reserve___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  arg2 = (std::vector<int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vectorInt_1isEmpty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  result = (bool)((std::vector<int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorInt_1clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorInt_1add___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::value_type *arg2 = 0 ;
  std::vector<int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  temp2 = (std::vector<int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<int >::value_type const &)*arg2);
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_vectorInt_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  int arg2 ;
  std::vector<int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<int >::const_reference _result_ref = std_vector_Sl_int_Sg__get(arg1,arg2);
      result = (std::vector<int >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorInt_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  int arg2 ;
  std::vector<int >::value_type *arg3 = 0 ;
  std::vector<int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vectorInt___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vvInt_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<std::vector<int > > *)new std::vector<std::vector<int > >();
  *(std::vector<std::vector<int > > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vvInt_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > >::size_type arg1 ;
  std::vector<std::vector<int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<std::vector<int > >::size_type)jarg1; 
  result = (std::vector<std::vector<int > > *)new std::vector<std::vector<int > >(arg1);
  *(std::vector<std::vector<int > > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vvInt_1size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  std::vector<std::vector<int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  result = ((std::vector<std::vector<int > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vvInt_1capacity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  std::vector<std::vector<int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  result = ((std::vector<std::vector<int > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vvInt_1reserve___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  std::vector<std::vector<int > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  arg2 = (std::vector<std::vector<int > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vvInt_1isEmpty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  result = (bool)((std::vector<std::vector<int > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vvInt_1clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vvInt_1add___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  std::vector<std::vector<int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  arg2 = *(std::vector<std::vector<int > >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<std::vector<int > >::value_type const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vvInt_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  int arg2 ;
  std::vector<std::vector<int > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<std::vector<int > >::const_reference _result_ref = std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(arg1,arg2);
      result = (std::vector<std::vector<int > >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<std::vector<int > >::value_type **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vvInt_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  int arg2 ;
  std::vector<std::vector<int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<std::vector<int > >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(arg1,arg2,(std::vector<int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vvInt___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorDouble_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<double > *)new std::vector<double >();
  *(std::vector<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorDouble_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<double >::size_type arg1 ;
  std::vector<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<double >::size_type)jarg1; 
  result = (std::vector<double > *)new std::vector<double >(arg1);
  *(std::vector<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorDouble_1size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  result = ((std::vector<double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorDouble_1capacity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  result = ((std::vector<double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorDouble_1reserve___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  arg2 = (std::vector<double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vectorDouble_1isEmpty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  result = (bool)((std::vector<double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorDouble_1clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorDouble_1add___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::value_type *arg2 = 0 ;
  std::vector<double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  temp2 = (std::vector<double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<double >::value_type const &)*arg2);
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_vectorDouble_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  int arg2 ;
  std::vector<double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<double >::const_reference _result_ref = std_vector_Sl_double_Sg__get(arg1,arg2);
      result = (std::vector<double >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorDouble_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  int arg2 ;
  std::vector<double >::value_type *arg3 = 0 ;
  std::vector<double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vectorDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vVector3_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::vector3 > *)new std::vector<OpenBabel::vector3 >();
  *(std::vector<OpenBabel::vector3 > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vVector3_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 >::size_type arg1 ;
  std::vector<OpenBabel::vector3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::vector3 >::size_type)jarg1; 
  result = (std::vector<OpenBabel::vector3 > *)new std::vector<OpenBabel::vector3 >(arg1);
  *(std::vector<OpenBabel::vector3 > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vVector3_1size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  std::vector<OpenBabel::vector3 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  result = ((std::vector<OpenBabel::vector3 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vVector3_1capacity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  std::vector<OpenBabel::vector3 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  result = ((std::vector<OpenBabel::vector3 > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vVector3_1reserve___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  std::vector<OpenBabel::vector3 >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::vector3 >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vVector3_1isEmpty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::vector3 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vVector3_1clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vVector3_1add___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  std::vector<OpenBabel::vector3 >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::vector3 >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::vector3 >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::vector3 >::value_type const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vVector3_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::vector3 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::vector3 >::const_reference _result_ref = std_vector_Sl_OpenBabel_vector3_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::vector3 >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::vector3 >::value_type **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vVector3_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::vector3 >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::vector3 >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::vector3 >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_vector3_Sg__set(arg1,arg2,(OpenBabel::vector3 const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vVector3___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorMol_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBMol > *)new std::vector<OpenBabel::OBMol >();
  *(std::vector<OpenBabel::OBMol > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorMol_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol >::size_type arg1 ;
  std::vector<OpenBabel::OBMol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBMol >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBMol > *)new std::vector<OpenBabel::OBMol >(arg1);
  *(std::vector<OpenBabel::OBMol > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorMol_1size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  std::vector<OpenBabel::OBMol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBMol > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorMol_1capacity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  std::vector<OpenBabel::OBMol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBMol > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorMol_1reserve___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  std::vector<OpenBabel::OBMol >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBMol >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vectorMol_1isEmpty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBMol > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorMol_1clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorMol_1add___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  std::vector<OpenBabel::OBMol >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBMol >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBMol >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::OBMol >::value_type const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorMol_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBMol >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBMol >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBMol_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBMol >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBMol >::value_type **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorMol_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBMol >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::OBMol >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBMol >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_OBMol_Sg__set(arg1,arg2,(OpenBabel::OBMol const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vectorMol___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorBond_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBBond > *)new std::vector<OpenBabel::OBBond >();
  *(std::vector<OpenBabel::OBBond > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorBond_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond >::size_type arg1 ;
  std::vector<OpenBabel::OBBond > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBBond >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBBond > *)new std::vector<OpenBabel::OBBond >(arg1);
  *(std::vector<OpenBabel::OBBond > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorBond_1size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  std::vector<OpenBabel::OBBond >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBBond > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorBond_1capacity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  std::vector<OpenBabel::OBBond >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBBond > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorBond_1reserve___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  std::vector<OpenBabel::OBBond >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBBond >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vectorBond_1isEmpty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBBond > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorBond_1clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorBond_1add___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  std::vector<OpenBabel::OBBond >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBBond >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBBond >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::OBBond >::value_type const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorBond_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBBond >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBBond >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBBond_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBBond >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBBond >::value_type **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorBond_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBBond >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::OBBond >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBBond >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_OBBond_Sg__set(arg1,arg2,(OpenBabel::OBBond const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vectorBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorResidue_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBResidue > *)new std::vector<OpenBabel::OBResidue >();
  *(std::vector<OpenBabel::OBResidue > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorResidue_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue >::size_type arg1 ;
  std::vector<OpenBabel::OBResidue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBResidue >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBResidue > *)new std::vector<OpenBabel::OBResidue >(arg1);
  *(std::vector<OpenBabel::OBResidue > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorResidue_1size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  std::vector<OpenBabel::OBResidue >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBResidue > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorResidue_1capacity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  std::vector<OpenBabel::OBResidue >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBResidue > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorResidue_1reserve___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  std::vector<OpenBabel::OBResidue >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBResidue >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vectorResidue_1isEmpty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBResidue > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorResidue_1clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorResidue_1add___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  std::vector<OpenBabel::OBResidue >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBResidue >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBResidue >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::OBResidue >::value_type const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorResidue_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBResidue >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBResidue >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBResidue_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBResidue >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBResidue >::value_type **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorResidue_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBResidue >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::OBResidue >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBResidue >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_OBResidue_Sg__set(arg1,arg2,(OpenBabel::OBResidue const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vectorResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorRing_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBRing > *)new std::vector<OpenBabel::OBRing >();
  *(std::vector<OpenBabel::OBRing > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorRing_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing >::size_type arg1 ;
  std::vector<OpenBabel::OBRing > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBRing >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBRing > *)new std::vector<OpenBabel::OBRing >(arg1);
  *(std::vector<OpenBabel::OBRing > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorRing_1size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  std::vector<OpenBabel::OBRing >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBRing > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorRing_1capacity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  std::vector<OpenBabel::OBRing >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBRing > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorRing_1reserve___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  std::vector<OpenBabel::OBRing >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBRing >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vectorRing_1isEmpty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBRing > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorRing_1clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorRing_1add___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  std::vector<OpenBabel::OBRing >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBRing >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBRing >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::OBRing >::value_type const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorRing_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBRing >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBRing >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBRing_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBRing >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBRing >::value_type **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorRing_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBRing >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::OBRing >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBRing >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_OBRing_Sg__set(arg1,arg2,(OpenBabel::OBRing const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vectorRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBGenericData * > *)new std::vector<OpenBabel::OBGenericData * >();
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vectorData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * >::size_type arg1 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBGenericData * >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBGenericData * > *)new std::vector<OpenBabel::OBGenericData * >(arg1);
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorData_1size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  std::vector<OpenBabel::OBGenericData * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBGenericData * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorData_1capacity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  std::vector<OpenBabel::OBGenericData * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBGenericData * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorData_1reserve___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  std::vector<OpenBabel::OBGenericData * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBGenericData * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vectorData_1isEmpty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBGenericData * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorData_1clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorData_1add___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  std::vector<OpenBabel::OBGenericData * >::value_type *arg2 = 0 ;
  std::vector<OpenBabel::OBGenericData * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  temp2 = *(std::vector<OpenBabel::OBGenericData * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<OpenBabel::OBGenericData * >::value_type const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vectorData_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBGenericData * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBGenericData * >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBGenericData * >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBGenericData * >::value_type *)&jresult = *result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vectorData_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBGenericData * >::value_type *arg3 = 0 ;
  std::vector<OpenBabel::OBGenericData * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector<OpenBabel::OBGenericData * >::value_type *)&jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__set(arg1,arg2,(OpenBabel::OBGenericData *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vectorData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBGlobalDataBase___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBGlobalDataBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBGlobalDataBase *)new OpenBabel::OBGlobalDataBase();
  *(OpenBabel::OBGlobalDataBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBGlobalDataBase___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBGlobalDataBase_1Init___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  (arg1)->Init();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBGlobalDataBase_1GetSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBGlobalDataBase_1SetReadDirectory___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetReadDirectory(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBGlobalDataBase_1SetEnvironmentVariable___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetEnvironmentVariable(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBGlobalDataBase_1ParseLine___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBElement_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBElement *)new OpenBabel::OBElement();
  *(OpenBabel::OBElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBElement_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jdouble jarg3, jdouble jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11, jdouble jarg12, jstring jarg13) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  std::string arg13 ;
  OpenBabel::OBElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  if(!jarg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg13_pstr = (const char *)jenv->GetStringUTFChars(jarg13, 0); 
  if (!arg13_pstr) return 0;
  arg13 =  std::string(arg13_pstr);
  jenv->ReleaseStringUTFChars(jarg13, arg13_pstr); 
  result = (OpenBabel::OBElement *)new OpenBabel::OBElement(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  *(OpenBabel::OBElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (int)(arg1)->GetAtomicNum();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetSymbol___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (char *)(arg1)->GetSymbol();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetCovalentRad___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetCovalentRad();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetVdwRad___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetVdwRad();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetMaxBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (int)(arg1)->GetMaxBonds();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetElectroNeg___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetElectroNeg();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetIonization___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetIonization();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetElectronAffinity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetElectronAffinity();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetName___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (arg1)->GetName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetRed___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetRed();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetGreen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetGreen();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElement_1GetBlue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetBlue();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBElement___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBElementTable___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBElementTable *)new OpenBabel::OBElementTable();
  *(OpenBabel::OBElementTable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBElementTable___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1ParseLine___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetNumberOfElements___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  result = (unsigned int)(arg1)->GetNumberOfElements();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetAtomicNum_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetAtomicNum((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetAtomicNum_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (int)(arg1)->GetAtomicNum((char const *)arg2,*arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetSymbol___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetSymbol(arg2);
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetVdwRad___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetVdwRad(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetCovalentRad___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetCovalentRad(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetMass___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1CorrectedBondRad_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->CorrectedBondRad(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1CorrectedBondRad_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->CorrectedBondRad(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1CorrectedVdwRad_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->CorrectedVdwRad(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1CorrectedVdwRad_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->CorrectedVdwRad(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetMaxBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetMaxBonds(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetElectroNeg___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetElectroNeg(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetIonization___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetIonization(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetElectronAffinity___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetElectronAffinity(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetRGB___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  std::vector<double > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetRGB(arg2);
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBElementTable_1GetName___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBIsotopeTable___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBIsotopeTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBIsotopeTable *)new OpenBabel::OBIsotopeTable();
  *(OpenBabel::OBIsotopeTable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBIsotopeTable___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBIsotopeTable_1GetSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBIsotopeTable_1ParseLine___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBIsotopeTable_1GetExactMass_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (double)(arg1)->GetExactMass(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBIsotopeTable_1GetExactMass_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  unsigned int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)(arg1)->GetExactMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBTypeTable___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBTypeTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBTypeTable *)new OpenBabel::OBTypeTable();
  *(OpenBabel::OBTypeTable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBTypeTable___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBTypeTable_1ParseLine___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBTypeTable_1GetSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTypeTable_1SetFromType___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->SetFromType((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTypeTable_1SetToType___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->SetToType((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTypeTable_1Translate_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->Translate(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTypeTable_1Translate_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->Translate(*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBTypeTable_1GetFromType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  result = (arg1)->GetFromType();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBTypeTable_1GetToType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  result = (arg1)->GetToType();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBResidueData___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBResidueData *)new OpenBabel::OBResidueData();
  *(OpenBabel::OBResidueData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueData_1ParseLine___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueData_1GetSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueData_1SetResName___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->SetResName((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueData_1LookupBO_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->LookupBO((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueData_1LookupBO_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->LookupBO((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueData_1LookupType___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg4 = *(int **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->LookupType((std::string const &)*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueData_1AssignBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AssignBonds(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBResidueData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OpenDatafile___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  std::ifstream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ifstream **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = OpenBabel::OpenDatafile(*arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_FILE_1SEP_1CHAR_1get___(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "/";
  
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBStopwatch_1Start___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1; 
  (arg1)->Start();
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBStopwatch_1Lap___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1; 
  result = (double)(arg1)->Lap();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBStopwatch_1Elapsed___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1; 
  result = (double)(arg1)->Elapsed();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBStopwatch___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBStopwatch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBStopwatch *)new OpenBabel::OBStopwatch();
  *(OpenBabel::OBStopwatch **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBStopwatch___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSqrtTbl_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSqrtTbl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSqrtTbl *)new OpenBabel::OBSqrtTbl();
  *(OpenBabel::OBSqrtTbl **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSqrtTbl_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  OpenBabel::OBSqrtTbl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenBabel::OBSqrtTbl *)new OpenBabel::OBSqrtTbl(arg1,arg2);
  *(OpenBabel::OBSqrtTbl **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBSqrtTbl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSqrtTbl **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBSqrtTbl_1Sqrt___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSqrtTbl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((OpenBabel::OBSqrtTbl const *)arg1)->Sqrt(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSqrtTbl_1Init___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSqrtTbl **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->Init(arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_DoubleType_1hi_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::DoubleType **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->hi = arg2;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_DoubleType_1hi_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::DoubleType **)&jarg1; 
  result = (unsigned int) ((arg1)->hi);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_DoubleType_1lo_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::DoubleType **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->lo = arg2;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_DoubleType_1lo_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::DoubleType **)&jarg1; 
  result = (unsigned int) ((arg1)->lo);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1DoubleType___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::DoubleType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::DoubleType *)new OpenBabel::DoubleType();
  *(OpenBabel::DoubleType **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1DoubleType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::DoubleType **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_DoubleMultiply___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  OpenBabel::DoubleType *arg3 = (OpenBabel::DoubleType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(OpenBabel::DoubleType **)&jarg3; 
  OpenBabel::DoubleMultiply(arg1,arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_DoubleAdd___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::DoubleType **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  OpenBabel::DoubleAdd(arg1,arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_DoubleModulus___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::DoubleType *arg1 = (OpenBabel::DoubleType *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::DoubleType **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)OpenBabel::DoubleModulus(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBRandom_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  OpenBabel::OBRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (OpenBabel::OBRandom *)new OpenBabel::OBRandom(arg1);
  *(OpenBabel::OBRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBRandom_1_1SWIG_11___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBRandom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBRandom *)new OpenBabel::OBRandom();
  *(OpenBabel::OBRandom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRandom_1Seed___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRandom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Seed(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRandom_1TimeSeed___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRandom **)&jarg1; 
  (arg1)->TimeSeed();
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBRandom_1NextInt___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRandom **)&jarg1; 
  result = (int)(arg1)->NextInt();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBRandom_1NextFloat___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRandom **)&jarg1; 
  result = (double)(arg1)->NextFloat();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBRandom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRandom *arg1 = (OpenBabel::OBRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRandom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_PI_1get___(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) (3.1415926535897932384626433);
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_RAD_1TO_1DEG_1get___(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) (180.0/(3.1415926535897932384626433));
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_DEG_1TO_1RAD_1get___(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) ((3.1415926535897932384626433)/180.0);
  
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vector3_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1,arg2,arg3);
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vector3_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1,arg2);
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vector3_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1);
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vector3_1_1SWIG_13___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::vector3 *)new OpenBabel::vector3();
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1vector3_1_1SWIG_14___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *arg1 = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3((OpenBabel::vector3 const &)*arg1);
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1Set_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1Set_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->Set((double const *)arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1SetX___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetX(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1SetY___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetY(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1SetZ___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetZ(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1Get___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->Get(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1IsApprox___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)((OpenBabel::vector3 const *)arg1)->IsApprox((OpenBabel::vector3 const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1AsArray___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (double *)(arg1)->AsArray();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1randomUnitVector_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::OBRandom *arg2 = (OpenBabel::OBRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::OBRandom **)&jarg2; 
  (arg1)->randomUnitVector(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1randomUnitVector_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  (arg1)->randomUnitVector();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1normalize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (arg1)->normalize();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1CanBeNormalized___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (bool)((OpenBabel::vector3 const *)arg1)->CanBeNormalized();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1length___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (double)((OpenBabel::vector3 const *)arg1)->length();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1length_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (double)((OpenBabel::vector3 const *)arg1)->length_2();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1x___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (double)((OpenBabel::vector3 const *)arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1y___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (double)((OpenBabel::vector3 const *)arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1z___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (double)((OpenBabel::vector3 const *)arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1distSq___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  result = (double)((OpenBabel::vector3 const *)arg1)->distSq((OpenBabel::vector3 const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_vector3_1createOrthoVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (bool)((OpenBabel::vector3 const *)arg1)->createOrthoVector(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1vector3___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_Point2Plane___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 arg1 ;
  OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 arg4 ;
  double result;
  OpenBabel::vector3 *argp1 ;
  OpenBabel::vector3 *argp2 ;
  OpenBabel::vector3 *argp3 ;
  OpenBabel::vector3 *argp4 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(OpenBabel::vector3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(OpenBabel::vector3 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(OpenBabel::vector3 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg4 = *argp4; 
  result = (double)OpenBabel::Point2Plane(arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_VZero_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::vector3 const &_result_ref = OpenBabel::VZero;
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_VX_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::vector3 const &_result_ref = OpenBabel::VX;
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_VY_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::vector3 const &_result_ref = OpenBabel::VY;
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_VZ_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::vector3 const &_result_ref = OpenBabel::VZ;
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_Trim___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  {
    std::string &_result_ref = OpenBabel::Trim(*arg1);
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_UndefinedData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::UndefinedData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_PairData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::PairData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_EnergyData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::EnergyData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CommentData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CommentData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ConformerData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::ConformerData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ExternalBondData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::ExternalBondData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_RotamerList_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::RotamerList;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_VirtualBondData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::VirtualBondData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_RingData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::RingData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_TorsionData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::TorsionData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_AngleData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::AngleData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SerialNums_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::SerialNums;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_UnitCell_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::UnitCell;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SpinData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::SpinData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ChargeData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::ChargeData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SymmetryData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::SymmetryData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ChiralData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::ChiralData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OccupationData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::OccupationData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_DensityData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::DensityData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ElectronicData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::ElectronicData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_VibrationData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::VibrationData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_RotationData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::RotationData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_NuclearData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::NuclearData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SetData_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::SetData;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData0_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData0;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData1_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData1;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData2_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData2;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData3_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData3;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData4_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData4;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData5_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData5;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData6_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData6;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData7_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData7;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData8_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData8;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData9_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData9;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData10_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData10;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData11_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData11;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData12_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData12;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData13_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData13;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData14_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData14;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CustomData15_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBGenericDataType::CustomData15;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBGenericData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1,arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBGenericData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBGenericData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData();
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBGenericData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBGenericData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBGenericData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBGenericData_1SetAttribute___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetAttribute((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBGenericData_1GetAttribute___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBGenericData const *)arg1)->GetAttribute();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBGenericData_1GetDataType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBGenericData const *)arg1)->GetDataType();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBGenericData_1GetValue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBGenericData const *)arg1)->GetValue();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBCommentData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBCommentData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBCommentData *)new OpenBabel::OBCommentData();
  *(OpenBabel::OBCommentData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBCommentData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBCommentData *arg1 = 0 ;
  OpenBabel::OBCommentData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBCommentData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBCommentData *)new OpenBabel::OBCommentData((OpenBabel::OBCommentData const &)*arg1);
  *(OpenBabel::OBCommentData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBCommentData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBCommentData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBCommentData_1SetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetData((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBCommentData_1GetData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBCommentData const *)arg1)->GetData();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBCommentData_1GetValue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBCommentData const *)arg1)->GetValue();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBCommentData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBExternalBond_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond();
  *(OpenBabel::OBExternalBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBExternalBond_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  int arg3 ;
  OpenBabel::OBExternalBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond(arg1,arg2,arg3);
  *(OpenBabel::OBExternalBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBExternalBond_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBond *arg1 = 0 ;
  OpenBabel::OBExternalBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBExternalBond const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond((OpenBabel::OBExternalBond const &)*arg1);
  *(OpenBabel::OBExternalBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBExternalBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBExternalBond_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  result = (int)((OpenBabel::OBExternalBond const *)arg1)->GetIdx();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBExternalBond_1GetAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBExternalBond const *)arg1)->GetAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBExternalBond_1GetBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBExternalBond const *)arg1)->GetBond();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBExternalBond_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBExternalBond_1SetAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->SetAtom(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBExternalBond_1SetBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (arg1)->SetBond(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBExternalBondData___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBondData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBExternalBondData *)new OpenBabel::OBExternalBondData();
  *(OpenBabel::OBExternalBondData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBExternalBondData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBExternalBondData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBExternalBondData_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetData(arg2,arg3,arg4);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBExternalBondData_1GetData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  std::vector<OpenBabel::OBExternalBond > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1; 
  result = (std::vector<OpenBabel::OBExternalBond > *)(arg1)->GetData();
  *(std::vector<OpenBabel::OBExternalBond > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBExternalBondData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBPairData___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBPairData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBPairData *)new OpenBabel::OBPairData();
  *(OpenBabel::OBPairData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBPairData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBPairData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBPairData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBPairData_1SetValue_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBPairData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetValue((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBPairData_1GetValue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBPairData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBPairData const *)arg1)->GetValue();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBPairData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBPairData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSetData___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSetData *)new OpenBabel::OBSetData();
  *(OpenBabel::OBSetData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSetData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBSetData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSetData_1AddData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (arg1)->AddData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSetData_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSetData_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSetData_1GetData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > const &_result_ref = ((OpenBabel::OBSetData const *)arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSetData_1GetBegin___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  result = (arg1)->GetBegin();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSetData_1GetEnd___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  result = (arg1)->GetEnd();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSetData_1DeleteData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBSetData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBVirtualBond_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBVirtualBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond();
  *(OpenBabel::OBVirtualBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBVirtualBond_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBVirtualBond const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBVirtualBond_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  OpenBabel::OBVirtualBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond(arg1,arg2,arg3,arg4);
  *(OpenBabel::OBVirtualBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBVirtualBond_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  OpenBabel::OBVirtualBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond(arg1,arg2,arg3);
  *(OpenBabel::OBVirtualBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBVirtualBond_1GetBgn___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  result = (int)(arg1)->GetBgn();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBVirtualBond_1GetEnd___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  result = (int)(arg1)->GetEnd();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBVirtualBond_1GetOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  result = (int)(arg1)->GetOrder();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBVirtualBond_1GetStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  result = (int)(arg1)->GetStereo();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBVirtualBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBRingData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBRingData *)new OpenBabel::OBRingData();
  *(OpenBabel::OBRingData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBRingData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = 0 ;
  OpenBabel::OBRingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRingData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBRingData *)new OpenBabel::OBRingData((OpenBabel::OBRingData const &)*arg1);
  *(OpenBabel::OBRingData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBRingData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBRingData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBRingData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRingData_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector<OpenBabel::OBRing * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBRing * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBRing * > & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRingData_1PushBack___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  OpenBabel::OBRing *arg2 = (OpenBabel::OBRing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  arg2 = *(OpenBabel::OBRing **)&jarg2; 
  (arg1)->PushBack(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBRingData_1GetData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector<OpenBabel::OBRing * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  {
    std::vector<OpenBabel::OBRing * > &_result_ref = (arg1)->GetData();
    result = (std::vector<OpenBabel::OBRing * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBRing * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBUnitCell_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBUnitCell *)new OpenBabel::OBUnitCell();
  *(OpenBabel::OBUnitCell **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBUnitCell_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = 0 ;
  OpenBabel::OBUnitCell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBUnitCell const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBUnitCell *)new OpenBabel::OBUnitCell((OpenBabel::OBUnitCell const &)*arg1);
  *(OpenBabel::OBUnitCell **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBUnitCell const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBUnitCell___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1SetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->SetData(arg2,arg3,arg4,arg5,arg6,arg7);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1SetData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 arg4 ;
  OpenBabel::vector3 const *argp2 ;
  OpenBabel::vector3 const *argp3 ;
  OpenBabel::vector3 const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(OpenBabel::vector3 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(OpenBabel::vector3 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->SetData(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1SetOffset___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetOffset(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1SetSpaceGroup_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetSpaceGroup(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1SetSpaceGroup_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSpaceGroup(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1SetLatticeType___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::OBUnitCell::LatticeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (OpenBabel::OBUnitCell::LatticeType)jarg2; 
  (arg1)->SetLatticeType(arg2);
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetA___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetA();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetB___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetB();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetC___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetC();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetAlpha___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetAlpha();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetBeta___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetBeta();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetGamma___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetGamma();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetOffset___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetOffset();
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetSpaceGroup___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetSpaceGroup();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetLatticeType_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  int arg2 ;
  OpenBabel::OBUnitCell::LatticeType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBUnitCell::LatticeType)(arg1)->GetLatticeType(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetLatticeType_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::OBUnitCell::LatticeType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (OpenBabel::OBUnitCell::LatticeType)(arg1)->GetLatticeType();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetCellVectors___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::vector<OpenBabel::vector3 > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetCellVectors();
  *(std::vector<OpenBabel::vector3 > **)&jresult = new std::vector<OpenBabel::vector3 >((std::vector<OpenBabel::vector3 > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetCellMatrix___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::matrix3x3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetCellMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((OpenBabel::matrix3x3 &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetOrthoMatrix___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::matrix3x3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetOrthoMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((OpenBabel::matrix3x3 &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetFractionalMatrix___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::matrix3x3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetFractionalMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((OpenBabel::matrix3x3 &)result); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetSpaceGroupNumber___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->GetSpaceGroupNumber(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBUnitCell_1GetCellVolume___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetCellVolume();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBConformerData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBConformerData *)new OpenBabel::OBConformerData();
  *(OpenBabel::OBConformerData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBConformerData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = 0 ;
  OpenBabel::OBConformerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBConformerData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBConformerData *)new OpenBabel::OBConformerData((OpenBabel::OBConformerData const &)*arg1);
  *(OpenBabel::OBConformerData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBConformerData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBConformerData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1SetDimension___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<unsigned short > > arg2 ;
  std::vector<unsigned short > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<unsigned short > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<unsigned short >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetDimension(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1SetEnergies___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector<double > arg2 ;
  std::vector<double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<double >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetEnergies(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1SetForces___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > arg2 ;
  std::vector<std::vector<OpenBabel::vector3 > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<std::vector<OpenBabel::vector3 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<std::vector<OpenBabel::vector3 > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetForces(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1SetVelocities___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > arg2 ;
  std::vector<std::vector<OpenBabel::vector3 > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<std::vector<OpenBabel::vector3 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<std::vector<OpenBabel::vector3 > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetVelocities(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1SetDisplacements___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > arg2 ;
  std::vector<std::vector<OpenBabel::vector3 > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<std::vector<OpenBabel::vector3 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<std::vector<OpenBabel::vector3 > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetDisplacements(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::string > > arg2 ;
  std::vector<std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<std::string >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1GetDimension___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<unsigned short > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetDimension();
  *(std::vector<unsigned short > **)&jresult = new std::vector<unsigned short >((std::vector<unsigned short > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1GetEnergies___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector<double > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetEnergies();
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1GetForces___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetForces();
  *(std::vector<std::vector<OpenBabel::vector3 > > **)&jresult = new std::vector<std::vector<OpenBabel::vector3 > >((std::vector<std::vector<OpenBabel::vector3 > > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1GetVelocities___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetVelocities();
  *(std::vector<std::vector<OpenBabel::vector3 > > **)&jresult = new std::vector<std::vector<OpenBabel::vector3 > >((std::vector<std::vector<OpenBabel::vector3 > > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1GetDisplacements___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetDisplacements();
  *(std::vector<std::vector<OpenBabel::vector3 > > **)&jresult = new std::vector<std::vector<OpenBabel::vector3 > >((std::vector<std::vector<OpenBabel::vector3 > > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConformerData_1GetData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::string > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetData();
  *(std::vector<std::string > **)&jresult = new std::vector<std::string >((std::vector<std::string > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSymmetryData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSymmetryData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSymmetryData *)new OpenBabel::OBSymmetryData();
  *(OpenBabel::OBSymmetryData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSymmetryData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSymmetryData *arg1 = 0 ;
  OpenBabel::OBSymmetryData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSymmetryData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBSymmetryData *)new OpenBabel::OBSymmetryData((OpenBabel::OBSymmetryData const &)*arg1);
  *(OpenBabel::OBSymmetryData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSymmetryData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBSymmetryData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBSymmetryData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSymmetryData_1SetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->SetData(arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSymmetryData_1SetData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSymmetryData_1SetPointGroup___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetPointGroup(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSymmetryData_1SetSpaceGroup___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetSpaceGroup(arg2);
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBSymmetryData_1GetPointGroup___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  result = (arg1)->GetPointGroup();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBSymmetryData_1GetSpaceGroup___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  result = (arg1)->GetSpaceGroup();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBTorsion_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = 0 ;
  OpenBabel::OBTorsion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTorsion const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBTorsion *)new OpenBabel::OBTorsion((OpenBabel::OBTorsion const &)*arg1);
  *(OpenBabel::OBTorsion **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBTorsion___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  (arg1)->Clear();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1Empty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (bool)(arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1AddTorsion_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = *(OpenBabel::OBAtom **)&jarg5; 
  result = (bool)(arg1)->AddTorsion(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1AddTorsion_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::quad<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(OpenBabel::quad<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::quad<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AddTorsion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1SetAngle_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double arg2 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->SetAngle(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1SetAngle_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->SetAngle(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(arg1)->SetData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1GetAngle_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double *arg2 = 0 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->GetAngle(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1GetAngle_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->GetAngle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1GetBondIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (unsigned int)(arg1)->GetBondIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1GetSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBTorsion const *)arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1GetBC___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  SwigValueWrapper<std::pair<OpenBabel::OBAtom *,OpenBabel::OBAtom * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (arg1)->GetBC();
  *(std::pair<OpenBabel::OBAtom *,OpenBabel::OBAtom * > **)&jresult = new std::pair<OpenBabel::OBAtom *,OpenBabel::OBAtom * >((std::pair<OpenBabel::OBAtom *,OpenBabel::OBAtom * > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1GetADs___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (arg1)->GetADs();
  *(std::vector<OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > **)&jresult = new std::vector<OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > >((std::vector<OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > &)result); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsion_1IsProtonRotor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (bool)(arg1)->IsProtonRotor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsionData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBTorsionData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsionData_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  (arg1)->Clear();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsionData_1GetData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBTorsion > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  result = ((OpenBabel::OBTorsionData const *)arg1)->GetData();
  *(std::vector<OpenBabel::OBTorsion > **)&jresult = new std::vector<OpenBabel::OBTorsion >((std::vector<OpenBabel::OBTorsion > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsionData_1GetSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBTorsionData const *)arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsionData_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  OpenBabel::OBTorsion *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  arg2 = *(OpenBabel::OBTorsion **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTorsion & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBTorsionData_1FillTorsionArray___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  std::vector<std::vector<unsigned int > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  arg2 = *(std::vector<std::vector<unsigned int > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<unsigned int > > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->FillTorsionArray(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBTorsionData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBAngle_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAngle *arg1 = 0 ;
  OpenBabel::OBAngle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngle **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAngle const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAngle *)new OpenBabel::OBAngle((OpenBabel::OBAngle const &)*arg1);
  *(OpenBabel::OBAngle **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAngle_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  (arg1)->Clear();
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAngle_1GetAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  result = (double)((OpenBabel::OBAngle const *)arg1)->GetAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAngle_1SetAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetAngle(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAngle_1SetAtoms_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  (arg1)->SetAtoms(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAngle_1SetAtoms_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  arg2 = *(OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > & reference is null");
    return ;
  } 
  (arg1)->SetAtoms(*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAngleData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBAngleData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAngleData_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  (arg1)->Clear();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAngleData_1FillAngleArray___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  int **arg2 = (int **) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  arg2 = *(int ***)&jarg2; 
  arg3 = *(unsigned int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  result = (unsigned int)(arg1)->FillAngleArray(arg2,*arg3);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAngleData_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  OpenBabel::OBAngle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  arg2 = *(OpenBabel::OBAngle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAngle & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAngleData_1GetSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAngleData const *)arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBAngleData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBChiralData_1GetAtom4Refs___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  OpenBabel::atomreftype arg2 ;
  SwigValueWrapper<std::vector<unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = (OpenBabel::atomreftype)jarg2; 
  result = ((OpenBabel::OBChiralData const *)arg1)->GetAtom4Refs(arg2);
  *(std::vector<unsigned int > **)&jresult = new std::vector<unsigned int >((std::vector<unsigned int > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBChiralData_1GetAtomRef___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  int arg2 ;
  OpenBabel::atomreftype arg3 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OpenBabel::atomreftype)jarg3; 
  result = (unsigned int)(arg1)->GetAtomRef(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBChiralData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBChiralData *)new OpenBabel::OBChiralData();
  *(OpenBabel::OBChiralData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBChiralData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = 0 ;
  OpenBabel::OBChiralData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBChiralData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBChiralData *)new OpenBabel::OBChiralData((OpenBabel::OBChiralData const &)*arg1);
  *(OpenBabel::OBChiralData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBChiralData_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBChiralData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBChiralData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBChiralData_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  (arg1)->Clear();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBChiralData_1SetAtom4Refs___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  SwigValueWrapper<std::vector<unsigned int > > arg2 ;
  OpenBabel::atomreftype arg3 ;
  bool result;
  std::vector<unsigned int > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  argp2 = *(std::vector<unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (OpenBabel::atomreftype)jarg3; 
  result = (bool)(arg1)->SetAtom4Refs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBChiralData_1AddAtomRef___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  unsigned int arg2 ;
  OpenBabel::atomreftype arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (OpenBabel::atomreftype)jarg3; 
  result = (int)(arg1)->AddAtomRef(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBChiralData_1GetSize___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  OpenBabel::atomreftype arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = (OpenBabel::atomreftype)jarg2; 
  result = (unsigned int)((OpenBabel::OBChiralData const *)arg1)->GetSize(arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSerialNums_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSerialNums *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSerialNums *)new OpenBabel::OBSerialNums();
  *(OpenBabel::OBSerialNums **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSerialNums_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSerialNums *arg1 = 0 ;
  OpenBabel::OBSerialNums *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSerialNums const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBSerialNums *)new OpenBabel::OBSerialNums((OpenBabel::OBSerialNums const &)*arg1);
  *(OpenBabel::OBSerialNums **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSerialNums_1Clone___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBSerialNums const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSerialNums_1GetData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  std::map<int,OpenBabel::OBAtom * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1; 
  {
    std::map<int,OpenBabel::OBAtom * > &_result_ref = (arg1)->GetData();
    result = (std::map<int,OpenBabel::OBAtom * > *) &_result_ref;
  }
  *(std::map<int,OpenBabel::OBAtom * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSerialNums_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  std::map<int,OpenBabel::OBAtom * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1; 
  arg2 = *(std::map<int,OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map<int,OpenBabel::OBAtom * > & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBSerialNums___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBBase___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1ClassDescription___(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenBabel::OBBase::ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1HasData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->HasData((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1HasData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1DeleteData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1DeleteData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1DeleteData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (arg1)->DeleteData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1DataSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBase const *)arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1GetData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1GetData_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1BeginData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  result = (arg1)->BeginData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBase_1EndData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  result = (arg1)->EndData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBBase___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBBase *)new OpenBabel::OBBase();
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1Visit_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Visit = arg2;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1Visit_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (bool) ((arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBNodeBase___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBNodeBase *)new OpenBabel::OBNodeBase();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBNodeBase___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIdx(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (OpenBabel::OBGraphBase *)(arg1)->GetParent();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  OpenBabel::OBGraphBase *arg2 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBGraphBase **)&jarg2; 
  (arg1)->SetParent(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1AddEdge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  (arg1)->AddEdge(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1GetValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1IsConnected___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  result = (bool)(arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1Error___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Error(arg2);
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1GetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (int)((OpenBabel::OBNodeBase const *)arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1ExplicitHydrogenCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1ImplicitHydrogenCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1GetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1GetHvyValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1KBOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1GetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1MemberOfRingCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1GetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBNodeBase const *)arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1SetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (arg1)->SetMatch(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  (arg1)->SetAromatic();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1IsInRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBNodeBase const *)arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (bool)((OpenBabel::OBNodeBase const *)arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (bool)((OpenBabel::OBNodeBase const *)arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1Eval___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  result = (bool)((OpenBabel::OBNodeBase const *)arg1)->Eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBNodeBase_1GetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(arg1)->GetMatch();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1Visit_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Visit = arg2;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1Visit_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  result = (bool) ((arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBEdgeBase_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBEdgeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBEdgeBase *)new OpenBabel::OBEdgeBase();
  *(OpenBabel::OBEdgeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBEdgeBase_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBNodeBase *arg1 = (OpenBabel::OBNodeBase *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  OpenBabel::OBEdgeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBNodeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  result = (OpenBabel::OBEdgeBase *)new OpenBabel::OBEdgeBase(arg1,arg2);
  *(OpenBabel::OBEdgeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBEdgeBase___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  result = (OpenBabel::OBGraphBase *)(arg1)->GetParent();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  OpenBabel::OBGraphBase *arg2 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBGraphBase **)&jarg2; 
  (arg1)->SetParent(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  result = (unsigned int)(arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1SetBgn___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (arg1)->SetBgn(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1SetEnd___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (arg1)->SetEnd(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1SwapEnds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  (arg1)->SwapEnds();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1GetBgn___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(arg1)->GetBgn();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1GetEnd___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(arg1)->GetEnd();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1Error___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Error(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1SetClosure___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  (arg1)->SetClosure();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  result = (bool)((OpenBabel::OBEdgeBase const *)arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  result = (bool)((OpenBabel::OBEdgeBase const *)arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1IsClosure___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  result = (bool)(arg1)->IsClosure();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1Eval___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  result = (bool)(arg1)->Eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBEdgeBase_1GetBO___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBEdgeBase *arg1 = (OpenBabel::OBEdgeBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBEdgeBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBEdgeBase const *)arg1)->GetBO();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBGraphBase_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBGraphBase *)new OpenBabel::OBGraphBase();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBGraphBase_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBGraphBase *arg1 = 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGraphBase **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBGraphBase const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBGraphBase *)new OpenBabel::OBGraphBase((OpenBabel::OBGraphBase const &)*arg1);
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBGraphBase___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGraphBase *arg1 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGraphBase **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBGraphBase_1NumNodes___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBGraphBase *arg1 = (OpenBabel::OBGraphBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGraphBase **)&jarg1; 
  result = (unsigned int)(arg1)->NumNodes();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBGraphBase_1NumEdges___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBGraphBase *arg1 = (OpenBabel::OBGraphBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGraphBase **)&jarg1; 
  result = (unsigned int)(arg1)->NumEdges();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBGraphBase_1ResetVisitFlags___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGraphBase *arg1 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGraphBase **)&jarg1; 
  (arg1)->ResetVisitFlags();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBGraphBase_1SetVisitLock___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBGraphBase *arg1 = (OpenBabel::OBGraphBase *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGraphBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->SetVisitLock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBGraphBase_1GetVisitLock___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBGraphBase *arg1 = (OpenBabel::OBGraphBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGraphBase **)&jarg1; 
  result = (bool)(arg1)->GetVisitLock();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBError_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  OpenBabel::obMessageLevel arg6 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (OpenBabel::obMessageLevel)jarg6; 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBError_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBError_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBError_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBError_1_1SWIG_14___(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBError_1_1SWIG_15___(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBError_1_1SWIG_16___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBError *)new OpenBabel::OBError();
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBError_1message___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = ((OpenBabel::OBError const *)arg1)->message();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBError_1GetMethod___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetMethod();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBError_1GetError___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetError();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBError_1GetExplanation___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetExplanation();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBError_1GetPossibleCause___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetPossibleCause();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBError_1GetSuggestedRemedy___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetSuggestedRemedy();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBError_1GetLevel___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  OpenBabel::obMessageLevel result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (OpenBabel::obMessageLevel)(arg1)->GetLevel();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBError___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMessageHandler___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMessageHandler *)new OpenBabel::OBMessageHandler();
  *(OpenBabel::OBMessageHandler **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBMessageHandler___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1ThrowError_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  OpenBabel::OBError arg2 ;
  OpenBabel::OBError *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  argp2 = *(OpenBabel::OBError **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::OBError");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->ThrowError(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1ThrowError_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  OpenBabel::obMessageLevel arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (OpenBabel::obMessageLevel)jarg4; 
  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1ThrowError_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetMessagesOfLevel___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  OpenBabel::obMessageLevel arg2 ;
  SwigValueWrapper<std::vector<std::string > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  arg2 = (OpenBabel::obMessageLevel)jarg2; 
  result = (arg1)->GetMessagesOfLevel(arg2);
  *(std::vector<std::string > **)&jresult = new std::vector<std::string >((std::vector<std::string > &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1StartLogging___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  (arg1)->StartLogging();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1StopLogging___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  (arg1)->StopLogging();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1SetMaxLogEntries___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetMaxLogEntries(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetMaxLogEntries___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetMaxLogEntries();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1ClearLog___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  (arg1)->ClearLog();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1SetOutputLevel___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  OpenBabel::obMessageLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  arg2 = (OpenBabel::obMessageLevel)jarg2; 
  (arg1)->SetOutputLevel(arg2);
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetOutputLevel___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  OpenBabel::obMessageLevel result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (OpenBabel::obMessageLevel)(arg1)->GetOutputLevel();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1SetOutputStream___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  (arg1)->SetOutputStream(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetOutputStream___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (std::ostream *)(arg1)->GetOutputStream();
  *(std::ostream **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1StartErrorWrap___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (bool)(arg1)->StartErrorWrap();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1StopErrorWrap___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (bool)(arg1)->StopErrorWrap();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetErrorMessageCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetErrorMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetWarningMessageCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetWarningMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetInfoMessageCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetInfoMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetAuditMessageCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetAuditMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetDebugMessageCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetDebugMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMessageHandler_1GetMessageSummary___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (arg1)->GetMessageSummary();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_obErrorLog_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMessageHandler *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMessageHandler const & reference is null");
    return ;
  } 
  OpenBabel::obErrorLog = *arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_obErrorLog_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBMessageHandler const &_result_ref = OpenBabel::obErrorLog;
    result = (OpenBabel::OBMessageHandler *) &_result_ref;
  }
  *(OpenBabel::OBMessageHandler **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1obLogBuf___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::obLogBuf *arg1 = (OpenBabel::obLogBuf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::obLogBuf **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1obLogBuf___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::obLogBuf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::obLogBuf *)new OpenBabel::obLogBuf();
  *(OpenBabel::obLogBuf **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1ReadMolecule___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (bool)(arg1)->ReadMolecule(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1ReadChemObject___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBConversion **)&jarg2; 
  result = (bool)(arg1)->ReadChemObject(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1WriteMolecule___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (bool)(arg1)->WriteMolecule(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1WriteChemObject___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBConversion **)&jarg2; 
  result = (bool)(arg1)->WriteChemObject(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1Description___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (char *)(arg1)->Description();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1TargetClassDescription___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (char *)(arg1)->TargetClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1GetType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  std::type_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  {
    std::type_info const &_result_ref = (arg1)->GetType();
    result = (std::type_info *) &_result_ref;
  }
  *(std::type_info **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1SpecificationURL___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (char *)(arg1)->SpecificationURL();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1GetMIMEType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (char *)(arg1)->GetMIMEType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1Flags___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (unsigned int)(arg1)->Flags();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1SkipObjects___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  int arg2 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (int)(arg1)->SkipObjects(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBFormat_1MakeNewInstance___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (OpenBabel::OBFormat *)(arg1)->MakeNewInstance();
  *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBFormat___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1CharPtrLess___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::CharPtrLess *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::CharPtrLess *)new OpenBabel::CharPtrLess();
  *(OpenBabel::CharPtrLess **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1CharPtrLess___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::CharPtrLess *arg1 = (OpenBabel::CharPtrLess *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::CharPtrLess **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBConversion_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::istream *arg1 = (std::istream *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::istream **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1,arg2);
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBConversion_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::istream *arg1 = (std::istream *) 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::istream **)&jarg1; 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1);
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBConversion_1_1SWIG_12___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion();
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBConversion_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBConversion const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion((OpenBabel::OBConversion const &)*arg1);
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBConversion___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1RegisterFormat_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1RegisterFormat_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1FindFormat___(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FindFormat((char const *)arg1);
  *(OpenBabel::OBFormat **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1FormatFromExt___(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromExt((char const *)arg1);
  *(OpenBabel::OBFormat **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1FormatFromMIME___(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromMIME((char const *)arg1);
  *(OpenBabel::OBFormat **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetNextFormat___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::Formatpos *arg1 = 0 ;
  char **arg2 = 0 ;
  OpenBabel::OBFormat **arg3 = 0 ;
  bool result;
  char *temp2 = 0 ;
  OpenBabel::OBFormat *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::Formatpos **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::Formatpos & reference is null");
    return 0;
  } 
  temp2 = *(char **)&jarg2;
  arg2 = &temp2; 
  temp3 = *(OpenBabel::OBFormat **)&jarg3;
  arg3 = &temp3; 
  result = (bool)OpenBabel::OBConversion::GetNextFormat(*arg1,(char const *&)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1Description___(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenBabel::OBConversion::Description();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetInStream___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::istream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (std::istream *)((OpenBabel::OBConversion const *)arg1)->GetInStream();
  *(std::istream **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetOutStream___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (std::ostream *)((OpenBabel::OBConversion const *)arg1)->GetOutStream();
  *(std::ostream **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetInStream___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(std::istream **)&jarg2; 
  (arg1)->SetInStream(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetOutStream___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  (arg1)->SetOutStream(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->SetInAndOutFormats((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = *(OpenBabel::OBFormat **)&jarg3; 
  result = (bool)(arg1)->SetInAndOutFormats(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetInFormat_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->SetInFormat((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetInFormat_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  result = (bool)(arg1)->SetInFormat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetOutFormat_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->SetOutFormat((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetOutFormat_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  result = (bool)(arg1)->SetOutFormat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetInFormat___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetInFormat();
  *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetOutFormat___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetOutFormat();
  *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetInFilename___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = ((OpenBabel::OBConversion const *)arg1)->GetInFilename();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetInPos___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::streampos result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = ((OpenBabel::OBConversion const *)arg1)->GetInPos();
  *(std::streampos **)&jresult = new std::streampos((std::streampos &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetInLen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = ((OpenBabel::OBConversion const *)arg1)->GetInLen();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetTitle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (char *)((OpenBabel::OBConversion const *)arg1)->GetTitle();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetAuxConv___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBConversion *)((OpenBabel::OBConversion const *)arg1)->GetAuxConv();
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetAuxConv___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBConversion **)&jarg2; 
  (arg1)->SetAuxConv(arg2);
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1IsOption_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  result = (char *)(arg1)->IsOption((char const *)arg2,arg3);
  if(result) jresult = jenv->NewStringUTF(result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1IsOption_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->IsOption((char const *)arg2);
  if(result) jresult = jenv->NewStringUTF(result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetOptions___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion::Option_type arg2 ;
  std::map<std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = (OpenBabel::OBConversion::Option_type)jarg2; 
  result = (std::map<std::string,std::string > *)(arg1)->GetOptions(arg2);
  *(std::map<std::string,std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1AddOption_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->AddOption((char const *)arg2,arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1AddOption_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  (arg1)->AddOption((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1RemoveOption___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  result = (bool)(arg1)->RemoveOption((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetOptions___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  (arg1)->SetOptions((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1RegisterOptionParam_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  std::string arg1 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  int arg3 ;
  OpenBabel::OBConversion::Option_type arg4 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (OpenBabel::OBConversion::Option_type)jarg4; 
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1RegisterOptionParam_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  std::string arg1 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = (int)jarg3; 
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1RegisterOptionParam_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  std::string arg1 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2);
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetOptionParams___(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  std::string arg1 ;
  OpenBabel::OBConversion::Option_type arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (OpenBabel::OBConversion::Option_type)jarg2; 
  result = (int)OpenBabel::OBConversion::GetOptionParams(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1Convert_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ;
  std::ostream *arg3 = (std::ostream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(std::istream **)&jarg2; 
  arg3 = *(std::ostream **)&jarg3; 
  result = (int)(arg1)->Convert(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1Convert_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (int)(arg1)->Convert();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1FullConvert___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::vector<std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector<std::string > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(std::vector<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg4 = *(std::vector<std::string > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->FullConvert(*arg2,*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1AddChemObject___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (bool)(arg1)->AddChemObject(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetChemObject___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBBase *)(arg1)->GetChemObject();
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1IsLast___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (bool)(arg1)->IsLast();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1IsFirstInput___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (bool)(arg1)->IsFirstInput();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetOutputIndex___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (int)((OpenBabel::OBConversion const *)arg1)->GetOutputIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetOutputIndex___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOutputIndex(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetMoreFilesToCome___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  (arg1)->SetMoreFilesToCome();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetOneObjectOnly_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOneObjectOnly(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1SetOneObjectOnly_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  (arg1)->SetOneObjectOnly();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1GetDefaultFormat___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::GetDefaultFormat();
  *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1Write_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::ostream *arg3 = (std::ostream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::ostream **)&jarg3; 
  result = (bool)(arg1)->Write(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1Write_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (bool)(arg1)->Write(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1WriteString_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->WriteString(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1WriteString_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (arg1)->WriteString(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1WriteFile___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->WriteFile(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1Read_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::istream *arg3 = (std::istream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::istream **)&jarg3; 
  result = (bool)(arg1)->Read(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1Read_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (bool)(arg1)->Read(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1ReadString___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->ReadString(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1ReadFile___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->ReadFile(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1BatchFileName___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = OpenBabel::OBConversion::BatchFileName(*arg1,*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBConversion_1IncrementedFileName___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = OpenBabel::OBConversion::IncrementedFileName(*arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_NOTREADABLE_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x01;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_READONEONLY_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x02;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_READBINARY_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x04;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_ZEROATOMSOK_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x08;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_NOTWRITABLE_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x10;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_WRITEONEONLY_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x20;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_WRITEBINARY_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x40;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_DEFAULTFORMAT_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x4000;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBResidue_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBResidue_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidue const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue((OpenBabel::OBResidue const &)*arg1);
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1AddAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->AddAtom(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1InsertAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->InsertAtom(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1RemoveAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->RemoveAtom(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  (arg1)->Clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1SetName___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetName((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1SetNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1SetChain___(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->SetChain(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1SetChainNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetChainNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1SetAtomID___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->SetAtomID(arg2,(std::string const &)*arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1SetHetAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetHetAtom(arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1SetSerialNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetSerialNum(arg2,arg3);
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetName___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetNumAtoms___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetNumAtoms();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jchar JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetChain___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jchar jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (char)((OpenBabel::OBResidue const *)arg1)->GetChain();
  jresult = (jchar)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetChainNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetChainNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetResKey___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetResKey();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetAtoms___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetAtoms();
  *(std::vector<OpenBabel::OBAtom * > **)&jresult = new std::vector<OpenBabel::OBAtom * >((std::vector<OpenBabel::OBAtom * > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetBonds_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  bool arg2 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetBonds(arg2);
  *(std::vector<OpenBabel::OBBond * > **)&jresult = new std::vector<OpenBabel::OBBond * >((std::vector<OpenBabel::OBBond * > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetBonds_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetBonds();
  *(std::vector<OpenBabel::OBBond * > **)&jresult = new std::vector<OpenBabel::OBBond * >((std::vector<OpenBabel::OBBond * > &)result); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetAtomID___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetAtomID(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetSerialNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetSerialNum(arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetAminoAcidProperty___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAminoAcidProperty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetAtomProperty___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAtomProperty(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1GetResidueProperty___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetResidueProperty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1IsHetAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->IsHetAtom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1IsResidueType___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->IsResidueType(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1BeginAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::vector<OpenBabel::OBAtom * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->BeginAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidue_1NextAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::vector<OpenBabel::OBAtom * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->NextAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_MAXSETNO_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 40;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_MAXELEM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1024;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_MINELEM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 29;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_MAXRES_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 100;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_MINRES_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 54;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1ALA_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1GLY_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 2);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1LEU_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 3);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1SER_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 4);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1VAL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 5);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1THR_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 6);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1LYS_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 7);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1ASP_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 8);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1ILE_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 9);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1ASN_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 10);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1GLU_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 11);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1PRO_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 12);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1ARG_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 13);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1PHE_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 14);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1GLN_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 15);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1TYR_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 16);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1HIS_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 17);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1CYS_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 18);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1MET_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 19);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_AA_1TRP_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 20);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ACIDIC_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::ACIDIC;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ACYCLIC_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::ACYCLIC;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ALIPHATIC_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::ALIPHATIC;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_AROMATIC_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::AROMATIC;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_BASIC_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::BASIC;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_BURIED_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::BURIED;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CHARGED_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::CHARGED;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CYCLIC_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::CYCLIC;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_HYDROPHOBIC_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::HYDROPHOBIC;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_LARGE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::LARGE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_MEDIUM_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::MEDIUM;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_NEGATIVE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::NEGATIVE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_NEUTRAL_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::NEUTRAL;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_POLAR_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::POLAR;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_POSITIVE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::POSITIVE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SMALL_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::SMALL;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SURFACE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBAminoAcidProperty::SURFACE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ALPHA_1CARBON_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::ALPHA_CARBON;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_AMINO_1BACKBONE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::AMINO_BACKBONE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_BACKBONE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::BACKBONE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CYSTEINE_1SULPHUR_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::CYSTEINE_SULPHUR;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_LIGAND_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::LIGAND;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_NUCLEIC_1BACKBONE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::NUCLEIC_BACKBONE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SHAPELY_1BACKBONE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::SHAPELY_BACKBONE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SHAPELY_1SPECIAL_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::SHAPELY_SPECIAL;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SIDECHAIN_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::SIDECHAIN;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SUGAR_1PHOSPHATE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueAtomProperty::SUGAR_PHOSPHATE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ALA_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::ALA;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_GLY_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::GLY;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_LEU_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::LEU;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SER_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::SER;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_VAL_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::VAL;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_THR_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::THR;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_LYS_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::LYS;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ASP_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::ASP;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ILE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::ILE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ASN_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::ASN;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_GLU_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::GLU;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_PRO_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::PRO;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ARG_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::ARG;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_PHE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::PHE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_GLN_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::GLN;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_TYR_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::TYR;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_HIS_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::HIS;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_CYS_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::CYS;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_MET_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::MET;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_TRP_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::TRP;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ASX_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::ASX;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_GLX_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::GLX;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_PCA_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::PCA;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_HYP_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::HYP;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_A_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::A;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_C_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::C;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_G_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::G;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_T_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::T;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_U_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::U;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_UPLUS_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::UPLUS;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_I_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::I;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OMC_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::OMC;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_M2G_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::M2G;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OMG_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::OMG;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_YG_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::YG;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_H2U_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::H2U;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_PSU_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::PSU;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_UNK_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::UNK;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ACE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::ACE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_FOR_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::FOR;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_HOH_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::HOH;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_DOD_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::DOD;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SO4_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::SO4;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_PO4_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::PO4;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_NAD_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::NAD;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_COA_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::COA;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_NAP_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::NAP;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_NDP_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueIndex::NDP;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_AMINO_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::AMINO;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_AMINO_1NUCLEO_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::AMINO_NUCLEO;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_COENZYME_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::COENZYME;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ION_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::ION;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_NUCLEO_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::NUCLEO;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_PROTEIN_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::PROTEIN;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_PURINE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::PURINE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_PYRIMIDINE_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::PYRIMIDINE;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_SOLVENT_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::SOLVENT;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_WATER_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)(unsigned int)OpenBabel::OBResidueProperty::WATER;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_Residue_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char (*arg1)[4] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char (**)[4])&jarg1; 
  {
    char (*inp)[4] = (char (*)[4])(arg1);
    char (*dest)[4] = (char (*)[4])(OpenBabel::Residue);
    size_t ii = 0;
    for (; ii < 100; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_Residue_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char (*result)[4] = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char (*)[4])(char (*)[4])OpenBabel::Residue;
  *(char (**)[4])&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_ElemDesc_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char (*arg1)[4] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char (**)[4])&jarg1; 
  {
    char (*inp)[4] = (char (*)[4])(arg1);
    char (*dest)[4] = (char (*)[4])(OpenBabel::ElemDesc);
    size_t ii = 0;
    for (; ii < 1024; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ElemDesc_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char (*result)[4] = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char (*)[4])(char (*)[4])OpenBabel::ElemDesc;
  *(char (**)[4])&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_ResNo_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  OpenBabel::ResNo = arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ResNo_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)OpenBabel::ResNo;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_ElemNo_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  OpenBabel::ElemNo = arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ElemNo_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)OpenBabel::ElemNo;
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_14RING_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_13RING_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 2);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1AROMATIC_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 3);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1RING_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 4);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1CSTEREO_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 5);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1ACSTEREO_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 6);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1DONOR_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 7);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1ACCEPTOR_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 8);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1CHIRAL_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 9);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1POS_1CHIRAL_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 10);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1NEG_1CHIRAL_1ATOM_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 11);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1ATOM_1HAS_1NO_1H_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 12);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBAtom___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBAtom *)new OpenBabel::OBAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->Clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHyb(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAtomicNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetIsotope(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetImplicitValence(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IncrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->IncrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1DecrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->DecrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFormalCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->SetSpinMultiplicity(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetType_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetType_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (arg1)->SetType(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetPartialCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetVector_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (arg1)->SetVector(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetVector_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetVector(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (arg1)->SetCoordPtr(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetVector_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetVector();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (arg1)->SetResidue(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1UnsetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->UnsetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetAntiClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetAntiClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetPositiveStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetNegativeStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1UnsetStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->UnsetStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetInRing();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetChiral();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1ClearCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->ClearCoordPtr();
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (int)((OpenBabel::OBAtom const *)arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned short)((OpenBabel::OBAtom const *)arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (int)((OpenBabel::OBAtom const *)arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetAtomicMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)((OpenBabel::OBAtom const *)arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetExactMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)((OpenBabel::OBAtom const *)arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetCoordinateIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetCIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetHvyValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetHeteroValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (char *)(arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetX___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1x___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetY___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1y___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetZ___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1z___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetCoordinate___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double *)(arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetVector___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBResidue *)(arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetNewBondVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetNextAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1BeginBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (arg1)->BeginBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1EndBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (arg1)->EndBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1BeginBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1NextBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1BeginNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1NextNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetDistance_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetDistance_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetAngle_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1GetAngle_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1NewResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->NewResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1DeleteResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->DeleteResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1AddBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (arg1)->AddBond(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1InsertBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (arg1)->InsertBond(*arg2,arg3);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1DeleteBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1ClearBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->ClearBond();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1CountFreeOxygens___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1ImplicitHydrogenCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1ExplicitHydrogenCount_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1ExplicitHydrogenCount_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1MemberOfRingCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1MemberOfRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1CountRingBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SmallestBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1AverageBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1BOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1KBOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HtoMethyl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1SetHybAndGeom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1ForceNoH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->ForceNoH();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasNoHForced___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsCarbon___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsSulfur___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsPhosphorus___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsInRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsHeteroatom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsNotCorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsConnected___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsOneThree___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsOneFour___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsCarboxylOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsPhosphateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsSulfateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsNitroOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsAmideNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsNonPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsAromaticNOxide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsAxial___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsAntiClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasChiralitySpecified___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasChiralVolume___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsHbondAcceptor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsHbondDonor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1IsHbondDonorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasAlphaBetaUnsat_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasAlphaBetaUnsat_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasBondOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1CountBondsOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasNonSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasDoubleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1HasAromaticBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtom_1MatchesSMARTS___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1AROMATIC_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1WEDGE_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 2);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1HASH_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 3);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1RING_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 4);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1TORUP_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 5);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1TORDOWN_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 6);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1KSINGLE_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 7);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1KDOUBLE_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 8);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1KTRIPLE_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 9);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1CLOSURE_1BOND_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 10);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBBond___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBBond *)new OpenBabel::OBBond();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetBO___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBO(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetBegin___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->SetBegin(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetEnd___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->SetEnd(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetLength___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetLength(arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1Set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jint jarg5, jint jarg6) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->Set(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetKSingle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetKSingle();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetKDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetKDouble();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetKTriple___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetKTriple();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetHash___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetHash();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetWedge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetWedge();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetUp___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetUp();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetDown___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetDown();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetInRing();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1SetClosure___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetClosure();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1UnsetHash___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetHash();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1UnsetWedge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetWedge();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1UnsetUp___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetUp();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1UnsetDown___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetDown();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1UnsetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1UnsetKekule___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetKekule();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetBO___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBO();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetBondOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBondOrder();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetFlags___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetFlags();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetBeginAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBeginAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetEndAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetEndAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetBeginAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->GetBeginAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetEndAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->GetEndAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBAtom *)(arg1)->GetNbrAtom(arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetEquibLength___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (double)(arg1)->GetEquibLength();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetLength___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (double)(arg1)->GetLength();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1GetNbrAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (int)(arg1)->GetNbrAtomIdx(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)((OpenBabel::OBBond const *)arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)((OpenBabel::OBBond const *)arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsRotor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsRotor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsAmide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsAmide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsPrimaryAmide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsPrimaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsSecondaryAmide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsSecondaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsEster___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsEster();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsCarbonyl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsCarbonyl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsSingle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsSingle();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsDouble();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsTriple___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsTriple();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsKSingle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsKSingle();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsKDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsKDouble();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsKTriple___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsKTriple();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsClosure___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsClosure();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsUp___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsUp();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsDown___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsDown();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsWedge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsWedge();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsHash___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsHash();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBBond_1IsDoubleBondGeometry___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsDoubleBondGeometry();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1SSSR_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1RINGFLAGS_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 2);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1AROMATIC_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 3);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1ATOMTYPES_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 4);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1CHIRALITY_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 5);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1PCHARGE_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 6);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1HYBRID_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 8);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1IMPVAL_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 9);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1KEKULE_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 10);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1CLOSURE_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 11);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1H_1ADDED_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 12);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1PH_1CORRECTED_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 13);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1AROM_1CORRECTED_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 14);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1CHAINS_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 15);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1TCHARGE_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 16);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1TSPIN_1MOL_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 17);
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OB_1CURRENT_1CONFORMER_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -1;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMol_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMol *)new OpenBabel::OBMol();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMol_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMol *)new OpenBabel::OBMol((OpenBabel::OBMol const &)*arg1);
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBMol___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1ReserveAtoms___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ReserveAtoms(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1CreateAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->CreateAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1CreateBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBBond *)(arg1)->CreateBond();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1CreateResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBResidue *)(arg1)->CreateResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DestroyAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (arg1)->DestroyAtom(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DestroyBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  (arg1)->DestroyBond(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DestroyResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (arg1)->DestroyResidue(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtom & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AddAtom(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddBond_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddBond_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddBond_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->AddBond(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddBond_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBond & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AddBond(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidue & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AddResidue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1InsertAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtom & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->InsertAtom(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DeleteAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->DeleteAtom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DeleteBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DeleteResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  result = (bool)(arg1)->DeleteResidue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NewAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->NewAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NewResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBResidue *)(arg1)->NewResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1BeginModify___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->BeginModify();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1EndModify_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EndModify(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1EndModify_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->EndModify();
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetMod___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (int)(arg1)->GetMod();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1IncrementMod___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->IncrementMod();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DecrementMod___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->DecrementMod();
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetFlags___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (int)(arg1)->GetFlags();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetTitle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (char *)((OpenBabel::OBMol const *)arg1)->GetTitle();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NumAtoms___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumAtoms();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NumBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumBonds();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NumHvyAtoms___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)(arg1)->NumHvyAtoms();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NumResidues___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumResidues();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NumRotors___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)(arg1)->NumRotors();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBAtom *)(arg1)->GetAtom(arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetFirstAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->GetFirstAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetBond_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetBond_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2,arg3);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetBond_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2,arg3);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBResidue *)(arg1)->GetResidue(arg2);
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetInternalCoord___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBInternalCoord * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->GetInternalCoord();
  *(std::vector<OpenBabel::OBInternalCoord * > **)&jresult = new std::vector<OpenBabel::OBInternalCoord * >((std::vector<OpenBabel::OBInternalCoord * > &)result); 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetTorsion_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetTorsion_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = *(OpenBabel::OBAtom **)&jarg5; 
  result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  result = (double)(arg1)->GetAngle(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetFormula___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->GetFormula();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetSpacedFormula_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (arg1)->GetSpacedFormula(arg2,(char const *)arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetSpacedFormula_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetSpacedFormula(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetSpacedFormula_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->GetSpacedFormula();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetEnergy___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (double)((OpenBabel::OBMol const *)arg1)->GetEnergy();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetMolWt___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (double)(arg1)->GetMolWt();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetExactMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (double)(arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetTotalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (int)(arg1)->GetTotalCharge();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetTotalSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)(arg1)->GetTotalSpinMultiplicity();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetDimension___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned short)((OpenBabel::OBMol const *)arg1)->GetDimension();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetCoordinates___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (double *)(arg1)->GetCoordinates();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetSSSR___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBRing * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  {
    std::vector<OpenBabel::OBRing * > &_result_ref = (arg1)->GetSSSR();
    result = (std::vector<OpenBabel::OBRing * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBRing * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AutomaticFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AutomaticFormalCharge();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AutomaticPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AutomaticPartialCharge();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetTitle_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetTitle_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (arg1)->SetTitle(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetFormula___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetFormula(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetEnergy___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetEnergy(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetDimension___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  (arg1)->SetDimension(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetTotalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTotalCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetTotalSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetTotalSpinMultiplicity(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetInternalCoord___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBInternalCoord * > > arg2 ;
  std::vector<OpenBabel::OBInternalCoord * > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  argp2 = *(std::vector<OpenBabel::OBInternalCoord * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<OpenBabel::OBInternalCoord * >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetInternalCoord(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetAutomaticFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAutomaticFormalCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetAutomaticPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAutomaticPartialCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetAromaticPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetAromaticPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetSSSRPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetSSSRPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetRingAtomsAndBondsPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetRingAtomsAndBondsPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetAtomTypesPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetAtomTypesPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetChainsPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetChainsPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetChiralityPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetChiralityPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetPartialChargesPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetPartialChargesPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetHybridizationPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetHybridizationPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetImplicitValencePerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetImplicitValencePerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetKekulePerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetKekulePerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetClosureBondsPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetClosureBondsPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetHydrogensAdded___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetHydrogensAdded();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetCorrectedForPH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetCorrectedForPH();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetAromaticCorrected___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetAromaticCorrected();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetSpinMultiplicityAssigned___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetSpinMultiplicityAssigned();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetFlags___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFlags(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1UnsetAromaticPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->UnsetAromaticPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1UnsetPartialChargesPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->UnsetPartialChargesPerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1UnsetImplicitValencePerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->UnsetImplicitValencePerceived();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1UnsetFlag___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UnsetFlag(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1ClassDescription___(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenBabel::OBMol::ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1RenumberAtoms___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBNodeBase * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBNodeBase * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBNodeBase * > & reference is null");
    return ;
  } 
  (arg1)->RenumberAtoms(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1ToInertialFrame_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  (arg1)->ToInertialFrame(arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1ToInertialFrame_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->ToInertialFrame();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Translate_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ;
  } 
  (arg1)->Translate((OpenBabel::vector3 const &)*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Translate_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->Translate((OpenBabel::vector3 const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Rotate_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  (arg1)->Rotate((double const (*)[3])arg2);
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Rotate_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->Rotate((double const (*))arg2);
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Rotate_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Rotate((double const (*))arg2,arg3);
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Center_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->Center();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Kekulize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Kekulize();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1PerceiveKekuleBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->PerceiveKekuleBonds();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NewPerceiveKekuleBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->NewPerceiveKekuleBonds();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DeleteHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->DeleteHydrogen(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DeleteHydrogens_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->DeleteHydrogens();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DeleteHydrogens_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->DeleteHydrogens(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DeleteNonPolarHydrogens___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->DeleteNonPolarHydrogens();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddHydrogens_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->AddHydrogens(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddHydrogens_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->AddHydrogens(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddHydrogens_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AddHydrogens();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddHydrogens_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->AddHydrogens(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddPolarHydrogens___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AddPolarHydrogens();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1StripSalts___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->StripSalts();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1ConvertDativeBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->ConvertDativeBonds();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1CorrectForPH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->CorrectForPH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AssignSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AssignSpinMultiplicity();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Center_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->Center(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetTorsion___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jdouble jarg6) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = *(OpenBabel::OBAtom **)&jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->SetTorsion(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1FindSSSR___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindSSSR();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1FindRingAtomsAndBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindRingAtomsAndBonds();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1FindChiralCenters___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindChiralCenters();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1FindChildren_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<int > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->FindChildren(*arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1FindChildren_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBAtom * > *arg2 = 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * > & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  (arg1)->FindChildren(*arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1FindLargestFragment___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return ;
  } 
  (arg1)->FindLargestFragment(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1ContigFragList___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<std::vector<int > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<std::vector<int > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > > & reference is null");
    return ;
  } 
  (arg1)->ContigFragList(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Align___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  OpenBabel::vector3 *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  arg5 = *(OpenBabel::vector3 **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (arg1)->Align(arg2,arg3,*arg4,*arg5);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1ConnectTheDots___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->ConnectTheDots();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1PerceiveBondOrders___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->PerceiveBondOrders();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1FindTorsions___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindTorsions();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetGTDVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->GetGTDVector(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetGIVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return ;
  } 
  (arg1)->GetGIVector(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetGIDVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return ;
  } 
  (arg1)->GetGIDVector(*arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Has2D___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Has2D();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Has3D___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Has3D();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasNonZeroCoords___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasNonZeroCoords();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasAromaticPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasAromaticPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasSSSRPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasSSSRPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasRingAtomsAndBondsPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasRingAtomsAndBondsPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasAtomTypesPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasAtomTypesPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasChiralityPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasChiralityPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasPartialChargesPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasPartialChargesPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasHybridizationPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasHybridizationPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasImplicitValencePerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasImplicitValencePerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasKekulePerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasKekulePerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasClosureBondsPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasClosureBondsPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasChainsPerceived___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasChainsPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasHydrogensAdded___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasHydrogensAdded();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasAromaticCorrected___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasAromaticCorrected();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1IsCorrectedForPH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->IsCorrectedForPH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1HasSpinMultiplicityAssigned___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasSpinMultiplicityAssigned();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1IsChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1Empty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NumConformers___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (int)(arg1)->NumConformers();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetConformers___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<double * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<double * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double * > & reference is null");
    return ;
  } 
  (arg1)->SetConformers(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1AddConformer___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->AddConformer(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1SetConformer___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetConformer(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1CopyConformer___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->CopyConformer(arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1DeleteConformer___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->DeleteConformer(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetConformer___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double *)(arg1)->GetConformer(arg2);
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1BeginConformer___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<double * >::iterator *arg2 = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<double * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double * >::iterator & reference is null");
    return 0;
  } 
  result = (double *)(arg1)->BeginConformer(*arg2);
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NextConformer___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<double * >::iterator *arg2 = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<double * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double * >::iterator & reference is null");
    return 0;
  } 
  result = (double *)(arg1)->NextConformer(*arg2);
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1GetConformers___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<double * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  {
    std::vector<double * > &_result_ref = (arg1)->GetConformers();
    result = (std::vector<double * > *) &_result_ref;
  }
  *(std::vector<double * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1BeginAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBNodeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBNodeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBNodeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->BeginAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NextAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBNodeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBNodeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBNodeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->NextAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1BeginBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NextBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1BeginResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBResidue * >::iterator *arg2 = 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBResidue * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBResidue * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidue *)(arg1)->BeginResidue(*arg2);
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NextResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBResidue * >::iterator *arg2 = 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBResidue * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBResidue * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidue *)(arg1)->NextResidue(*arg2);
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1BeginInternalCoord___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBInternalCoord * >::iterator *arg2 = 0 ;
  OpenBabel::OBInternalCoord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBInternalCoord * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBInternalCoord * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBInternalCoord *)(arg1)->BeginInternalCoord(*arg2);
  *(OpenBabel::OBInternalCoord **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMol_1NextInternalCoord___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBInternalCoord * >::iterator *arg2 = 0 ;
  OpenBabel::OBInternalCoord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBInternalCoord * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBInternalCoord * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBInternalCoord *)(arg1)->NextInternalCoord(*arg2);
  *(OpenBabel::OBInternalCoord **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_tokenize_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)OpenBabel::tokenize(*arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_tokenize_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)OpenBabel::tokenize(*arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_tokenize_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)OpenBabel::tokenize(*arg1,*arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_tokenize_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)OpenBabel::tokenize(*arg1,*arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_tokenize_1_1SWIG_14___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)OpenBabel::tokenize(*arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_ThrowError_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  OpenBabel::ThrowError(*arg1);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_CartesianToInternal___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBInternalCoord * > *arg1 = 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBInternalCoord * > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBInternalCoord * > & reference is null");
    return ;
  } 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  OpenBabel::CartesianToInternal(*arg1,*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_InternalToCartesian___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::vector<OpenBabel::OBInternalCoord * > *arg1 = 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBInternalCoord * > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBInternalCoord * > & reference is null");
    return ;
  } 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  OpenBabel::InternalToCartesian(*arg1,*arg2);
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_NewExtension___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = OpenBabel::NewExtension(*arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_etab_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBElementTable *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBElementTable const & reference is null");
    return ;
  } 
  OpenBabel::etab = *arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_etab_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBElementTable const &_result_ref = OpenBabel::etab;
    result = (OpenBabel::OBElementTable *) &_result_ref;
  }
  *(OpenBabel::OBElementTable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_ttab_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTypeTable *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTypeTable const & reference is null");
    return ;
  } 
  OpenBabel::ttab = *arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_ttab_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBTypeTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBTypeTable const &_result_ref = OpenBabel::ttab;
    result = (OpenBabel::OBTypeTable *) &_result_ref;
  }
  *(OpenBabel::OBTypeTable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_isotab_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBIsotopeTable *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsotopeTable const & reference is null");
    return ;
  } 
  OpenBabel::isotab = *arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_isotab_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBIsotopeTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBIsotopeTable const &_result_ref = OpenBabel::isotab;
    result = (OpenBabel::OBIsotopeTable *) &_result_ref;
  }
  *(OpenBabel::OBIsotopeTable **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_aromtyper_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAromaticTyper *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAromaticTyper const & reference is null");
    return ;
  } 
  OpenBabel::aromtyper = *arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_aromtyper_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAromaticTyper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBAromaticTyper const &_result_ref = OpenBabel::aromtyper;
    result = (OpenBabel::OBAromaticTyper *) &_result_ref;
  }
  *(OpenBabel::OBAromaticTyper **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_atomtyper_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomTyper *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomTyper const & reference is null");
    return ;
  } 
  OpenBabel::atomtyper = *arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_atomtyper_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomTyper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBAtomTyper const &_result_ref = OpenBabel::atomtyper;
    result = (OpenBabel::OBAtomTyper *) &_result_ref;
  }
  *(OpenBabel::OBAtomTyper **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_chainsparser_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBChainsParser *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChainsParser **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBChainsParser const & reference is null");
    return ;
  } 
  OpenBabel::chainsparser = *arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_chainsparser_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBChainsParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBChainsParser const &_result_ref = OpenBabel::chainsparser;
    result = (OpenBabel::OBChainsParser *) &_result_ref;
  }
  *(OpenBabel::OBChainsParser **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_resdat_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueData *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueData const & reference is null");
    return ;
  } 
  OpenBabel::resdat = *arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_resdat_1get___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBResidueData const &_result_ref = OpenBabel::resdat;
    result = (OpenBabel::OBResidueData *) &_result_ref;
  }
  *(OpenBabel::OBResidueData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_BUFF_1SIZE_1get___(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 32768;
  
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_get_1rmat___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  OpenBabel::get_rmat(arg1,arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_ob_1make_1rmat___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  double (*arg1)[3] ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double (**)[3])&jarg1; 
  arg2 = *(double **)&jarg2; 
  OpenBabel::ob_make_rmat((double (*)[3])arg1,arg2);
  
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_qtrfit___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double (*arg4)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  OpenBabel::qtrfit(arg1,arg2,arg3,(double (*)[3])arg4);
  
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_superimpose___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (double)OpenBabel::superimpose(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBRTree___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBRTree *arg2 = (OpenBabel::OBRTree *) 0 ;
  OpenBabel::OBRTree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBRTree **)&jarg2; 
  result = (OpenBabel::OBRTree *)new OpenBabel::OBRTree(arg1,arg2);
  *(OpenBabel::OBRTree **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBRTree___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRTree **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBRTree_1GetAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRTree **)&jarg1; 
  result = (int)(arg1)->GetAtomIdx();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRTree_1PathToRoot___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ;
  std::vector<OpenBabel::OBNodeBase * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRTree **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBNodeBase * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBNodeBase * > & reference is null");
    return ;
  } 
  (arg1)->PathToRoot(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1_1path_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  std::vector<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(std::vector<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_path = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1_1path_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  std::vector<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  {
    std::vector<int > const &_result_ref =  ((arg1)->_path);
    result = (std::vector<int > *) &_result_ref;
  }
  *(std::vector<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1_1pathset_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_pathset = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1_1pathset_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBBitVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  {
    OpenBabel::OBBitVec const &_result_ref =  ((arg1)->_pathset);
    result = (OpenBabel::OBBitVec *) &_result_ref;
  }
  *(OpenBabel::OBBitVec **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1findCenterAndNormal___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->findCenterAndNormal(*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBRing_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing();
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBRing_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<int > *arg1 = 0 ;
  int arg2 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing(*arg1,arg2);
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBRing_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *arg1 = 0 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRing const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing((OpenBabel::OBRing const &)*arg1);
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1Size___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  result = (int)((OpenBabel::OBRing const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1PathSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  result = (int)((OpenBabel::OBRing const *)arg1)->PathSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1IsMember_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->IsMember(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1IsMember_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(arg1)->IsMember(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  result = (bool)(arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsInRing(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (arg1)->SetParent(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBRing_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  result = (OpenBabel::OBMol *)(arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_CompareRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBRing *arg2 = (OpenBabel::OBRing *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBRing **)&jarg2; 
  result = (bool)OpenBabel::CompareRingSize((OpenBabel::OBRing const *)arg1,(OpenBabel::OBRing const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBRingSearch___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBRingSearch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBRingSearch *)new OpenBabel::OBRingSearch();
  *(OpenBabel::OBRingSearch **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBRingSearch___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRingSearch_1SortRings___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  (arg1)->SortRings();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRingSearch_1RemoveRedundant___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveRedundant(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRingSearch_1AddRingFromClosure___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (arg1)->AddRingFromClosure(*arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBRingSearch_1WriteRings___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  (arg1)->WriteRings();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBRingSearch_1SaveUniqueRing___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  std::deque<int > *arg2 = 0 ;
  std::deque<int > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  arg2 = *(std::deque<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque<int > & reference is null");
    return 0;
  } 
  arg3 = *(std::deque<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque<int > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->SaveUniqueRing(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBRingSearch_1BeginRings___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBRing * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  result = (arg1)->BeginRings();
  *(std::vector<OpenBabel::OBRing * >::iterator **)&jresult = new std::vector<OpenBabel::OBRing * >::iterator((std::vector<OpenBabel::OBRing * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBRingSearch_1EndRings___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBRing * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  result = (arg1)->EndRings();
  *(std::vector<OpenBabel::OBRing * >::iterator **)&jresult = new std::vector<OpenBabel::OBRing * >::iterator((std::vector<OpenBabel::OBRing * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSmartsPattern_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSmartsPattern *)new OpenBabel::OBSmartsPattern();
  *(OpenBabel::OBSmartsPattern **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBSmartsPattern___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSmartsPattern_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = 0 ;
  OpenBabel::OBSmartsPattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSmartsPattern const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBSmartsPattern *)new OpenBabel::OBSmartsPattern((OpenBabel::OBSmartsPattern const &)*arg1);
  *(OpenBabel::OBSmartsPattern **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1NumMatches___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumMatches();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1NumAtoms___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumAtoms();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1NumBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumBonds();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1GetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetAtomicNum(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1GetBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg4 = *(int **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg5 = (int)jarg5; 
  (arg1)->GetBond(*arg2,*arg3,*arg4,arg5);
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1GetCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetCharge(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1GetSMARTS_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBSmartsPattern const *)arg1)->GetSMARTS();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1GetVectorBinding___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenBabel::OBSmartsPattern const *)arg1)->GetVectorBinding(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1Empty___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1IsValid___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->IsValid();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1Init_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->Init((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1WriteMapList___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  (arg1)->WriteMapList(*arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1Match_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->Match(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1Match_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->Match(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  std::vector<std::pair<int,int > > *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(std::vector<std::pair<int,int > > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::pair<int,int > > & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  std::vector<std::pair<int,int > > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(std::vector<std::pair<int,int > > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::pair<int,int > > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1GetMapList___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::vector<std::vector<int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  {
    std::vector<std::vector<int > > &_result_ref = (arg1)->GetMapList();
    result = (std::vector<std::vector<int > > *) &_result_ref;
  }
  *(std::vector<std::vector<int > > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1GetUMapList___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::vector<std::vector<int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  {
    std::vector<std::vector<int > > &_result_ref = (arg1)->GetUMapList();
    result = (std::vector<std::vector<int > > *) &_result_ref;
  }
  *(std::vector<std::vector<int > > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1BeginMList___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  SwigValueWrapper<std::vector<std::vector<int > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (arg1)->BeginMList();
  *(std::vector<std::vector<int > >::iterator **)&jresult = new std::vector<std::vector<int > >::iterator((std::vector<std::vector<int > >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBSmartsPattern_1EndMList___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  SwigValueWrapper<std::vector<std::vector<int > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (arg1)->EndMList();
  *(std::vector<std::vector<int > >::iterator **)&jresult = new std::vector<std::vector<int > >::iterator((std::vector<std::vector<int > >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBSSMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = 0 ;
  OpenBabel::Pattern *arg2 = (OpenBabel::Pattern *) 0 ;
  OpenBabel::OBSSMatch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg2 = *(OpenBabel::Pattern **)&jarg2; 
  result = (OpenBabel::OBSSMatch *)new OpenBabel::OBSSMatch(*arg1,arg2);
  *(OpenBabel::OBSSMatch **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBSSMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSSMatch **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSSMatch_1Match_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ;
  std::vector<std::vector<int > > *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSSMatch **)&jarg1; 
  arg2 = *(std::vector<std::vector<int > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->Match(*arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBSSMatch_1Match_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ;
  std::vector<std::vector<int > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSSMatch **)&jarg1; 
  arg2 = *(std::vector<std::vector<int > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > > & reference is null");
    return ;
  } 
  (arg1)->Match(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_SmartsLexReplace___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::string *arg1 = 0 ;
  std::vector<std::pair<std::string,std::string > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  arg2 = *(std::vector<std::pair<std::string,std::string > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::pair<std::string,std::string > > & reference is null");
    return ;
  } 
  OpenBabel::SmartsLexReplace(*arg1,*arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolAtomIter_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter();
  *(OpenBabel::OBMolAtomIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolAtomIter_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter(arg1);
  *(OpenBabel::OBMolAtomIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolAtomIter_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = 0 ;
  OpenBabel::OBMolAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter((OpenBabel::OBMolAtomIter const &)*arg1);
  *(OpenBabel::OBMolAtomIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1good___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolAtomIter const *)arg1)->operator bool();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1inc___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  OpenBabel::OBMolAtomIter result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBMolAtomIter **)&jresult = new OpenBabel::OBMolAtomIter((OpenBabel::OBMolAtomIter &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1deref___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1_1_1ref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBMolAtomIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBMolAtomIter___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->Clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IncrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1DecrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetType_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetType_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetVector_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetVector_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetVector_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetVector();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1UnsetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetAntiClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1UnsetStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetInRing();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetChiral();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1ClearCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetAtomicMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetExactMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetCoordinateIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetCIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetHvyValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetHeteroValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetX___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1x___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetY___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1y___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetZ___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1z___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetCoordinate___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetVector___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetNewBondVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetNextAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1BeginBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1EndBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1BeginBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1NextBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1BeginNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1NextNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetDistance_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetDistance_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetAngle_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetAngle_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1NewResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->NewResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1DeleteResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1AddBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1InsertBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1DeleteBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1ClearBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->ClearBond();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1CountFreeOxygens___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1ImplicitHydrogenCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1ExplicitHydrogenCount_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1ExplicitHydrogenCount_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1MemberOfRingCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1MemberOfRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1CountRingBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SmallestBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1AverageBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1BOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1KBOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HtoMethyl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetHybAndGeom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1ForceNoH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasNoHForced___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsCarbon___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsSulfur___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsPhosphorus___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsInRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsHeteroatom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsNotCorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsConnected___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsOneThree___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsOneFour___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsCarboxylOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsPhosphateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsSulfateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsNitroOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsAmideNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsNonPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsAromaticNOxide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsAxial___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsAntiClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasChiralitySpecified___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasChiralVolume___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsHbondAcceptor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsHbondDonor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1IsHbondDonorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasAlphaBetaUnsat_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasAlphaBetaUnsat_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasBondOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1CountBondsOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasNonSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasDoubleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasAromaticBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1MatchesSMARTS___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1Visit_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1Visit_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBGraphBase *)(*arg1)->GetParent();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGraphBase *arg2 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGraphBase **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1AddEdge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  (*arg1)->AddEdge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1Error___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->Error(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (*arg1)->SetMatch(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1Eval___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  result = (bool)(*arg1)->Eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(*arg1)->GetMatch();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1ClassDescription___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1HasData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1DeleteData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1DeleteData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1DeleteData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1DataSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1GetData_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1BeginData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomIter_1EndData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolAtomDFSIter_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter();
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolAtomDFSIter_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolAtomDFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter(arg1);
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolAtomDFSIter_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = 0 ;
  OpenBabel::OBMolAtomDFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomDFSIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter((OpenBabel::OBMolAtomDFSIter const &)*arg1);
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1_1_1deref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomDFSIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1_1_1ref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBMolAtomDFSIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBMolAtomDFSIter___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->Clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IncrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1DecrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetType_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetType_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetVector_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetVector_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetVector_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetVector();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1UnsetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetAntiClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1UnsetStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetInRing();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetChiral();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1ClearCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetAtomicMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetExactMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetCoordinateIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetCIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetHvyValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetHeteroValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetX___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1x___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetY___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1y___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetZ___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1z___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetCoordinate___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetVector___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetNewBondVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetNextAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1BeginBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1EndBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1BeginBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1NextBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1BeginNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1NextNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetDistance_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetDistance_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetAngle_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetAngle_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1NewResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->NewResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1DeleteResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1AddBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1InsertBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1DeleteBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1ClearBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->ClearBond();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1CountFreeOxygens___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1ImplicitHydrogenCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1ExplicitHydrogenCount_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1ExplicitHydrogenCount_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1MemberOfRingCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1MemberOfRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1CountRingBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SmallestBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1AverageBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1BOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1KBOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HtoMethyl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetHybAndGeom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1ForceNoH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasNoHForced___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsCarbon___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsSulfur___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsPhosphorus___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsInRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsHeteroatom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsNotCorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsConnected___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsOneThree___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsOneFour___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsCarboxylOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsPhosphateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsSulfateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsNitroOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsAmideNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsNonPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsAromaticNOxide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsAxial___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsAntiClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasChiralitySpecified___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasChiralVolume___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsHbondAcceptor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsHbondDonor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1IsHbondDonorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasAlphaBetaUnsat_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasAlphaBetaUnsat_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasBondOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1CountBondsOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasNonSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasDoubleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasAromaticBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1MatchesSMARTS___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1Visit_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1Visit_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBGraphBase *)(*arg1)->GetParent();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGraphBase *arg2 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGraphBase **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1AddEdge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  (*arg1)->AddEdge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1Error___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->Error(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (*arg1)->SetMatch(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1Eval___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  result = (bool)(*arg1)->Eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(*arg1)->GetMatch();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1ClassDescription___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1HasData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1DataSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1GetData_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1BeginData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomDFSIter_1EndData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolAtomBFSIter_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter();
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolAtomBFSIter_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolAtomBFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter(arg1);
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolAtomBFSIter_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = 0 ;
  OpenBabel::OBMolAtomBFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomBFSIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter((OpenBabel::OBMolAtomBFSIter const &)*arg1);
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1_1_1deref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomBFSIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1_1_1ref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBMolAtomBFSIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBMolAtomBFSIter___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->Clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IncrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1DecrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetType_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetType_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetVector_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetVector_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetVector_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetVector();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1UnsetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetAntiClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1UnsetStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetInRing();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetChiral();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1ClearCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetAtomicMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetExactMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetCoordinateIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetCIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetHvyValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetHeteroValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetX___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1x___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetY___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1y___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetZ___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1z___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetCoordinate___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetVector___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetNewBondVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetNextAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1BeginBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1EndBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1BeginBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1NextBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1BeginNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1NextNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetDistance_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetDistance_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetAngle_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetAngle_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1NewResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->NewResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1DeleteResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1AddBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1InsertBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1DeleteBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1ClearBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->ClearBond();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1CountFreeOxygens___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1ImplicitHydrogenCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1ExplicitHydrogenCount_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1ExplicitHydrogenCount_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1MemberOfRingCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1MemberOfRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1CountRingBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SmallestBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1AverageBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1BOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1KBOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HtoMethyl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetHybAndGeom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1ForceNoH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasNoHForced___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsCarbon___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsSulfur___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsPhosphorus___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsInRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsHeteroatom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsNotCorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsConnected___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsOneThree___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsOneFour___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsCarboxylOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsPhosphateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsSulfateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsNitroOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsAmideNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsNonPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsAromaticNOxide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsAxial___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsAntiClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasChiralitySpecified___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasChiralVolume___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsHbondAcceptor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsHbondDonor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1IsHbondDonorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasAlphaBetaUnsat_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasAlphaBetaUnsat_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasBondOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1CountBondsOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasNonSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasDoubleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasAromaticBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1MatchesSMARTS___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1Visit_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1Visit_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBGraphBase *)(*arg1)->GetParent();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGraphBase *arg2 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGraphBase **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1AddEdge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  (*arg1)->AddEdge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1Error___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->Error(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (*arg1)->SetMatch(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1Eval___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  result = (bool)(*arg1)->Eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(*arg1)->GetMatch();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1ClassDescription___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1HasData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1DataSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1GetData_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1BeginData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolAtomBFSIter_1EndData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolBondIter_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter();
  *(OpenBabel::OBMolBondIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolBondIter_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter(arg1);
  *(OpenBabel::OBMolBondIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBMolBondIter_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = 0 ;
  OpenBabel::OBMolBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolBondIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter((OpenBabel::OBMolBondIter const &)*arg1);
  *(OpenBabel::OBMolBondIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1good___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)((OpenBabel::OBMolBondIter const *)arg1)->operator bool();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1inc___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ;
  OpenBabel::OBMolBondIter result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBMolBondIter **)&jresult = new OpenBabel::OBMolBondIter((OpenBabel::OBMolBondIter &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1deref___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBMolBondIter const *)arg1)->operator ->();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1_1_1ref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  {
    OpenBabel::OBBond &_result_ref = ((OpenBabel::OBMolBondIter const *)arg1)->operator *();
    result = (OpenBabel::OBBond *) &_result_ref;
  }
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBMolBondIter___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetBO___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetBO(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetBegin___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->SetBegin(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetEnd___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->SetEnd(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetLength___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (double)jarg3; 
  (*arg1)->SetLength(arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1Set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jint jarg5, jint jarg6) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (*arg1)->Set(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetKSingle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetKSingle();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetKDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetKDouble();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetKTriple___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetKTriple();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetHash___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetHash();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetWedge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetWedge();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetUp___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetUp();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetDown___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetDown();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetInRing();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetClosure___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetClosure();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1UnsetHash___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetHash();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1UnsetWedge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetWedge();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1UnsetUp___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetUp();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1UnsetDown___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetDown();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1UnsetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1UnsetKekule___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetKekule();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetBO___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBO();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetBondOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBondOrder();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetFlags___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetFlags();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetBeginAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBeginAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetEndAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetEndAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetBeginAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetEndAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetEquibLength___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (double)(*arg1)->GetEquibLength();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetLength___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (double)(*arg1)->GetLength();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetNbrAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (int)(*arg1)->GetNbrAtomIdx(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsRotor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsRotor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsAmide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsPrimaryAmide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsPrimaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsSecondaryAmide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsSecondaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsEster___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsEster();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsCarbonyl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbonyl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsSingle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsSingle();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDouble();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsTriple___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsTriple();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsKSingle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKSingle();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsKDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKDouble();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsKTriple___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKTriple();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsClosure___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsClosure();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsUp___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsUp();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsDown___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDown();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsWedge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsWedge();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsHash___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsHash();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1IsDoubleBondGeometry___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDoubleBondGeometry();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1Visit_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1Visit_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBGraphBase *)(*arg1)->GetParent();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGraphBase *arg2 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGraphBase **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetBgn___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (*arg1)->SetBgn(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SwapEnds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SwapEnds();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetBgn___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(*arg1)->GetBgn();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetEnd___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(*arg1)->GetEnd();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1Error___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->Error(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1Eval___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  result = (bool)(*arg1)->Eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1ClassDescription___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1HasData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1DeleteData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1DeleteData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1DeleteData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1DataSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1GetData_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1BeginData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBMolBondIter_1EndData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBAtomAtomIter_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter();
  *(OpenBabel::OBAtomAtomIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBAtomAtomIter_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtomAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter(arg1);
  *(OpenBabel::OBAtomAtomIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBAtomAtomIter_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = 0 ;
  OpenBabel::OBAtomAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomAtomIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter((OpenBabel::OBAtomAtomIter const &)*arg1);
  *(OpenBabel::OBAtomAtomIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1good___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)((OpenBabel::OBAtomAtomIter const *)arg1)->operator bool();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1inc___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  OpenBabel::OBAtomAtomIter result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBAtomAtomIter **)&jresult = new OpenBabel::OBAtomAtomIter((OpenBabel::OBAtomAtomIter &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1deref___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBAtomAtomIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1_1_1ref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBAtomAtomIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBAtomAtomIter___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->Clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IncrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1DecrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetType_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetType_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetVector_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetVector_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetVector_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetVector();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1UnsetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetAntiClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1UnsetStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetInRing();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetChiral();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1ClearCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetAtomicMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetExactMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetCoordinateIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetCIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetHvyValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetHeteroValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetX___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1x___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetY___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1y___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetZ___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1z___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetCoordinate___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetVector___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetNewBondVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetNextAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1BeginBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1EndBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1BeginBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1NextBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1BeginNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1NextNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetDistance_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetDistance_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetAngle_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetAngle_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1NewResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->NewResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1DeleteResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1AddBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1InsertBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1DeleteBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1ClearBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->ClearBond();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1CountFreeOxygens___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1ImplicitHydrogenCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1ExplicitHydrogenCount_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1ExplicitHydrogenCount_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1MemberOfRingCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1MemberOfRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1CountRingBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SmallestBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1AverageBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1BOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1KBOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HtoMethyl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetHybAndGeom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1ForceNoH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasNoHForced___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsCarbon___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsSulfur___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsPhosphorus___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsInRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsHeteroatom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsNotCorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsConnected___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsOneThree___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsOneFour___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsCarboxylOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsPhosphateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsSulfateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsNitroOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsAmideNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsNonPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsAromaticNOxide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsAxial___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsAntiClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasChiralitySpecified___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasChiralVolume___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsHbondAcceptor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsHbondDonor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1IsHbondDonorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasAlphaBetaUnsat_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasAlphaBetaUnsat_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasBondOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1CountBondsOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasNonSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasDoubleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasAromaticBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1MatchesSMARTS___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1Visit_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1Visit_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBGraphBase *)(*arg1)->GetParent();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGraphBase *arg2 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGraphBase **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1AddEdge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  (*arg1)->AddEdge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1Error___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->Error(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (*arg1)->SetMatch(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1Eval___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  result = (bool)(*arg1)->Eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(*arg1)->GetMatch();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1ClassDescription___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1HasData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1DataSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1GetData_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1BeginData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomAtomIter_1EndData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBAtomBondIter_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter();
  *(OpenBabel::OBAtomBondIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBAtomBondIter_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtomBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter(arg1);
  *(OpenBabel::OBAtomBondIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBAtomBondIter_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = 0 ;
  OpenBabel::OBAtomBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomBondIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter((OpenBabel::OBAtomBondIter const &)*arg1);
  *(OpenBabel::OBAtomBondIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1good___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)((OpenBabel::OBAtomBondIter const *)arg1)->operator bool();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1inc___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ;
  OpenBabel::OBAtomBondIter result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBAtomBondIter **)&jresult = new OpenBabel::OBAtomBondIter((OpenBabel::OBAtomBondIter &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1deref___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBAtomBondIter const *)arg1)->operator ->();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1_1_1ref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  {
    OpenBabel::OBBond &_result_ref = ((OpenBabel::OBAtomBondIter const *)arg1)->operator *();
    result = (OpenBabel::OBBond *) &_result_ref;
  }
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBAtomBondIter___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetBO___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetBO(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetBegin___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->SetBegin(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetEnd___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->SetEnd(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetLength___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (double)jarg3; 
  (*arg1)->SetLength(arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1Set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jint jarg5, jint jarg6) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (*arg1)->Set(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetKSingle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetKSingle();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetKDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetKDouble();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetKTriple___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetKTriple();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetHash___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetHash();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetWedge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetWedge();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetUp___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetUp();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetDown___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetDown();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetInRing();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetClosure___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetClosure();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1UnsetHash___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetHash();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1UnsetWedge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetWedge();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1UnsetUp___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetUp();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1UnsetDown___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetDown();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1UnsetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1UnsetKekule___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetKekule();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetBO___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBO();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetBondOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBondOrder();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetFlags___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetFlags();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetBeginAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBeginAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetEndAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetEndAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetBeginAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetEndAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetEquibLength___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (double)(*arg1)->GetEquibLength();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetLength___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (double)(*arg1)->GetLength();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetNbrAtomIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (int)(*arg1)->GetNbrAtomIdx(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsRotor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsRotor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsAmide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsPrimaryAmide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsPrimaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsSecondaryAmide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsSecondaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsEster___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsEster();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsCarbonyl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbonyl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsSingle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsSingle();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDouble();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsTriple___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsTriple();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsKSingle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKSingle();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsKDouble___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKDouble();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsKTriple___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKTriple();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsClosure___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsClosure();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsUp___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsUp();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsDown___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDown();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsWedge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsWedge();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsHash___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsHash();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1IsDoubleBondGeometry___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDoubleBondGeometry();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1Visit_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1Visit_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBGraphBase *)(*arg1)->GetParent();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGraphBase *arg2 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGraphBase **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetBgn___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (*arg1)->SetBgn(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SwapEnds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SwapEnds();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetBgn___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(*arg1)->GetBgn();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetEnd___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(*arg1)->GetEnd();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1Error___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->Error(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1Eval___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  result = (bool)(*arg1)->Eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1ClassDescription___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1HasData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1DeleteData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1DeleteData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1DeleteData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1DataSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1GetData_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1BeginData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBAtomBondIter_1EndData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBResidueIter_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter();
  *(OpenBabel::OBResidueIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBResidueIter_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidueIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter(arg1);
  *(OpenBabel::OBResidueIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBResidueIter_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = 0 ;
  OpenBabel::OBResidueIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter((OpenBabel::OBResidueIter const &)*arg1);
  *(OpenBabel::OBResidueIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1good___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (bool)((OpenBabel::OBResidueIter const *)arg1)->operator bool();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1inc___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  int arg2 ;
  OpenBabel::OBResidueIter result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBResidueIter **)&jresult = new OpenBabel::OBResidueIter((OpenBabel::OBResidueIter &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1_1_1deref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)((OpenBabel::OBResidueIter const *)arg1)->operator ->();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1_1_1ref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  {
    OpenBabel::OBResidue &_result_ref = ((OpenBabel::OBResidueIter const *)arg1)->operator *();
    result = (OpenBabel::OBResidue *) &_result_ref;
  }
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBResidueIter___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1AddAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->AddAtom(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1InsertAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->InsertAtom(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1RemoveAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->RemoveAtom(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  (*arg1)->Clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1SetName___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->SetName((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1SetNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1SetChain___(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (char)jarg2; 
  (*arg1)->SetChain(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1SetChainNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetChainNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1SetAtomID___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (*arg1)->SetAtomID(arg2,(std::string const &)*arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1SetHetAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->SetHetAtom(arg2,arg3);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1SetSerialNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetSerialNum(arg2,arg3);
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetName___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->GetName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetNumAtoms___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetNumAtoms();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jchar JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetChain___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jchar jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (char)(*arg1)->GetChain();
  jresult = (jchar)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetChainNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetChainNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetResKey___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetResKey();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetAtoms___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->GetAtoms();
  *(std::vector<OpenBabel::OBAtom * > **)&jresult = new std::vector<OpenBabel::OBAtom * >((std::vector<OpenBabel::OBAtom * > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetBonds_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  bool arg2 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->GetBonds(arg2);
  *(std::vector<OpenBabel::OBBond * > **)&jresult = new std::vector<OpenBabel::OBBond * >((std::vector<OpenBabel::OBBond * > &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetBonds_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->GetBonds();
  *(std::vector<OpenBabel::OBBond * > **)&jresult = new std::vector<OpenBabel::OBBond * >((std::vector<OpenBabel::OBBond * > &)result); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetAtomID___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (*arg1)->GetAtomID(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetSerialNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)(*arg1)->GetSerialNum(arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetAminoAcidProperty___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->GetAminoAcidProperty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetAtomProperty___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(*arg1)->GetAtomProperty(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetResidueProperty___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->GetResidueProperty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1IsHetAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsHetAtom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1IsResidueType___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsResidueType(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1BeginAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector<OpenBabel::OBAtom * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1NextAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector<OpenBabel::OBAtom * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1ClassDescription___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1HasData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1DeleteData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1DeleteData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1DeleteData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1DataSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1GetData_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1BeginData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueIter_1EndData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBResidueAtomIter_1_1SWIG_10___(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter();
  *(OpenBabel::OBResidueAtomIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBResidueAtomIter_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBResidueAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter(arg1);
  *(OpenBabel::OBResidueAtomIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_new_1OBResidueAtomIter_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = 0 ;
  OpenBabel::OBResidueAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueAtomIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter((OpenBabel::OBResidueAtomIter const &)*arg1);
  *(OpenBabel::OBResidueAtomIter **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1good___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)((OpenBabel::OBResidueAtomIter const *)arg1)->operator bool();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1inc___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  OpenBabel::OBResidueAtomIter result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(OpenBabel::OBResidueAtomIter **)&jresult = new OpenBabel::OBResidueAtomIter((OpenBabel::OBResidueAtomIter &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1deref___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBResidueAtomIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1_1_1ref_1_1___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBResidueAtomIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_delete_1OBResidueAtomIter___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1Clear___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->Clear();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IncrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1DecrementImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1, jshort jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetType_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetType_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetVector_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetVector_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetVector_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetVector();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1UnsetAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetAntiClockwiseStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1UnsetStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetInRing();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetChiral();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1ClearCoordPtr___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetFormalCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetAtomicNum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetIsotope___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetSpinMultiplicity___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetAtomicMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetExactMass___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetCoordinateIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetCIdx___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetHyb___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetImplicitValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetHvyValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetHeteroValence___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetType___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetX___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1x___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetY___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1y___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetZ___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1z___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetCoordinate___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetVector___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetPartialCharge___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetNewBondVector___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetNextAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1BeginBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1EndBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBEdgeBase * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jresult = new std::vector<OpenBabel::OBEdgeBase * >::iterator((std::vector<OpenBabel::OBEdgeBase * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1BeginBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1NextBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1BeginNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1NextNbrAtom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetDistance_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetDistance_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetAngle_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetAngle_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1NewResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->NewResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1DeleteResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1AddBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1InsertBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector<OpenBabel::OBEdgeBase * >::iterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBEdgeBase * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBEdgeBase * >::iterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1DeleteBond___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1ClearBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->ClearBond();
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1CountFreeOxygens___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1ImplicitHydrogenCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1ExplicitHydrogenCount_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1ExplicitHydrogenCount_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1MemberOfRingCount___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1MemberOfRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1CountRingBonds___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SmallestBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1AverageBondAngle___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1BOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1KBOSum___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HtoMethyl___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetHybAndGeom___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1ForceNoH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasNoHForced___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasResidue___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsCarbon___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsSulfur___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsPhosphorus___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsAromatic___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsInRing___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsInRingSize___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsHeteroatom___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsNotCorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsConnected___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsOneThree___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsOneFour___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsCarboxylOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsPhosphateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsSulfateOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsNitroOxygen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsAmideNitrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsNonPolarHydrogen___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsAromaticNOxide___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsChiral___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsAxial___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsAntiClockwise___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsPositiveStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsNegativeStereo___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasChiralitySpecified___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasChiralVolume___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsHbondAcceptor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsHbondDonor___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1IsHbondDonorH___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasAlphaBetaUnsat_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasAlphaBetaUnsat_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasBondOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1CountBondsOfOrder___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasNonSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasSingleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasDoubleBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasAromaticBond___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1MatchesSMARTS___(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1Visit_1set___(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1Visit_1get___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGraphBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBGraphBase *)(*arg1)->GetParent();
  *(OpenBabel::OBGraphBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetParent___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGraphBase *arg2 = (OpenBabel::OBGraphBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGraphBase **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1AddEdge___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBEdgeBase *arg2 = (OpenBabel::OBEdgeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBEdgeBase **)&jarg2; 
  (*arg1)->AddEdge(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1Error___(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->Error(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  (*arg1)->SetMatch(arg2);
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1Eval___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBNodeBase *arg2 = (OpenBabel::OBNodeBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBNodeBase **)&jarg2; 
  result = (bool)(*arg1)->Eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetMatch___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBNodeBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBNodeBase *)(*arg1)->GetMatch();
  *(OpenBabel::OBNodeBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1DoTransformations___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1ClassDescription___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1HasData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_11___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_12___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


JNIEXPORT void JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1SetData___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1DataSize___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetData_1_1SWIG_10___(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1GetData_1_1SWIG_13___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1BeginData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_netfsourceforgefopenbabelJNI_OBResidueAtomIter_1EndData___(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBElementTableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBElementTable **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBIsotopeTableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBIsotopeTable **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBTypeTableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBTypeTable **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBResidueDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBResidueData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBCommentDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBCommentData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBExternalBondDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBExternalBondData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBPairDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBPairData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBSetDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBSetData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBVirtualBondUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBVirtualBond **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBRingDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBRingData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBUnitCellUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBUnitCell **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBConformerDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBConformerData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBSymmetryDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBSymmetryData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBTorsionDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBTorsionData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBAngleDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBAngleData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBChiralDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBChiralData **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBSerialNumsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBSerialNums **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBNodeBaseUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBNodeBase **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBEdgeBaseUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBEdgeBase **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBGraphBaseUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBGraphBase **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBResidueUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBResidue **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBAtomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBNodeBase **)&baseptr = *(OpenBabel::OBAtom **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBBondUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBEdgeBase **)&baseptr = *(OpenBabel::OBBond **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_net.sourceforge.openbabelJNI_SWIGOBMolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGraphBase **)&baseptr = *(OpenBabel::OBMol **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

