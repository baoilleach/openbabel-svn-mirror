/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


// used to set import/export for Cygwin DLLs
#ifdef WIN32
#define USING_OBDLL
#endif

#include <math.h>

#include <openbabel/obutil.h>
#include <openbabel/math/vector3.h>
#include <openbabel/math/matrix3x3.h>
#include <openbabel/generic.h>

#include <openbabel/base.h>
#include <openbabel/mol.h>
#include <openbabel/ring.h>
#include <openbabel/obconversion.h>
#include <openbabel/oberror.h>
#include <openbabel/pluginiter.h>
#include <openbabel/fingerprint.h>

#include <openbabel/forcefield.h>

#include <openbabel/data.h>
#include <openbabel/parsmart.h>

#include <openbabel/bitvec.h>
#include <openbabel/chains.h>
#include <openbabel/typer.h>


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector<int >::const_reference std_vector_Sl_int_Sg__get(std::vector<int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector<int > *self,int i,std::vector<int >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector<unsigned int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector<unsigned int > *self,int i,std::vector<unsigned int >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<std::vector<int > >::const_reference std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(std::vector<std::vector<int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(std::vector<std::vector<int > > *self,int i,std::vector<std::vector<int > >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<double >::const_reference std_vector_Sl_double_Sg__get(std::vector<double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector<double > *self,int i,std::vector<double >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::vector3 >::const_reference std_vector_Sl_OpenBabel_vector3_Sg__get(std::vector<OpenBabel::vector3 > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_vector3_Sg__set(std::vector<OpenBabel::vector3 > *self,int i,std::vector<OpenBabel::vector3 >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBMol >::const_reference std_vector_Sl_OpenBabel_OBMol_Sg__get(std::vector<OpenBabel::OBMol > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBMol_Sg__set(std::vector<OpenBabel::OBMol > *self,int i,std::vector<OpenBabel::OBMol >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBBond >::const_reference std_vector_Sl_OpenBabel_OBBond_Sg__get(std::vector<OpenBabel::OBBond > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBBond_Sg__set(std::vector<OpenBabel::OBBond > *self,int i,std::vector<OpenBabel::OBBond >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBResidue >::const_reference std_vector_Sl_OpenBabel_OBResidue_Sg__get(std::vector<OpenBabel::OBResidue > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBResidue_Sg__set(std::vector<OpenBabel::OBResidue > *self,int i,std::vector<OpenBabel::OBResidue >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBRing >::const_reference std_vector_Sl_OpenBabel_OBRing_Sg__get(std::vector<OpenBabel::OBRing > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBRing_Sg__set(std::vector<OpenBabel::OBRing > *self,int i,std::vector<OpenBabel::OBRing >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<OpenBabel::OBGenericData * >::const_reference std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__get(std::vector<OpenBabel::OBGenericData * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__set(std::vector<OpenBabel::OBGenericData * > *self,int i,std::vector<OpenBabel::OBGenericData * >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<int > *)new std::vector<int >();
  *(std::vector<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<int >::size_type arg1 ;
  std::vector<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<int >::size_type)jarg1; 
  result = (std::vector<int > *)new std::vector<int >(arg1);
  *(std::vector<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  result = ((std::vector<int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorInt_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  result = ((std::vector<int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  arg2 = (std::vector<int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vectorInt_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  result = (bool)((std::vector<int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorInt_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::value_type *arg2 = 0 ;
  std::vector<int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  temp2 = (std::vector<int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_vectorInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  int arg2 ;
  std::vector<int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<int >::const_reference _result_ref = std_vector_Sl_int_Sg__get(arg1,arg2);
      result = (std::vector<int >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  int arg2 ;
  std::vector<int >::value_type *arg3 = 0 ;
  std::vector<int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vectorInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorUnsignedInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<unsigned int > *)new std::vector<unsigned int >();
  *(std::vector<unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorUnsignedInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<unsigned int >::size_type arg1 ;
  std::vector<unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<unsigned int >::size_type)jarg1; 
  result = (std::vector<unsigned int > *)new std::vector<unsigned int >(arg1);
  *(std::vector<unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorUnsignedInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<unsigned int > **)&jarg1; 
  result = ((std::vector<unsigned int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorUnsignedInt_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<unsigned int > **)&jarg1; 
  result = ((std::vector<unsigned int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorUnsignedInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<unsigned int > **)&jarg1; 
  arg2 = (std::vector<unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vectorUnsignedInt_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<unsigned int > **)&jarg1; 
  result = (bool)((std::vector<unsigned int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorUnsignedInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<unsigned int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorUnsignedInt_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::value_type *arg2 = 0 ;
  std::vector<unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<unsigned int > **)&jarg1; 
  temp2 = (std::vector<unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<unsigned int >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorUnsignedInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  int arg2 ;
  std::vector<unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<unsigned int >::const_reference _result_ref = std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
      result = (std::vector<unsigned int >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorUnsignedInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  int arg2 ;
  std::vector<unsigned int >::value_type *arg3 = 0 ;
  std::vector<unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vectorUnsignedInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<unsigned int > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vvInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<std::vector<int > > *)new std::vector<std::vector<int > >();
  *(std::vector<std::vector<int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vvInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > >::size_type arg1 ;
  std::vector<std::vector<int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<std::vector<int > >::size_type)jarg1; 
  result = (std::vector<std::vector<int > > *)new std::vector<std::vector<int > >(arg1);
  *(std::vector<std::vector<int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vvInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  std::vector<std::vector<int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  result = ((std::vector<std::vector<int > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vvInt_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  std::vector<std::vector<int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  result = ((std::vector<std::vector<int > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vvInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  std::vector<std::vector<int > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  arg2 = (std::vector<std::vector<int > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vvInt_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  result = (bool)((std::vector<std::vector<int > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vvInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vvInt_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  std::vector<std::vector<int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  arg2 = *(std::vector<std::vector<int > >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<std::vector<int > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vvInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  int arg2 ;
  std::vector<std::vector<int > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<std::vector<int > >::const_reference _result_ref = std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(arg1,arg2);
      result = (std::vector<std::vector<int > >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<std::vector<int > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vvInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  int arg2 ;
  std::vector<std::vector<int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<std::vector<int > >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(arg1,arg2,(std::vector<int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vvInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::vector<int > > *arg1 = (std::vector<std::vector<int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::vector<int > > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<double > *)new std::vector<double >();
  *(std::vector<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<double >::size_type arg1 ;
  std::vector<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<double >::size_type)jarg1; 
  result = (std::vector<double > *)new std::vector<double >(arg1);
  *(std::vector<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorDouble_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  result = ((std::vector<double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorDouble_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  result = ((std::vector<double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorDouble_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  arg2 = (std::vector<double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vectorDouble_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  result = (bool)((std::vector<double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorDouble_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorDouble_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::value_type *arg2 = 0 ;
  std::vector<double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  temp2 = (std::vector<double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_vectorDouble_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  int arg2 ;
  std::vector<double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<double >::const_reference _result_ref = std_vector_Sl_double_Sg__get(arg1,arg2);
      result = (std::vector<double >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  int arg2 ;
  std::vector<double >::value_type *arg3 = 0 ;
  std::vector<double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vectorDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vVector3_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::vector3 > *)new std::vector<OpenBabel::vector3 >();
  *(std::vector<OpenBabel::vector3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vVector3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 >::size_type arg1 ;
  std::vector<OpenBabel::vector3 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::vector3 >::size_type)jarg1; 
  result = (std::vector<OpenBabel::vector3 > *)new std::vector<OpenBabel::vector3 >(arg1);
  *(std::vector<OpenBabel::vector3 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vVector3_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  std::vector<OpenBabel::vector3 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  result = ((std::vector<OpenBabel::vector3 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vVector3_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  std::vector<OpenBabel::vector3 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  result = ((std::vector<OpenBabel::vector3 > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vVector3_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  std::vector<OpenBabel::vector3 >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::vector3 >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vVector3_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::vector3 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vVector3_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vVector3_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  std::vector<OpenBabel::vector3 >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::vector3 >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::vector3 >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::vector3 >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vVector3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::vector3 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::vector3 >::const_reference _result_ref = std_vector_Sl_OpenBabel_vector3_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::vector3 >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::vector3 >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vVector3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::vector3 >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::vector3 >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::vector3 >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_vector3_Sg__set(arg1,arg2,(OpenBabel::vector3 const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vVector3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::vector3 > *arg1 = (std::vector<OpenBabel::vector3 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::vector3 > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorMol_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBMol > *)new std::vector<OpenBabel::OBMol >();
  *(std::vector<OpenBabel::OBMol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorMol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol >::size_type arg1 ;
  std::vector<OpenBabel::OBMol > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBMol >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBMol > *)new std::vector<OpenBabel::OBMol >(arg1);
  *(std::vector<OpenBabel::OBMol > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorMol_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  std::vector<OpenBabel::OBMol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBMol > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorMol_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  std::vector<OpenBabel::OBMol >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBMol > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorMol_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  std::vector<OpenBabel::OBMol >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBMol >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vectorMol_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBMol > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorMol_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorMol_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  std::vector<OpenBabel::OBMol >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBMol >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBMol >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::OBMol >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorMol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBMol >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBMol >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBMol_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBMol >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBMol >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorMol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBMol >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::OBMol >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBMol >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_OBMol_Sg__set(arg1,arg2,(OpenBabel::OBMol const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vectorMol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBMol > *arg1 = (std::vector<OpenBabel::OBMol > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBMol > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBBond > *)new std::vector<OpenBabel::OBBond >();
  *(std::vector<OpenBabel::OBBond > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond >::size_type arg1 ;
  std::vector<OpenBabel::OBBond > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBBond >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBBond > *)new std::vector<OpenBabel::OBBond >(arg1);
  *(std::vector<OpenBabel::OBBond > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorBond_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  std::vector<OpenBabel::OBBond >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBBond > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorBond_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  std::vector<OpenBabel::OBBond >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBBond > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorBond_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  std::vector<OpenBabel::OBBond >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBBond >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vectorBond_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBBond > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorBond_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorBond_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  std::vector<OpenBabel::OBBond >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBBond >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBBond >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::OBBond >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorBond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBBond >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBBond >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBBond_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBBond >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBBond >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorBond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBBond >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::OBBond >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBBond >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_OBBond_Sg__set(arg1,arg2,(OpenBabel::OBBond const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vectorBond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBBond > *arg1 = (std::vector<OpenBabel::OBBond > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBBond > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorResidue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBResidue > *)new std::vector<OpenBabel::OBResidue >();
  *(std::vector<OpenBabel::OBResidue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorResidue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue >::size_type arg1 ;
  std::vector<OpenBabel::OBResidue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBResidue >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBResidue > *)new std::vector<OpenBabel::OBResidue >(arg1);
  *(std::vector<OpenBabel::OBResidue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorResidue_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  std::vector<OpenBabel::OBResidue >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBResidue > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorResidue_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  std::vector<OpenBabel::OBResidue >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBResidue > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorResidue_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  std::vector<OpenBabel::OBResidue >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBResidue >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vectorResidue_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBResidue > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorResidue_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorResidue_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  std::vector<OpenBabel::OBResidue >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBResidue >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBResidue >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::OBResidue >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorResidue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBResidue >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBResidue >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBResidue_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBResidue >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBResidue >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorResidue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBResidue >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::OBResidue >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBResidue >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_OBResidue_Sg__set(arg1,arg2,(OpenBabel::OBResidue const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vectorResidue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBResidue > *arg1 = (std::vector<OpenBabel::OBResidue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBResidue > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBRing > *)new std::vector<OpenBabel::OBRing >();
  *(std::vector<OpenBabel::OBRing > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing >::size_type arg1 ;
  std::vector<OpenBabel::OBRing > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBRing >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBRing > *)new std::vector<OpenBabel::OBRing >(arg1);
  *(std::vector<OpenBabel::OBRing > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorRing_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  std::vector<OpenBabel::OBRing >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBRing > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorRing_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  std::vector<OpenBabel::OBRing >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBRing > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorRing_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  std::vector<OpenBabel::OBRing >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBRing >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vectorRing_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBRing > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorRing_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorRing_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  std::vector<OpenBabel::OBRing >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBRing >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBRing >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<OpenBabel::OBRing >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorRing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBRing >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBRing >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBRing_Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBRing >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBRing >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorRing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBRing >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<OpenBabel::OBRing >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBRing >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OpenBabel_OBRing_Sg__set(arg1,arg2,(OpenBabel::OBRing const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vectorRing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBRing > *arg1 = (std::vector<OpenBabel::OBRing > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBRing > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<OpenBabel::OBGenericData * > *)new std::vector<OpenBabel::OBGenericData * >();
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vectorData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * >::size_type arg1 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<OpenBabel::OBGenericData * >::size_type)jarg1; 
  result = (std::vector<OpenBabel::OBGenericData * > *)new std::vector<OpenBabel::OBGenericData * >(arg1);
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorData_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  std::vector<OpenBabel::OBGenericData * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBGenericData * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorData_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  std::vector<OpenBabel::OBGenericData * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  result = ((std::vector<OpenBabel::OBGenericData * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorData_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  std::vector<OpenBabel::OBGenericData * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  arg2 = (std::vector<OpenBabel::OBGenericData * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vectorData_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  result = (bool)((std::vector<OpenBabel::OBGenericData * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorData_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorData_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  std::vector<OpenBabel::OBGenericData * >::value_type *arg2 = 0 ;
  std::vector<OpenBabel::OBGenericData * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  temp2 = *(std::vector<OpenBabel::OBGenericData * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<OpenBabel::OBGenericData * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vectorData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBGenericData * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<OpenBabel::OBGenericData * >::const_reference _result_ref = std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__get(arg1,arg2);
      result = (std::vector<OpenBabel::OBGenericData * >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<OpenBabel::OBGenericData * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vectorData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBGenericData * >::value_type *arg3 = 0 ;
  std::vector<OpenBabel::OBGenericData * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector<OpenBabel::OBGenericData * >::value_type *)&jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_OpenBabel_OBGenericData_Sm__Sg__set(arg1,arg2,(OpenBabel::OBGenericData *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vectorData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<OpenBabel::OBGenericData * > *arg1 = (std::vector<OpenBabel::OBGenericData * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBGlobalDataBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBGlobalDataBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBGlobalDataBase *)new OpenBabel::OBGlobalDataBase();
  *(OpenBabel::OBGlobalDataBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBGlobalDataBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBGlobalDataBase_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  (arg1)->Init();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBGlobalDataBase_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBGlobalDataBase_1SetReadDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetReadDirectory(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBGlobalDataBase_1SetEnvironmentVariable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetEnvironmentVariable(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBGlobalDataBase_1ParseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBGlobalDataBase *arg1 = (OpenBabel::OBGlobalDataBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGlobalDataBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBElement *)new OpenBabel::OBElement();
  *(OpenBabel::OBElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jdouble jarg3, jdouble jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11, jdouble jarg12, jstring jarg13) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  std::string arg13 ;
  OpenBabel::OBElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  if(!jarg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg13_pstr = (const char *)jenv->GetStringUTFChars(jarg13, 0); 
  if (!arg13_pstr) return 0;
  arg13 =  std::string(arg13_pstr);
  jenv->ReleaseStringUTFChars(jarg13, arg13_pstr); 
  result = (OpenBabel::OBElement *)new OpenBabel::OBElement(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  *(OpenBabel::OBElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBElement_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (int)(arg1)->GetAtomicNum();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBElement_1GetSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (char *)(arg1)->GetSymbol();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElement_1GetCovalentRad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetCovalentRad();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElement_1GetVdwRad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetVdwRad();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElement_1GetMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBElement_1GetMaxBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (int)(arg1)->GetMaxBonds();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElement_1GetElectroNeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetElectroNeg();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElement_1GetIonization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetIonization();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElement_1GetElectronAffinity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetElectronAffinity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBElement_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (arg1)->GetName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElement_1GetRed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetRed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElement_1GetGreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetGreen();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElement_1GetBlue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  result = (double)(arg1)->GetBlue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBElement *arg1 = (OpenBabel::OBElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElement **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBElementTable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBElementTable *)new OpenBabel::OBElementTable();
  *(OpenBabel::OBElementTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBElementTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBElementTable_1ParseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBElementTable_1GetNumberOfElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  result = (unsigned int)(arg1)->GetNumberOfElements();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBElementTable_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBElementTable_1GetAtomicNum_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->GetAtomicNum((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBElementTable_1GetAtomicNum_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (int)(arg1)->GetAtomicNum((char const *)arg2,*arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBElementTable_1GetSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetSymbol(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1GetVdwRad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetVdwRad(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1GetCovalentRad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetCovalentRad(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1GetMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1CorrectedBondRad_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->CorrectedBondRad(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1CorrectedBondRad_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->CorrectedBondRad(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1CorrectedVdwRad_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->CorrectedVdwRad(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1CorrectedVdwRad_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->CorrectedVdwRad(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBElementTable_1GetMaxBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetMaxBonds(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1GetElectroNeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetElectroNeg(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1GetIonization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetIonization(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBElementTable_1GetElectronAffinity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetElectronAffinity(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBElementTable_1GetRGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  std::vector<double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetRGB(arg2);
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBElementTable_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBElementTable *arg1 = (OpenBabel::OBElementTable *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBIsotopeTable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBIsotopeTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBIsotopeTable *)new OpenBabel::OBIsotopeTable();
  *(OpenBabel::OBIsotopeTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBIsotopeTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBIsotopeTable_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBIsotopeTable_1ParseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBIsotopeTable_1GetExactMass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (double)(arg1)->GetExactMass(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBIsotopeTable_1GetExactMass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBIsotopeTable *arg1 = (OpenBabel::OBIsotopeTable *) 0 ;
  unsigned int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)(arg1)->GetExactMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBTypeTable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBTypeTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBTypeTable *)new OpenBabel::OBTypeTable();
  *(OpenBabel::OBTypeTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBTypeTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBTypeTable_1ParseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBTypeTable_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTypeTable_1SetFromType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->SetFromType((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTypeTable_1SetToType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->SetToType((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTypeTable_1Translate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->Translate(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTypeTable_1Translate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->Translate(*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBTypeTable_1Translate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->Translate((std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBTypeTable_1GetFromType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  result = (arg1)->GetFromType();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBTypeTable_1GetToType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBTypeTable *arg1 = (OpenBabel::OBTypeTable *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1; 
  result = (arg1)->GetToType();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBResidueData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBResidueData *)new OpenBabel::OBResidueData();
  *(OpenBabel::OBResidueData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueData_1ParseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueData_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueData_1SetResName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->SetResName((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBResidueData_1LookupBO_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->LookupBO((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBResidueData_1LookupBO_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->LookupBO((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueData_1LookupType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg4 = *(int **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->LookupType((std::string const &)*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueData_1AssignBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AssignBonds(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBResidueData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueData *arg1 = (OpenBabel::OBResidueData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OpenDatafile(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  std::ifstream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ifstream **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ifstream & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = OpenBabel::OpenDatafile(*arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_FILE_1SEP_1CHAR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "/";
  
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) 3.14159265358979323846;
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBStopwatch_1Start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1; 
  (arg1)->Start();
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBStopwatch_1Lap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1; 
  result = (double)(arg1)->Lap();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBStopwatch_1Elapsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1; 
  result = (double)(arg1)->Elapsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBStopwatch(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBStopwatch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBStopwatch *)new OpenBabel::OBStopwatch();
  *(OpenBabel::OBStopwatch **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBStopwatch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBStopwatch *arg1 = (OpenBabel::OBStopwatch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBStopwatch **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSqrtTbl_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSqrtTbl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSqrtTbl *)new OpenBabel::OBSqrtTbl();
  *(OpenBabel::OBSqrtTbl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSqrtTbl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  OpenBabel::OBSqrtTbl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenBabel::OBSqrtTbl *)new OpenBabel::OBSqrtTbl(arg1,arg2);
  *(OpenBabel::OBSqrtTbl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBSqrtTbl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSqrtTbl **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBSqrtTbl_1Sqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSqrtTbl **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((OpenBabel::OBSqrtTbl const *)arg1)->Sqrt(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSqrtTbl_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenBabel::OBSqrtTbl *arg1 = (OpenBabel::OBSqrtTbl *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSqrtTbl **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->Init(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_RAD_1TO_1DEG_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) (180.0/3.14159265358979323846);
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_DEG_1TO_1RAD_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) (3.14159265358979323846/180.0);
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vector3_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1,arg2,arg3);
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vector3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1,arg2);
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vector3_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3(arg1);
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vector3_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::vector3 *)new OpenBabel::vector3();
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1vector3_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *arg1 = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  result = (OpenBabel::vector3 *)new OpenBabel::vector3((OpenBabel::vector3 const &)*arg1);
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vector3_1Set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vector3_1Set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->Set((double const *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vector3_1SetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetX(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vector3_1SetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetY(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vector3_1SetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetZ(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vector3_1Get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->Get(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vector3_1AsArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (double *)((OpenBabel::vector3 const *)arg1)->AsArray();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vector3_1randomUnitVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::OBRandom *arg2 = (OpenBabel::OBRandom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::OBRandom **)&jarg2; 
  (arg1)->randomUnitVector(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_vector3_1randomUnitVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  (arg1)->randomUnitVector();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_vector3_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (arg1)->normalize();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vector3_1CanBeNormalized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (bool)((OpenBabel::vector3 const *)arg1)->CanBeNormalized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_vector3_1length_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (double)((OpenBabel::vector3 const *)arg1)->length_2();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_vector3_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  result = (double)((OpenBabel::vector3 const *)arg1)->length();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_vector3_1x_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  {
    double const &_result_ref = ((OpenBabel::vector3 const *)arg1)->x();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_vector3_1y_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  {
    double const &_result_ref = ((OpenBabel::vector3 const *)arg1)->y();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_vector3_1z_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  {
    double const &_result_ref = ((OpenBabel::vector3 const *)arg1)->z();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vector3_1IsApprox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  result = (bool)((OpenBabel::vector3 const *)arg1)->IsApprox((OpenBabel::vector3 const &)*arg2,(double const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_vector3_1distSq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  result = (double)((OpenBabel::vector3 const *)arg1)->distSq((OpenBabel::vector3 const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_vector3_1createOrthoVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (bool)((OpenBabel::vector3 const *)arg1)->createOrthoVector(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1vector3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::vector3 *arg1 = (OpenBabel::vector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::vector3 **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  result = (double)OpenBabel::dot((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_cross(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *arg1 = 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  result = OpenBabel::cross((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_vectorAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  result = (double)OpenBabel::vectorAngle((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_CalcTorsionAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 *arg1 = 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::vector3 **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return 0;
  } 
  result = (double)OpenBabel::CalcTorsionAngle((OpenBabel::vector3 const &)*arg1,(OpenBabel::vector3 const &)*arg2,(OpenBabel::vector3 const &)*arg3,(OpenBabel::vector3 const &)*arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_Point2Plane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 arg1 ;
  OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 arg4 ;
  double result;
  OpenBabel::vector3 *argp1 ;
  OpenBabel::vector3 *argp2 ;
  OpenBabel::vector3 *argp3 ;
  OpenBabel::vector3 *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(OpenBabel::vector3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(OpenBabel::vector3 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(OpenBabel::vector3 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg4 = *argp4; 
  result = (double)OpenBabel::Point2Plane(arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_Point2PlaneAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  OpenBabel::vector3 arg1 ;
  OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 arg4 ;
  double result;
  OpenBabel::vector3 const *argp1 ;
  OpenBabel::vector3 const *argp2 ;
  OpenBabel::vector3 const *argp3 ;
  OpenBabel::vector3 const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(OpenBabel::vector3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(OpenBabel::vector3 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(OpenBabel::vector3 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return 0;
  }
  arg4 = *argp4; 
  result = (double)OpenBabel::Point2PlaneAngle(arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_VZero_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::vector3 const &_result_ref = OpenBabel::VZero;
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_VX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::vector3 const &_result_ref = OpenBabel::VX;
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_VY_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::vector3 const &_result_ref = OpenBabel::VY;
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_VZ_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::vector3 const &_result_ref = OpenBabel::VZ;
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1matrix3x3_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::matrix3x3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3();
  *(OpenBabel::matrix3x3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1matrix3x3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenBabel::matrix3x3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3(arg1);
  *(OpenBabel::matrix3x3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1matrix3x3_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  OpenBabel::vector3 arg1 ;
  OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 arg3 ;
  OpenBabel::matrix3x3 *result = 0 ;
  OpenBabel::vector3 *argp1 ;
  OpenBabel::vector3 *argp2 ;
  OpenBabel::vector3 *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(OpenBabel::vector3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(OpenBabel::vector3 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3");
    return 0;
  }
  arg3 = *argp3; 
  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3(arg1,arg2,arg3);
  *(OpenBabel::matrix3x3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1matrix3x3_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  double (*arg1)[3] ;
  OpenBabel::matrix3x3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double (**)[3])&jarg1; 
  result = (OpenBabel::matrix3x3 *)new OpenBabel::matrix3x3((double (*)[3])arg1);
  *(OpenBabel::matrix3x3 **)&jresult = result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1GetArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->GetArray(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_matrix3x3_1inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::matrix3x3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  result = ((OpenBabel::matrix3x3 const *)arg1)->inverse();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((OpenBabel::matrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_matrix3x3_1transpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::matrix3x3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  result = ((OpenBabel::matrix3x3 const *)arg1)->transpose();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((OpenBabel::matrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1randomRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::OBRandom *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = *(OpenBabel::OBRandom **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRandom & reference is null");
    return ;
  } 
  (arg1)->randomRotation(*arg2);
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_matrix3x3_1determinant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  result = (double)((OpenBabel::matrix3x3 const *)arg1)->determinant();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_matrix3x3_1isSymmetric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isSymmetric();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_matrix3x3_1isOrthogonal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isOrthogonal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_matrix3x3_1isDiagonal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isDiagonal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_matrix3x3_1isUnitMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  result = (bool)((OpenBabel::matrix3x3 const *)arg1)->isUnitMatrix();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_matrix3x3_1Get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)((OpenBabel::matrix3x3 const *)arg1)->Get(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1SetColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  int arg2 ;
  OpenBabel::vector3 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ;
  } 
  (arg1)->SetColumn(arg2,(OpenBabel::vector3 const &)*arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1SetRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  int arg2 ;
  OpenBabel::vector3 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ;
  } 
  (arg1)->SetRow(arg2,(OpenBabel::vector3 const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_matrix3x3_1GetColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  unsigned int arg2 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((OpenBabel::matrix3x3 const *)arg1)->GetColumn(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_matrix3x3_1GetRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  unsigned int arg2 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((OpenBabel::matrix3x3 const *)arg1)->GetRow(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1SetupRotMat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetupRotMat(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1PlaneReflection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ;
  } 
  (arg1)->PlaneReflection((OpenBabel::vector3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1RotAboutAxisByAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->RotAboutAxisByAngle((OpenBabel::vector3 const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1FillOrth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->FillOrth(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_matrix3x3_1findEigenvectorsIfSymmetric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::matrix3x3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = ((OpenBabel::matrix3x3 const *)arg1)->findEigenvectorsIfSymmetric(*arg2);
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((OpenBabel::matrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_matrix3x3_1jacobi(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  OpenBabel::matrix3x3::jacobi(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1matrix3x3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::matrix3x3 *arg1 = (OpenBabel::matrix3x3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::matrix3x3 **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_Trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  {
    std::string &_result_ref = OpenBabel::Trim(*arg1);
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_UndefinedData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::UndefinedData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_PairData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::PairData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_EnergyData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::EnergyData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CommentData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CommentData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ConformerData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::ConformerData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ExternalBondData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::ExternalBondData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_RotamerList_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::RotamerList;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_VirtualBondData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::VirtualBondData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_RingData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::RingData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_TorsionData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::TorsionData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AngleData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::AngleData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SerialNums_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::SerialNums;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_UnitCell_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::UnitCell;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SpinData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::SpinData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ChargeData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::ChargeData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SymmetryData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::SymmetryData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ChiralData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::ChiralData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OccupationData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::OccupationData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_DensityData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::DensityData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ElectronicData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::ElectronicData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_VibrationData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::VibrationData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_RotationData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::RotationData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NuclearData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::NuclearData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SetData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::SetData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData7_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData9_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData9;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData10_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData10;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData11;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData12;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData13;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData14_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData14;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CustomData15_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBGenericDataType::CustomData15;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBGenericData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string arg1 ;
  unsigned int arg2 ;
  OpenBabel::DataOrigin arg3 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (OpenBabel::DataOrigin)jarg3; 
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1,arg2,arg3);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBGenericData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1,arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBGenericData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData(arg1);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBGenericData_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBGenericData *)new OpenBabel::OBGenericData();
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBGenericData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBGenericData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBGenericData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBGenericData_1SetAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetAttribute((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBGenericData_1SetOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  OpenBabel::DataOrigin arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  arg2 = (OpenBabel::DataOrigin)jarg2; 
  (arg1)->SetOrigin(arg2);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBGenericData_1GetAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBGenericData const *)arg1)->GetAttribute();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBGenericData_1GetDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBGenericData const *)arg1)->GetDataType();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBGenericData_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBGenericData const *)arg1)->GetValue();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBGenericData_1GetOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBGenericData *arg1 = (OpenBabel::OBGenericData *) 0 ;
  OpenBabel::DataOrigin result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBGenericData **)&jarg1; 
  result = (OpenBabel::DataOrigin)((OpenBabel::OBGenericData const *)arg1)->GetOrigin();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBCommentData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBCommentData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBCommentData *)new OpenBabel::OBCommentData();
  *(OpenBabel::OBCommentData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBCommentData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBCommentData *arg1 = 0 ;
  OpenBabel::OBCommentData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBCommentData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBCommentData *)new OpenBabel::OBCommentData((OpenBabel::OBCommentData const &)*arg1);
  *(OpenBabel::OBCommentData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBCommentData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBCommentData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBCommentData_1SetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetData((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBCommentData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBCommentData const *)arg1)->GetData();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBCommentData_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBCommentData const *)arg1)->GetValue();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBCommentData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBCommentData *arg1 = (OpenBabel::OBCommentData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBCommentData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBExternalBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond();
  *(OpenBabel::OBExternalBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBExternalBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  int arg3 ;
  OpenBabel::OBExternalBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond(arg1,arg2,arg3);
  *(OpenBabel::OBExternalBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBExternalBond_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBond *arg1 = 0 ;
  OpenBabel::OBExternalBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBExternalBond const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBExternalBond *)new OpenBabel::OBExternalBond((OpenBabel::OBExternalBond const &)*arg1);
  *(OpenBabel::OBExternalBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBExternalBond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBExternalBond_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  result = (int)((OpenBabel::OBExternalBond const *)arg1)->GetIdx();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBExternalBond_1GetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBExternalBond const *)arg1)->GetAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBExternalBond_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBExternalBond const *)arg1)->GetBond();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBExternalBond_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBExternalBond_1SetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->SetAtom(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBExternalBond_1SetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBExternalBond *arg1 = (OpenBabel::OBExternalBond *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBExternalBond **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (arg1)->SetBond(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBExternalBondData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBondData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBExternalBondData *)new OpenBabel::OBExternalBondData();
  *(OpenBabel::OBExternalBondData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBExternalBondData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBExternalBondData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBExternalBondData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetData(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBExternalBondData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  std::vector<OpenBabel::OBExternalBond > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1; 
  result = (std::vector<OpenBabel::OBExternalBond > *)(arg1)->GetData();
  *(std::vector<OpenBabel::OBExternalBond > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBExternalBondData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBExternalBondData *arg1 = (OpenBabel::OBExternalBondData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBExternalBondData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBPairData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBPairData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBPairData *)new OpenBabel::OBPairData();
  *(OpenBabel::OBPairData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBPairData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBPairData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBPairData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBPairData_1SetValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBPairData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetValue((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBPairData_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBPairData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBPairData const *)arg1)->GetValue();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBPairData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBPairData *arg1 = (OpenBabel::OBPairData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBPairData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSetData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSetData *)new OpenBabel::OBSetData();
  *(OpenBabel::OBSetData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSetData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBSetData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSetData_1AddData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (arg1)->AddData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSetData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSetData_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((char const *)arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSetData_1GetData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > const &_result_ref = ((OpenBabel::OBSetData const *)arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSetData_1GetBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  result = (arg1)->GetBegin();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSetData_1GetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  result = (arg1)->GetEnd();
  *(std::vector<OpenBabel::OBGenericData * >::iterator **)&jresult = new std::vector<OpenBabel::OBGenericData * >::iterator((std::vector<OpenBabel::OBGenericData * >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSetData_1DeleteData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBSetData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSetData *arg1 = (OpenBabel::OBSetData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSetData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBVirtualBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBVirtualBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond();
  *(OpenBabel::OBVirtualBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBVirtualBond_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBVirtualBond const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBVirtualBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  OpenBabel::OBVirtualBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond(arg1,arg2,arg3,arg4);
  *(OpenBabel::OBVirtualBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBVirtualBond_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  OpenBabel::OBVirtualBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenBabel::OBVirtualBond *)new OpenBabel::OBVirtualBond(arg1,arg2,arg3);
  *(OpenBabel::OBVirtualBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBVirtualBond_1GetBgn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  result = (int)(arg1)->GetBgn();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBVirtualBond_1GetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  result = (int)(arg1)->GetEnd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBVirtualBond_1GetOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  result = (int)(arg1)->GetOrder();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBVirtualBond_1GetStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  result = (int)(arg1)->GetStereo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBVirtualBond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBVirtualBond *arg1 = (OpenBabel::OBVirtualBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBVirtualBond **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBRingData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBRingData *)new OpenBabel::OBRingData();
  *(OpenBabel::OBRingData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBRingData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = 0 ;
  OpenBabel::OBRingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRingData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBRingData *)new OpenBabel::OBRingData((OpenBabel::OBRingData const &)*arg1);
  *(OpenBabel::OBRingData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRingData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBRingData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBRingData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRingData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector<OpenBabel::OBRing * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBRing * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBRing * > & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRingData_1PushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  OpenBabel::OBRing *arg2 = (OpenBabel::OBRing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  arg2 = *(OpenBabel::OBRing **)&jarg2; 
  (arg1)->PushBack(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRingData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector<OpenBabel::OBRing * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  {
    std::vector<OpenBabel::OBRing * > &_result_ref = (arg1)->GetData();
    result = (std::vector<OpenBabel::OBRing * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBRing * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRingData_1BeginRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBRing * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  result = (arg1)->BeginRings();
  *(std::vector<OpenBabel::OBRing * >::iterator **)&jresult = new std::vector<OpenBabel::OBRing * >::iterator((std::vector<OpenBabel::OBRing * >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRingData_1EndRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBRing * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  result = (arg1)->EndRings();
  *(std::vector<OpenBabel::OBRing * >::iterator **)&jresult = new std::vector<OpenBabel::OBRing * >::iterator((std::vector<OpenBabel::OBRing * >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRingData_1BeginRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector<OpenBabel::OBRing * >::iterator *arg2 = 0 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBRing * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBRing * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBRing *)(arg1)->BeginRing(*arg2);
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRingData_1NextRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBRingData *arg1 = (OpenBabel::OBRingData *) 0 ;
  std::vector<OpenBabel::OBRing * >::iterator *arg2 = 0 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingData **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBRing * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBRing * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBRing *)(arg1)->NextRing(*arg2);
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBUnitCell_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBUnitCell *)new OpenBabel::OBUnitCell();
  *(OpenBabel::OBUnitCell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBUnitCell_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = 0 ;
  OpenBabel::OBUnitCell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBUnitCell const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBUnitCell *)new OpenBabel::OBUnitCell((OpenBabel::OBUnitCell const &)*arg1);
  *(OpenBabel::OBUnitCell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBUnitCell_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBUnitCell const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBUnitCell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBUnitCell_1SetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->SetData(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBUnitCell_1SetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 arg3 ;
  OpenBabel::vector3 arg4 ;
  OpenBabel::vector3 const *argp2 ;
  OpenBabel::vector3 const *argp3 ;
  OpenBabel::vector3 const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(OpenBabel::vector3 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(OpenBabel::vector3 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->SetData(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBUnitCell_1SetOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::vector3 arg2 ;
  OpenBabel::vector3 const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  argp2 = *(OpenBabel::vector3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::vector3 const");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetOffset(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBUnitCell_1SetSpaceGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetSpaceGroup(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBUnitCell_1SetSpaceGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSpaceGroup(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBUnitCell_1SetLatticeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::OBUnitCell::LatticeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (OpenBabel::OBUnitCell::LatticeType)jarg2; 
  (arg1)->SetLatticeType(arg2);
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBUnitCell_1GetA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetA();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBUnitCell_1GetB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetB();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBUnitCell_1GetC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetC();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBUnitCell_1GetAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetAlpha();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBUnitCell_1GetBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetBeta();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBUnitCell_1GetGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetGamma();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBUnitCell_1GetOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetOffset();
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBUnitCell_1GetSpaceGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetSpaceGroup();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBUnitCell_1GetLatticeType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  int arg2 ;
  OpenBabel::OBUnitCell::LatticeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBUnitCell::LatticeType)(arg1)->GetLatticeType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBUnitCell_1GetLatticeType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::OBUnitCell::LatticeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (OpenBabel::OBUnitCell::LatticeType)(arg1)->GetLatticeType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBUnitCell_1GetCellVectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::vector<OpenBabel::vector3 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetCellVectors();
  *(std::vector<OpenBabel::vector3 > **)&jresult = new std::vector<OpenBabel::vector3 >((std::vector<OpenBabel::vector3 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBUnitCell_1GetCellMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::matrix3x3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetCellMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((OpenBabel::matrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBUnitCell_1GetOrthoMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::matrix3x3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetOrthoMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((OpenBabel::matrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBUnitCell_1GetFractionalMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  OpenBabel::matrix3x3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (arg1)->GetFractionalMatrix();
  *(OpenBabel::matrix3x3 **)&jresult = new OpenBabel::matrix3x3((OpenBabel::matrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBUnitCell_1GetSpaceGroupNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->GetSpaceGroupNumber(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBUnitCell_1GetCellVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBUnitCell *arg1 = (OpenBabel::OBUnitCell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBUnitCell **)&jarg1; 
  result = (double)(arg1)->GetCellVolume();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBConformerData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBConformerData *)new OpenBabel::OBConformerData();
  *(OpenBabel::OBConformerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBConformerData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = 0 ;
  OpenBabel::OBConformerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBConformerData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBConformerData *)new OpenBabel::OBConformerData((OpenBabel::OBConformerData const &)*arg1);
  *(OpenBabel::OBConformerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConformerData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBConformerData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBConformerData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConformerData_1SetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<unsigned short > > arg2 ;
  std::vector<unsigned short > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<unsigned short > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<unsigned short >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetDimension(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConformerData_1SetEnergies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector<double > arg2 ;
  std::vector<double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<double >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetEnergies(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConformerData_1SetForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > arg2 ;
  std::vector<std::vector<OpenBabel::vector3 > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<std::vector<OpenBabel::vector3 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<std::vector<OpenBabel::vector3 > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetForces(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConformerData_1SetVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > arg2 ;
  std::vector<std::vector<OpenBabel::vector3 > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<std::vector<OpenBabel::vector3 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<std::vector<OpenBabel::vector3 > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetVelocities(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConformerData_1SetDisplacements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > arg2 ;
  std::vector<std::vector<OpenBabel::vector3 > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<std::vector<OpenBabel::vector3 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<std::vector<OpenBabel::vector3 > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetDisplacements(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConformerData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::string > > arg2 ;
  std::vector<std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  argp2 = *(std::vector<std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<std::string >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConformerData_1GetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<unsigned short > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetDimension();
  *(std::vector<unsigned short > **)&jresult = new std::vector<unsigned short >((std::vector<unsigned short > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConformerData_1GetEnergies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  std::vector<double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetEnergies();
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConformerData_1GetForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetForces();
  *(std::vector<std::vector<OpenBabel::vector3 > > **)&jresult = new std::vector<std::vector<OpenBabel::vector3 > >((std::vector<std::vector<OpenBabel::vector3 > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConformerData_1GetVelocities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetVelocities();
  *(std::vector<std::vector<OpenBabel::vector3 > > **)&jresult = new std::vector<std::vector<OpenBabel::vector3 > >((std::vector<std::vector<OpenBabel::vector3 > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConformerData_1GetDisplacements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::vector<OpenBabel::vector3 > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetDisplacements();
  *(std::vector<std::vector<OpenBabel::vector3 > > **)&jresult = new std::vector<std::vector<OpenBabel::vector3 > >((std::vector<std::vector<OpenBabel::vector3 > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConformerData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConformerData *arg1 = (OpenBabel::OBConformerData *) 0 ;
  SwigValueWrapper<std::vector<std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConformerData **)&jarg1; 
  result = (arg1)->GetData();
  *(std::vector<std::string > **)&jresult = new std::vector<std::string >((std::vector<std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSymmetryData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSymmetryData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSymmetryData *)new OpenBabel::OBSymmetryData();
  *(OpenBabel::OBSymmetryData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSymmetryData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSymmetryData *arg1 = 0 ;
  OpenBabel::OBSymmetryData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSymmetryData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBSymmetryData *)new OpenBabel::OBSymmetryData((OpenBabel::OBSymmetryData const &)*arg1);
  *(OpenBabel::OBSymmetryData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSymmetryData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBSymmetryData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBSymmetryData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSymmetryData_1SetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSymmetryData_1SetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSymmetryData_1SetPointGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetPointGroup(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSymmetryData_1SetSpaceGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetSpaceGroup(arg2);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBSymmetryData_1GetPointGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  result = (arg1)->GetPointGroup();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBSymmetryData_1GetSpaceGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBSymmetryData *arg1 = (OpenBabel::OBSymmetryData *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSymmetryData **)&jarg1; 
  result = (arg1)->GetSpaceGroup();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBTorsion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = 0 ;
  OpenBabel::OBTorsion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTorsion const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBTorsion *)new OpenBabel::OBTorsion((OpenBabel::OBTorsion const &)*arg1);
  *(OpenBabel::OBTorsion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBTorsion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBTorsion_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsion_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (bool)(arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsion_1AddTorsion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = *(OpenBabel::OBAtom **)&jarg5; 
  result = (bool)(arg1)->AddTorsion(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsion_1AddTorsion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::quad<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(OpenBabel::quad<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::quad<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AddTorsion(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsion_1SetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double arg2 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->SetAngle(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsion_1SetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->SetAngle(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsion_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(arg1)->SetData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsion_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double *arg2 = 0 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->GetAngle(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsion_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->GetAngle(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBTorsion_1GetBondIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (unsigned int)(arg1)->GetBondIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBTorsion_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBTorsion const *)arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBTorsion_1GetBC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  SwigValueWrapper<std::pair<OpenBabel::OBAtom *,OpenBabel::OBAtom * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (arg1)->GetBC();
  *(std::pair<OpenBabel::OBAtom *,OpenBabel::OBAtom * > **)&jresult = new std::pair<OpenBabel::OBAtom *,OpenBabel::OBAtom * >((std::pair<OpenBabel::OBAtom *,OpenBabel::OBAtom * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBTorsion_1GetADs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (arg1)->GetADs();
  *(std::vector<OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > **)&jresult = new std::vector<OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > >((std::vector<OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,double > > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsion_1IsProtonRotor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsion *arg1 = (OpenBabel::OBTorsion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsion **)&jarg1; 
  result = (bool)(arg1)->IsProtonRotor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBTorsionData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBTorsionData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBTorsionData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBTorsionData_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBTorsion > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  result = ((OpenBabel::OBTorsionData const *)arg1)->GetData();
  *(std::vector<OpenBabel::OBTorsion > **)&jresult = new std::vector<OpenBabel::OBTorsion >((std::vector<OpenBabel::OBTorsion > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBTorsionData_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBTorsionData const *)arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBTorsionData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  OpenBabel::OBTorsion *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  arg2 = *(OpenBabel::OBTorsion **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTorsion & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBTorsionData_1FillTorsionArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  std::vector<std::vector<unsigned int > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  arg2 = *(std::vector<std::vector<unsigned int > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<unsigned int > > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->FillTorsionArray(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBTorsionData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBTorsionData *arg1 = (OpenBabel::OBTorsionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBTorsionData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAngle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAngle *arg1 = 0 ;
  OpenBabel::OBAngle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAngle **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAngle const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAngle *)new OpenBabel::OBAngle((OpenBabel::OBAngle const &)*arg1);
  *(OpenBabel::OBAngle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBAngle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAngle_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAngle_1GetAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  result = (double)((OpenBabel::OBAngle const *)arg1)->GetAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAngle_1SetAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetAngle(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAngle_1SetAtoms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  (arg1)->SetAtoms(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAngle_1SetAtoms_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAngle *arg1 = (OpenBabel::OBAngle *) 0 ;
  OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAngle **)&jarg1; 
  arg2 = *(OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::triple<OpenBabel::OBAtom *,OpenBabel::OBAtom *,OpenBabel::OBAtom * > & reference is null");
    return ;
  } 
  (arg1)->SetAtoms(*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAngleData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBAngleData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAngleData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAngleData_1FillAngleArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  int **arg2 = (int **) 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  arg2 = *(int ***)&jarg2; 
  arg3 = *(unsigned int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  result = (unsigned int)(arg1)->FillAngleArray(arg2,*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAngleData_1FillAngleArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  std::vector<std::vector<unsigned int > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  arg2 = *(std::vector<std::vector<unsigned int > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<unsigned int > > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->FillAngleArray(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAngleData_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  OpenBabel::OBAngle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  arg2 = *(OpenBabel::OBAngle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAngle & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAngleData_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAngleData const *)arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBAngleData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAngleData *arg1 = (OpenBabel::OBAngleData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAngleData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBChiralData_1GetAtom4Refs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  OpenBabel::atomreftype arg2 ;
  std::vector<unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = (OpenBabel::atomreftype)jarg2; 
  result = ((OpenBabel::OBChiralData const *)arg1)->GetAtom4Refs(arg2);
  *(std::vector<unsigned int > **)&jresult = new std::vector<unsigned int >((std::vector<unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBChiralData_1GetAtomRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  int arg2 ;
  OpenBabel::atomreftype arg3 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OpenBabel::atomreftype)jarg3; 
  result = (unsigned int)(arg1)->GetAtomRef(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBChiralData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBChiralData *)new OpenBabel::OBChiralData();
  *(OpenBabel::OBChiralData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBChiralData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = 0 ;
  OpenBabel::OBChiralData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBChiralData const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBChiralData *)new OpenBabel::OBChiralData((OpenBabel::OBChiralData const &)*arg1);
  *(OpenBabel::OBChiralData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBChiralData_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBChiralData const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBChiralData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBChiralData_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBChiralData_1SetAtom4Refs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  std::vector<unsigned int > arg2 ;
  OpenBabel::atomreftype arg3 ;
  bool result;
  std::vector<unsigned int > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  argp2 = *(std::vector<unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<unsigned int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (OpenBabel::atomreftype)jarg3; 
  result = (bool)(arg1)->SetAtom4Refs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBChiralData_1AddAtomRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  unsigned int arg2 ;
  OpenBabel::atomreftype arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (OpenBabel::atomreftype)jarg3; 
  result = (int)(arg1)->AddAtomRef(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBChiralData_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBChiralData *arg1 = (OpenBabel::OBChiralData *) 0 ;
  OpenBabel::atomreftype arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBChiralData **)&jarg1; 
  arg2 = (OpenBabel::atomreftype)jarg2; 
  result = (unsigned int)((OpenBabel::OBChiralData const *)arg1)->GetSize(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSerialNums_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSerialNums *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSerialNums *)new OpenBabel::OBSerialNums();
  *(OpenBabel::OBSerialNums **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSerialNums_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSerialNums *arg1 = 0 ;
  OpenBabel::OBSerialNums *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSerialNums const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBSerialNums *)new OpenBabel::OBSerialNums((OpenBabel::OBSerialNums const &)*arg1);
  *(OpenBabel::OBSerialNums **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSerialNums_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (OpenBabel::OBGenericData *)((OpenBabel::OBSerialNums const *)arg1)->Clone(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSerialNums_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  std::map<int,OpenBabel::OBAtom * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1; 
  {
    std::map<int,OpenBabel::OBAtom * > &_result_ref = (arg1)->GetData();
    result = (std::map<int,OpenBabel::OBAtom * > *) &_result_ref;
  }
  *(std::map<int,OpenBabel::OBAtom * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSerialNums_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  std::map<int,OpenBabel::OBAtom * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1; 
  arg2 = *(std::map<int,OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map<int,OpenBabel::OBAtom * > & reference is null");
    return ;
  } 
  (arg1)->SetData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBSerialNums(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSerialNums *arg1 = (OpenBabel::OBSerialNums *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSerialNums **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBase_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  result = (bool)(arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBase_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBBase_1ClassDescription(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenBabel::OBBase::ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBase_1HasData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->HasData((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBase_1HasData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBase_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBase_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBase_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (arg1)->DeleteData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBase_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBase_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBase const *)arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBase_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBase_1GetData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBGenericData *)(arg1)->GetData((std::string const &)*arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBase_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBase_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  result = (arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBase_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *arg1 = (OpenBabel::OBBase *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBase **)&jarg1; 
  result = (arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBBase *)new OpenBabel::OBBase();
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_MaxMonoAtom_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 20;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_MaxMonoBond_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 20;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBChainsParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBChainsParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBChainsParser *)new OpenBabel::OBChainsParser();
  *(OpenBabel::OBChainsParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBChainsParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBChainsParser *arg1 = (OpenBabel::OBChainsParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBChainsParser **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBChainsParser_1PerceiveChains_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBChainsParser *arg1 = (OpenBabel::OBChainsParser *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBChainsParser **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->PerceiveChains(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBChainsParser_1PerceiveChains_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBChainsParser *arg1 = (OpenBabel::OBChainsParser *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBChainsParser **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->PerceiveChains(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SETWORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 32;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_STARTWORDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 10;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBBitVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBBitVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBBitVec *)new OpenBabel::OBBitVec();
  *(OpenBabel::OBBitVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBBitVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenBabel::OBBitVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenBabel::OBBitVec *)new OpenBabel::OBBitVec(arg1);
  *(OpenBabel::OBBitVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBBitVec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = 0 ;
  OpenBabel::OBBitVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBitVec *)new OpenBabel::OBBitVec((OpenBabel::OBBitVec const &)*arg1);
  *(OpenBabel::OBBitVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1SetBitOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBitOn(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1SetBitOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBitOff(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1SetRangeOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetRangeOn(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1SetRangeOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetRangeOff(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1Fold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Fold(arg2);
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBBitVec_1FirstBit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->FirstBit(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBBitVec_1FirstBit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  result = (int)(arg1)->FirstBit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBBitVec_1NextBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->NextBit(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBBitVec_1EndBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  result = (int)(arg1)->EndBit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBBitVec_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  result = (int)((OpenBabel::OBBitVec const *)arg1)->GetSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBBitVec_1CountBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  result = (int)(arg1)->CountBits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBitVec_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  result = (bool)(arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBitVec_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  result = (bool)(arg1)->IsEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBitVec_1Resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->Resize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBitVec_1BitIsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->BitIsSet(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBitVec_1BitIsOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->BitIsOn(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1FromVecInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  std::vector<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = *(std::vector<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null");
    return ;
  } 
  (arg1)->FromVecInt(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1FromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->FromString(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1ToVecInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  std::vector<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = *(std::vector<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null");
    return ;
  } 
  (arg1)->ToVecInt(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1Negate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  (arg1)->Negate();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBitVec_1GetWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return ;
  } 
  (arg1)->GetWords(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBBitVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBitVec *arg1 = (OpenBabel::OBBitVec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_Tanimoto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::OBBitVec *arg1 = 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBitVec **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return 0;
  } 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return 0;
  } 
  result = (double)OpenBabel::Tanimoto(*arg1,*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAtomTyper(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomTyper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBAtomTyper *)new OpenBabel::OBAtomTyper();
  *(OpenBabel::OBAtomTyper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBAtomTyper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomTyper_1ParseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomTyper_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomTyper_1AssignHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  (arg1)->AssignHyb(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomTyper_1AssignTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  (arg1)->AssignTypes(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomTyper_1AssignImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  (arg1)->AssignImplicitValence(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomTyper_1CorrectAromaticNitrogens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomTyper *arg1 = (OpenBabel::OBAtomTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  (arg1)->CorrectAromaticNitrogens(*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAromaticTyper(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAromaticTyper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBAromaticTyper *)new OpenBabel::OBAromaticTyper();
  *(OpenBabel::OBAromaticTyper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBAromaticTyper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAromaticTyper_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  result = (unsigned int)(arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAromaticTyper_1ParseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseLine((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAromaticTyper_1AssignAromaticFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  (arg1)->AssignAromaticFlags(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAromaticTyper_1PropagatePotentialAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->PropagatePotentialAromatic(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAromaticTyper_1SelectRootAtoms_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->SelectRootAtoms(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAromaticTyper_1SelectRootAtoms_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  (arg1)->SelectRootAtoms(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAromaticTyper_1ExcludeSmallRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  (arg1)->ExcludeSmallRing(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAromaticTyper_1CheckAromaticity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->CheckAromaticity(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAromaticTyper_1TraverseCycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  OpenBabel::OBAromaticTyper *arg1 = (OpenBabel::OBAromaticTyper *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg4 = (OpenBabel::OBBond *) 0 ;
  std::pair<int,int > *arg5 = 0 ;
  int arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBBond **)&jarg4; 
  arg5 = *(std::pair<int,int > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair<int,int > & reference is null");
    return 0;
  } 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->TraverseCycle(arg2,arg3,arg4,*arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterFingerprint_1Register(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  OpenBabel::OBFingerprint *arg2 = (OpenBabel::OBFingerprint *) 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  arg2 = *(OpenBabel::OBFingerprint **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->Register(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterFingerprint_1FindType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBFingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBFingerprint *)(arg1)->FindType((std::string const &)*arg2);
  *(OpenBabel::OBFingerprint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterFingerprint_1FindDefaultType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  OpenBabel::OBFingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  result = (OpenBabel::OBFingerprint *)((OpenBabel::PluginIter<OpenBabel::OBFingerprint > const *)arg1)->FindDefaultType();
  *(OpenBabel::OBFingerprint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_pluginiterFingerprint_1ID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  result = ((OpenBabel::PluginIter<OpenBabel::OBFingerprint > const *)arg1)->ID();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterFingerprint_1ToStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  (arg1)->ToStart();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterFingerprint_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  OpenBabel::OBFingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  result = (OpenBabel::OBFingerprint *)((OpenBabel::PluginIter<OpenBabel::OBFingerprint > const *)arg1)->operator ->();
  *(OpenBabel::OBFingerprint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1pluginiterFingerprint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *)new OpenBabel::PluginIter<OpenBabel::OBFingerprint >();
  *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1pluginiterFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterFingerprint_1Iter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  {
    OpenBabel::PluginIter<OpenBabel::OBFingerprint > &_result_ref = (*arg1)->Iter();
    result = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) &_result_ref;
  }
  *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterFingerprint_1SetBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetBit(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterFingerprint_1Fold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->Fold(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterFingerprint_1GetFingerprint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::vector<unsigned int > *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::vector<unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (bool)(*arg1)->GetFingerprint(arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterFingerprint_1GetFingerprint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::vector<unsigned int > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::vector<unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return 0;
  } 
  result = (bool)(*arg1)->GetFingerprint(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_pluginiterFingerprint_1Description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  result = (*arg1)->Description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterFingerprint_1Flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  result = (unsigned int)(*arg1)->Flags();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterFingerprint_1Tanimoto_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  std::vector<unsigned int > *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector<unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > const & reference is null");
    return 0;
  } 
  result = (double)(*arg1)->Tanimoto((std::vector<unsigned int > const &)*arg2,(std::vector<unsigned int > const &)*arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterFingerprint_1Tanimoto_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > const & reference is null");
    return 0;
  } 
  arg3 = *(unsigned int **)&jarg3; 
  result = (double)(*arg1)->Tanimoto((std::vector<unsigned int > const &)*arg2,(unsigned int const *)arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterFingerprint_1Getbitsperint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  result = (unsigned int)(*arg1)->Getbitsperint();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterFingerprint_1FindFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBFingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBFingerprint *)(*arg1)->FindFingerprint((std::string const &)*arg2);
  *(OpenBabel::OBFingerprint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1Register(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::OBForceField *arg2 = (OpenBabel::OBForceField *) 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(OpenBabel::OBForceField **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->Register(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterForceField_1FindType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBForceField *)(arg1)->FindType((std::string const &)*arg2);
  *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterForceField_1FindDefaultType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::OBForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (OpenBabel::OBForceField *)((OpenBabel::PluginIter<OpenBabel::OBForceField > const *)arg1)->FindDefaultType();
  *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_pluginiterForceField_1ID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = ((OpenBabel::PluginIter<OpenBabel::OBForceField > const *)arg1)->ID();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1ToStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  (arg1)->ToStart();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterForceField_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::OBForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (OpenBabel::OBForceField *)((OpenBabel::PluginIter<OpenBabel::OBForceField > const *)arg1)->operator ->();
  *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1pluginiterForceField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::PluginIter<OpenBabel::OBForceField > *)new OpenBabel::PluginIter<OpenBabel::OBForceField >();
  *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1pluginiterForceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterForceField_1Iter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  {
    OpenBabel::PluginIter<OpenBabel::OBForceField > &_result_ref = (*arg1)->Iter();
    result = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) &_result_ref;
  }
  *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterForceField_1FindForceField_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBForceField *)(*arg1)->FindForceField((std::string const &)*arg2);
  *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_pluginiterForceField_1GetUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (*arg1)->GetUnit();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterForceField_1Setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  result = (bool)(*arg1)->Setup(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterForceField_1UpdateCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  result = (bool)(*arg1)->UpdateCoordinates(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1OBFFLog_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->OBFFLog(arg2);
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1Energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (double)(*arg1)->Energy();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1E_1Bond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (double)(*arg1)->E_Bond();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1E_1Angle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (double)(*arg1)->E_Angle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1E_1StrBnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (double)(*arg1)->E_StrBnd();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1E_1Torsion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (double)(*arg1)->E_Torsion();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1E_1OOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (double)(*arg1)->E_OOP();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1E_1VDW(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (double)(*arg1)->E_VDW();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1E_1Electrostatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (double)(*arg1)->E_Electrostatic();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterForceField_1SetLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  result = (bool)(*arg1)->SetLogFile(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterForceField_1SetLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetLogLevel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_pluginiterForceField_1GetLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (int)(*arg1)->GetLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1DistanceGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  (*arg1)->DistanceGeometry();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1GenerateCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  (*arg1)->GenerateCoordinates();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1SystematicRotorSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  (*arg1)->SystematicRotorSearch();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterForceField_1LineSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (*arg1)->LineSearch(arg2,*arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1SteepestDescent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  (*arg1)->SteepestDescent(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1SteepestDescent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (*arg1)->SteepestDescent(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1SteepestDescent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SteepestDescent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1SteepestDescentInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  (*arg1)->SteepestDescentInitialize(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1SteepestDescentInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (*arg1)->SteepestDescentInitialize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1SteepestDescentInitialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SteepestDescentInitialize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterForceField_1SteepestDescentTakeNSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SteepestDescentTakeNSteps(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1ConjugateGradients_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  (*arg1)->ConjugateGradients(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1ConjugateGradients_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (*arg1)->ConjugateGradients(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1ConjugateGradients_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->ConjugateGradients(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1ConjugateGradientsInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  (*arg1)->ConjugateGradientsInitialize(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1ConjugateGradientsInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (*arg1)->ConjugateGradientsInitialize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1ConjugateGradientsInitialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->ConjugateGradientsInitialize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterForceField_1ConjugateGradientsTakeNSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->ConjugateGradientsTakeNSteps(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterForceField_1ValidateLineSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (*arg1)->ValidateLineSearch(arg2,*arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1ValidateSteepestDescent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->ValidateSteepestDescent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_pluginiterForceField_1ValidateConjugateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->ValidateConjugateGradients(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterForceField_1Validate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (bool)(*arg1)->Validate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_pluginiterForceField_1ValidateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  result = (bool)(*arg1)->ValidateGradients();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_pluginiterForceField_1ValidateGradientError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (*arg1)->ValidateGradientError(*arg2,*arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1VectorLengthDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (double)(*arg1)->VectorLengthDerivative(*arg2,*arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1VectorAngleDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (double)(*arg1)->VectorAngleDerivative(*arg2,*arg3,*arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_pluginiterForceField_1VectorTorsionDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *arg1 = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  OpenBabel::vector3 *arg5 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg5 = *(OpenBabel::vector3 **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (double)(*arg1)->VectorTorsionDerivative(*arg2,*arg3,*arg4,*arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  OpenBabel::obMessageLevel arg6 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (OpenBabel::obMessageLevel)jarg6; 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBError_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBError_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1,(std::string const &)*arg2);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBError_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBError *)new OpenBabel::OBError((std::string const &)*arg1);
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBError_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBError *)new OpenBabel::OBError();
  *(OpenBabel::OBError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBError_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = ((OpenBabel::OBError const *)arg1)->message();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBError_1GetMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetMethod();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBError_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetError();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBError_1GetExplanation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetExplanation();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBError_1GetPossibleCause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetPossibleCause();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBError_1GetSuggestedRemedy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (arg1)->GetSuggestedRemedy();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBError_1GetLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  OpenBabel::obMessageLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  result = (OpenBabel::obMessageLevel)(arg1)->GetLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBError *arg1 = (OpenBabel::OBError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBError **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMessageHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMessageHandler *)new OpenBabel::OBMessageHandler();
  *(OpenBabel::OBMessageHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMessageHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMessageHandler_1ThrowError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  OpenBabel::OBError arg2 ;
  OpenBabel::OBError *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  argp2 = *(OpenBabel::OBError **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::OBError");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->ThrowError(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMessageHandler_1ThrowError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  OpenBabel::obMessageLevel arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (OpenBabel::obMessageLevel)jarg4; 
  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMessageHandler_1ThrowError_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->ThrowError((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMessageHandler_1GetMessagesOfLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  OpenBabel::obMessageLevel arg2 ;
  SwigValueWrapper<std::vector<std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  arg2 = (OpenBabel::obMessageLevel)jarg2; 
  result = (arg1)->GetMessagesOfLevel(arg2);
  *(std::vector<std::string > **)&jresult = new std::vector<std::string >((std::vector<std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMessageHandler_1StartLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  (arg1)->StartLogging();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMessageHandler_1StopLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  (arg1)->StopLogging();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMessageHandler_1SetMaxLogEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetMaxLogEntries(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMessageHandler_1GetMaxLogEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetMaxLogEntries();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMessageHandler_1ClearLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  (arg1)->ClearLog();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMessageHandler_1SetOutputLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  OpenBabel::obMessageLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  arg2 = (OpenBabel::obMessageLevel)jarg2; 
  (arg1)->SetOutputLevel(arg2);
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMessageHandler_1GetOutputLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  OpenBabel::obMessageLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (OpenBabel::obMessageLevel)(arg1)->GetOutputLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMessageHandler_1SetOutputStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  (arg1)->SetOutputStream(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMessageHandler_1GetOutputStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (std::ostream *)(arg1)->GetOutputStream();
  *(std::ostream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMessageHandler_1StartErrorWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (bool)(arg1)->StartErrorWrap();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMessageHandler_1StopErrorWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (bool)(arg1)->StopErrorWrap();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMessageHandler_1GetErrorMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetErrorMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMessageHandler_1GetWarningMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetWarningMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMessageHandler_1GetInfoMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetInfoMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMessageHandler_1GetAuditMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetAuditMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMessageHandler_1GetDebugMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (unsigned int)(arg1)->GetDebugMessageCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMessageHandler_1GetMessageSummary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMessageHandler *arg1 = (OpenBabel::OBMessageHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1; 
  result = (arg1)->GetMessageSummary();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_obErrorLog_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMessageHandler *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMessageHandler **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMessageHandler const & reference is null");
    return ;
  } 
  OpenBabel::obErrorLog = *arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_obErrorLog_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMessageHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBMessageHandler const &_result_ref = OpenBabel::obErrorLog;
    result = (OpenBabel::OBMessageHandler *) &_result_ref;
  }
  *(OpenBabel::OBMessageHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1obLogBuf(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::obLogBuf *arg1 = (OpenBabel::obLogBuf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::obLogBuf **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1obLogBuf(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::obLogBuf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::obLogBuf *)new OpenBabel::obLogBuf();
  *(OpenBabel::obLogBuf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBFormat_1ReadMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (bool)(arg1)->ReadMolecule(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBFormat_1ReadChemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBConversion **)&jarg2; 
  result = (bool)(arg1)->ReadChemObject(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBFormat_1WriteMolecule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (bool)(arg1)->WriteMolecule(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBFormat_1WriteChemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = *(OpenBabel::OBConversion **)&jarg2; 
  result = (bool)(arg1)->WriteChemObject(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBFormat_1Description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (char *)(arg1)->Description();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBFormat_1TargetClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (char *)(arg1)->TargetClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFormat_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  std::type_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  {
    std::type_info const &_result_ref = (arg1)->GetType();
    result = (std::type_info *) &_result_ref;
  }
  *(std::type_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBFormat_1SpecificationURL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (char *)(arg1)->SpecificationURL();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBFormat_1GetMIMEType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (char *)(arg1)->GetMIMEType();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFormat_1Flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (unsigned int)(arg1)->Flags();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFormat_1SkipObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  int arg2 ;
  OpenBabel::OBConversion *arg3 = (OpenBabel::OBConversion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::OBConversion **)&jarg3; 
  result = (int)(arg1)->SkipObjects(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFormat_1MakeNewInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  result = (OpenBabel::OBFormat *)(arg1)->MakeNewInstance();
  *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBFormat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFormat *arg1 = (OpenBabel::OBFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFormat **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1CharPtrLess(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::CharPtrLess *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::CharPtrLess *)new OpenBabel::CharPtrLess();
  *(OpenBabel::CharPtrLess **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1CharPtrLess(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::CharPtrLess *arg1 = (OpenBabel::CharPtrLess *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::CharPtrLess **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBConversion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::istream *arg1 = (std::istream *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::istream **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1,arg2);
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBConversion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::istream *arg1 = (std::istream *) 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::istream **)&jarg1; 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion(arg1);
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBConversion_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion();
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBConversion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBConversion const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBConversion *)new OpenBabel::OBConversion((OpenBabel::OBConversion const &)*arg1);
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBConversion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBConversion_1RegisterFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBConversion_1RegisterFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  result = (int)OpenBabel::OBConversion::RegisterFormat((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1FindFormat(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FindFormat((char const *)arg1);
  *(OpenBabel::OBFormat **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1FormatFromExt(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromExt((char const *)arg1);
  *(OpenBabel::OBFormat **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1FormatFromMIME(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::FormatFromMIME((char const *)arg1);
  *(OpenBabel::OBFormat **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1GetNextFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::Formatpos *arg1 = 0 ;
  char **arg2 = 0 ;
  OpenBabel::OBFormat **arg3 = 0 ;
  bool result;
  char *temp2 = 0 ;
  OpenBabel::OBFormat *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::Formatpos **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::Formatpos & reference is null");
    return 0;
  } 
  temp2 = *(char **)&jarg2;
  arg2 = &temp2; 
  temp3 = *(OpenBabel::OBFormat **)&jarg3;
  arg3 = &temp3; 
  result = (bool)OpenBabel::OBConversion::GetNextFormat(*arg1,(char const *&)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBConversion_1Description(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenBabel::OBConversion::Description();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetInStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::istream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (std::istream *)((OpenBabel::OBConversion const *)arg1)->GetInStream();
  *(std::istream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetOutStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (std::ostream *)((OpenBabel::OBConversion const *)arg1)->GetOutStream();
  *(std::ostream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1SetInStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(std::istream **)&jarg2; 
  (arg1)->SetInStream(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1SetOutStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  (arg1)->SetOutStream(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->SetInAndOutFormats((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1SetInAndOutFormats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  OpenBabel::OBFormat *arg3 = (OpenBabel::OBFormat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = *(OpenBabel::OBFormat **)&jarg3; 
  result = (bool)(arg1)->SetInAndOutFormats(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1SetInFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->SetInFormat((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1SetInFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  result = (bool)(arg1)->SetInFormat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1SetOutFormat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->SetOutFormat((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1SetOutFormat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  result = (bool)(arg1)->SetOutFormat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetInFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetInFormat();
  *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetOutFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBFormat *)((OpenBabel::OBConversion const *)arg1)->GetOutFormat();
  *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBConversion_1GetInFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = ((OpenBabel::OBConversion const *)arg1)->GetInFilename();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetInPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::streampos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = ((OpenBabel::OBConversion const *)arg1)->GetInPos();
  *(std::streampos **)&jresult = new std::streampos((std::streampos &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetInLen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = ((OpenBabel::OBConversion const *)arg1)->GetInLen();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBConversion_1GetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (char *)((OpenBabel::OBConversion const *)arg1)->GetTitle();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetAuxConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBConversion *)((OpenBabel::OBConversion const *)arg1)->GetAuxConv();
  *(OpenBabel::OBConversion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1SetAuxConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion *arg2 = (OpenBabel::OBConversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBConversion **)&jarg2; 
  (arg1)->SetAuxConv(arg2);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBConversion_1IsOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  result = (char *)(arg1)->IsOption((char const *)arg2,arg3);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBConversion_1IsOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->IsOption((char const *)arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBConversion::Option_type arg2 ;
  std::map<std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = (OpenBabel::OBConversion::Option_type)jarg2; 
  result = (std::map<std::string,std::string > *)(arg1)->GetOptions(arg2);
  *(std::map<std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1AddOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->AddOption((char const *)arg2,arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1AddOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  (arg1)->AddOption((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1RemoveOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  result = (bool)(arg1)->RemoveOption((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1SetOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenBabel::OBConversion::Option_type arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (OpenBabel::OBConversion::Option_type)jarg3; 
  (arg1)->SetOptions((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1RegisterOptionParam_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  std::string arg1 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  int arg3 ;
  OpenBabel::OBConversion::Option_type arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (OpenBabel::OBConversion::Option_type)jarg4; 
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1RegisterOptionParam_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  std::string arg1 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  arg3 = (int)jarg3; 
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1RegisterOptionParam_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string arg1 ;
  OpenBabel::OBFormat *arg2 = (OpenBabel::OBFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenBabel::OBFormat **)&jarg2; 
  OpenBabel::OBConversion::RegisterOptionParam(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBConversion_1GetOptionParams(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  std::string arg1 ;
  OpenBabel::OBConversion::Option_type arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (OpenBabel::OBConversion::Option_type)jarg2; 
  result = (int)OpenBabel::OBConversion::GetOptionParams(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBConversion_1Convert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ;
  std::ostream *arg3 = (std::ostream *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(std::istream **)&jarg2; 
  arg3 = *(std::ostream **)&jarg3; 
  result = (int)(arg1)->Convert(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBConversion_1Convert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (int)(arg1)->Convert();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBConversion_1FullConvert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  std::vector<std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector<std::string > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(std::vector<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg4 = *(std::vector<std::string > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->FullConvert(*arg2,*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1AddChemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (bool)(arg1)->AddChemObject(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetChemObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (OpenBabel::OBBase *)(arg1)->GetChemObject();
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1IsLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (bool)(arg1)->IsLast();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1IsFirstInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (bool)(arg1)->IsFirstInput();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBConversion_1GetOutputIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  result = (int)((OpenBabel::OBConversion const *)arg1)->GetOutputIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1SetOutputIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOutputIndex(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1SetMoreFilesToCome(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  (arg1)->SetMoreFilesToCome();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1SetOneObjectOnly_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOneObjectOnly(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1SetOneObjectOnly_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  (arg1)->SetOneObjectOnly();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1SetLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLast(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBConversion_1GetDefaultFormat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBFormat *)OpenBabel::OBConversion::GetDefaultFormat();
  *(OpenBabel::OBFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1Write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::ostream *arg3 = (std::ostream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::ostream **)&jarg3; 
  result = (bool)(arg1)->Write(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1Write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (bool)(arg1)->Write(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBConversion_1WriteString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->WriteString(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBConversion_1WriteString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (arg1)->WriteString(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1WriteFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->WriteFile(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBConversion_1CloseOutFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  (arg1)->CloseOutFile();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1Read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::istream *arg3 = (std::istream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::istream **)&jarg3; 
  result = (bool)(arg1)->Read(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1Read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  result = (bool)(arg1)->Read(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1ReadString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->ReadString(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBConversion_1ReadFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBConversion *arg1 = (OpenBabel::OBConversion *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBConversion **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->ReadFile(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NOTREADABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x01;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_READONEONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x02;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_READBINARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x04;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ZEROATOMSOK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x08;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NOTWRITABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x10;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_WRITEONEONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x20;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_WRITEBINARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x40;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_READXML_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x80;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_DEFAULTFORMAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0x4000;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBResidue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBResidue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidue const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidue *)new OpenBabel::OBResidue((OpenBabel::OBResidue const &)*arg1);
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBResidue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1AddAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->AddAtom(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1InsertAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->InsertAtom(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1RemoveAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->RemoveAtom(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidue_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (bool)(arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetName((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1SetNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1SetChain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->SetChain(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1SetChainNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetChainNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1SetAtomID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->SetAtomID(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1SetHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetHetAtom(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidue_1SetSerialNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetSerialNum(arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBResidue_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1GetNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1GetNumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetNumAtoms();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_openbabelJNI_OBResidue_1GetChain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (char)((OpenBabel::OBResidue const *)arg1)->GetChain();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1GetChainNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetChainNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1GetResKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetResKey();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1GetAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetAtoms();
  *(std::vector<OpenBabel::OBAtom * > **)&jresult = new std::vector<OpenBabel::OBAtom * >((std::vector<OpenBabel::OBAtom * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1GetBonds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  bool arg2 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetBonds(arg2);
  *(std::vector<OpenBabel::OBBond * > **)&jresult = new std::vector<OpenBabel::OBBond * >((std::vector<OpenBabel::OBBond * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1GetBonds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetBonds();
  *(std::vector<OpenBabel::OBBond * > **)&jresult = new std::vector<OpenBabel::OBBond * >((std::vector<OpenBabel::OBBond * > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBResidue_1GetAtomID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = ((OpenBabel::OBResidue const *)arg1)->GetAtomID(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1GetSerialNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)((OpenBabel::OBResidue const *)arg1)->GetSerialNum(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidue_1GetAminoAcidProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAminoAcidProperty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidue_1GetAtomProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetAtomProperty(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidue_1GetResidueProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->GetResidueProperty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidue_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->IsHetAtom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidue_1IsResidueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBResidue const *)arg1)->IsResidueType(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1BeginAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (arg1)->BeginAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((OpenBabel::OBAtomIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1EndAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (arg1)->EndAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((OpenBabel::OBAtomIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1BeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::vector<OpenBabel::OBAtom * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->BeginAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidue_1NextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  std::vector<OpenBabel::OBAtom * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->NextAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_MAXSETNO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 40;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_MAXELEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1024;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_MINELEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 29;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_MAXRES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 100;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_MINRES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 54;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1ALA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1GLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 2);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1LEU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 3);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1SER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 4);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1VAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 5);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1THR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 6);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1LYS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 7);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1ASP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 8);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1ILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 9);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1ASN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 10);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1GLU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 11);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1PRO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 12);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1ARG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 13);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1PHE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 14);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1GLN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 15);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1TYR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 16);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1HIS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 17);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1CYS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 18);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1MET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 19);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AA_1TRP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 20);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ACIDIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::ACIDIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ACYCLIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::ACYCLIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ALIPHATIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::ALIPHATIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AROMATIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::AROMATIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_BASIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::BASIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_BURIED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::BURIED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CHARGED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::CHARGED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CYCLIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::CYCLIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_HYDROPHOBIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::HYDROPHOBIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_LARGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::LARGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_MEDIUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::MEDIUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NEGATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::NEGATIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NEUTRAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::NEUTRAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_POLAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::POLAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_POSITIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::POSITIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SMALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::SMALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SURFACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBAminoAcidProperty::SURFACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ALPHA_1CARBON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::ALPHA_CARBON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AMINO_1BACKBONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::AMINO_BACKBONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_BACKBONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::BACKBONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CYSTEINE_1SULPHUR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::CYSTEINE_SULPHUR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_LIGAND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::LIGAND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NUCLEIC_1BACKBONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::NUCLEIC_BACKBONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SHAPELY_1BACKBONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::SHAPELY_BACKBONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SHAPELY_1SPECIAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::SHAPELY_SPECIAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SIDECHAIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::SIDECHAIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SUGAR_1PHOSPHATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueAtomProperty::SUGAR_PHOSPHATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ALA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::ALA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_GLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::GLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_LEU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::LEU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::SER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_VAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::VAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_THR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::THR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_LYS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::LYS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ASP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::ASP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::ILE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ASN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::ASN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_GLU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::GLU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_PRO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::PRO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ARG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::ARG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_PHE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::PHE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_GLN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::GLN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_TYR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::TYR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_HIS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::HIS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_CYS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::CYS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_MET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::MET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_TRP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::TRP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ASX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::ASX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_GLX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::GLX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_PCA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::PCA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_HYP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::HYP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_A_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::A;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_C_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::C;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_G_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::G;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_T_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::T;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_U_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::U;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_UPLUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::UPLUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_I_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::I;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI__11MA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::_1MA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI__15MC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::_5MC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OMC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::OMC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI__11MG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::_1MG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI__12MG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::_2MG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_M2G_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::M2G;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI__17MG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::_7MG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OMG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::OMG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_YG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::YG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_H2U_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::H2U;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI__15MU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::_5MU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_PSU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::PSU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_UNK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::UNK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::ACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_FOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::FOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_HOH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::HOH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_DOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::DOD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SO4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::SO4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_PO4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::PO4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::NAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_COA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::COA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NAP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::NAP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NDP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueIndex::NDP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AMINO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::AMINO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_AMINO_1NUCLEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::AMINO_NUCLEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_COENZYME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::COENZYME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_ION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::ION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_NUCLEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::NUCLEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_PROTEIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::PROTEIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_PURINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::PURINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_PYRIMIDINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::PYRIMIDINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_SOLVENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::SOLVENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_WATER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OpenBabel::OBResidueProperty::WATER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_Residue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char (*arg1)[4] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char (**)[4])&jarg1; 
  {
    char (*inp)[4] = (char (*)[4])(arg1);
    char (*dest)[4] = (char (*)[4])(OpenBabel::Residue);
    size_t ii = 0;
    for (; ii < 100; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_Residue_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char (*result)[4] = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char (*)[4])(char (*)[4])OpenBabel::Residue;
  *(char (**)[4])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_ElemDesc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char (*arg1)[4] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char (**)[4])&jarg1; 
  {
    char (*inp)[4] = (char (*)[4])(arg1);
    char (*dest)[4] = (char (*)[4])(OpenBabel::ElemDesc);
    size_t ii = 0;
    for (; ii < 1024; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_ElemDesc_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char (*result)[4] = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char (*)[4])(char (*)[4])OpenBabel::ElemDesc;
  *(char (**)[4])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_ResNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  OpenBabel::ResNo = arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_ResNo_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)OpenBabel::ResNo;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_ElemNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  OpenBabel::ElemNo = arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_ElemNo_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)OpenBabel::ElemNo;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_14RING_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_13RING_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 2);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1AROMATIC_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 3);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1RING_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 4);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1CSTEREO_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 5);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1ACSTEREO_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 6);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1DONOR_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 7);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1ACCEPTOR_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 8);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1CHIRAL_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 9);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1POS_1CHIRAL_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 10);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1NEG_1CHIRAL_1ATOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 11);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1ATOM_1HAS_1NO_1H_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 12);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Visit = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool) ((arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAtom(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBAtom *)new OpenBabel::OBAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBAtom(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHyb(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAtomicNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetIsotope(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetImplicitValence(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1IncrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->IncrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1DecrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->DecrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFormalCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->SetSpinMultiplicity(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (arg1)->SetType(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetPartialCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (arg1)->SetVector(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetVector(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (arg1)->SetCoordPtr(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetVector();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (arg1)->SetResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (arg1)->SetParent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1UnsetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->UnsetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetAntiClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetAntiClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetPositiveStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetNegativeStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1UnsetStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->UnsetStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetInRing();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1SetChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->SetChiral();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->ClearCoordPtr();
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBAtom_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (int)((OpenBabel::OBAtom const *)arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBAtom_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned short)((OpenBabel::OBAtom const *)arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBAtom_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (int)((OpenBabel::OBAtom const *)arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)((OpenBabel::OBAtom const *)arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)((OpenBabel::OBAtom const *)arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetCIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetHvyValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetHeteroValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBAtom_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (char *)(arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double *)(arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBResidue *)(arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBMol *)(arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1GetNextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->NewResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (arg1)->AddResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->DeleteResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (arg1)->AddBond(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (arg1)->InsertBond(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->ClearBond();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtom_1ForceNoH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  (arg1)->ForceNoH();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasNoHForced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1ImplicitHydrogenCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtom_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (double)(arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1BOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtom_1KBOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBAtom const *)arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsCarbon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsSulfur(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsPhosphorus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((OpenBabel::OBAtom const *)arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsNotCorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsAntiClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasChiralitySpecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasChiralVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBAtom_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (bool)(arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtom_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1AROMATIC_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1WEDGE_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 2);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1HASH_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 3);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1RING_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 4);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1TORUP_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 5);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1TORDOWN_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 6);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1KSINGLE_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 7);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1KDOUBLE_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 8);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1KTRIPLE_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 9);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1CLOSURE_1BOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 10);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Visit = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool) ((arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBBond(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBBond *)new OpenBabel::OBBond();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBBond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetBO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBO(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBondOrder(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->SetBegin(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->SetEnd(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (arg1)->SetParent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetLength(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->Set(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetKSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetKSingle();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetKDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetKDouble();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetKTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetKTriple();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetHash();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetWedge();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetUp();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetDown();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetInRing();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1SetClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->SetClosure();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1UnsetHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetHash();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1UnsetWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetWedge();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1UnsetUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetUp();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1UnsetDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetDown();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1UnsetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBBond_1UnsetKekule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  (arg1)->UnsetKekule();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetBO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBO();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBondOrder();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetFlags();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetBeginAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetBeginAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetEndAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBBond const *)arg1)->GetEndAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetBeginAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->GetBeginAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetEndAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->GetEndAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBAtom *)(arg1)->GetNbrAtom(arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (OpenBabel::OBMol *)(arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBBond_1GetEquibLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (double)(arg1)->GetEquibLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBBond_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (double)(arg1)->GetLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBBond_1GetNbrAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)(arg1)->GetNbrAtomIdx(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)((OpenBabel::OBBond const *)arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)((OpenBabel::OBBond const *)arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsRotor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsRotor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsAmide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsPrimaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsPrimaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsSecondaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsSecondaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsEster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsEster();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsCarbonyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsCarbonyl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsSingle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsDouble();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsTriple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsKSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsKSingle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsKDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsKDouble();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsKTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsKTriple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsClosure();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsUp();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsDown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsWedge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsHash();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBBond_1IsDoubleBondGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBBond *arg1 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBBond **)&jarg1; 
  result = (bool)(arg1)->IsDoubleBondGeometry();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1SSSR_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1RINGFLAGS_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 2);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1AROMATIC_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 3);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1ATOMTYPES_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 4);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1CHIRALITY_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 5);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1PCHARGE_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 6);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1HYBRID_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 8);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1IMPVAL_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 9);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1KEKULE_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 10);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1CLOSURE_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 11);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1H_1ADDED_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 12);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1PH_1CORRECTED_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 13);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1AROM_1CORRECTED_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 14);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1CHAINS_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 15);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1TCHARGE_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 16);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1TSPIN_1MOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 17);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OB_1CURRENT_1CONFORMER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -1;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMol_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMol *)new OpenBabel::OBMol();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMol *)new OpenBabel::OBMol((OpenBabel::OBMol const &)*arg1);
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1ReserveAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ReserveAtoms(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1CreateAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->CreateAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1CreateBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBBond *)(arg1)->CreateBond();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1CreateResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBResidue *)(arg1)->CreateResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1DestroyAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (arg1)->DestroyAtom(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1DestroyBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (arg1)->DestroyBond(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1DestroyResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (arg1)->DestroyResidue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtom & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AddAtom(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1InsertAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtom & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->InsertAtom(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->AddBond(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddBond_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->AddBond(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddBond_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBond & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AddBond(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidue & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->AddResidue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NewAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->NewAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NewBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBBond *)(arg1)->NewBond();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBResidue *)(arg1)->NewResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1DeleteAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->DeleteAtom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  result = (bool)(arg1)->DeleteResidue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1BeginModify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->BeginModify();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1EndModify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EndModify(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1EndModify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->EndModify();
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMol_1GetMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (int)(arg1)->GetMod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1IncrementMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->IncrementMod();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1DecrementMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->DecrementMod();
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMol_1GetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (int)(arg1)->GetFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMol_1GetTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (char *)((OpenBabel::OBMol const *)arg1)->GetTitle();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumAtoms();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NumBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumBonds();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NumHvyAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)(arg1)->NumHvyAtoms();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NumResidues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBMol const *)arg1)->NumResidues();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NumRotors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)(arg1)->NumRotors();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBAtom *)(arg1)->GetAtom(arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetFirstAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->GetFirstAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetBond_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetBond_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2,arg3);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetBond_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (OpenBabel::OBBond *)(arg1)->GetBond(arg2,arg3);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBResidue *)(arg1)->GetResidue(arg2);
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBInternalCoord * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->GetInternalCoord();
  *(std::vector<OpenBabel::OBInternalCoord * > **)&jresult = new std::vector<OpenBabel::OBInternalCoord * >((std::vector<OpenBabel::OBInternalCoord * > &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMol_1GetTorsion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMol_1GetTorsion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = *(OpenBabel::OBAtom **)&jarg5; 
  result = (double)(arg1)->GetTorsion(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMol_1GetAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  result = (double)(arg1)->GetAngle(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMol_1GetFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->GetFormula();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMol_1GetSpacedFormula_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (arg1)->GetSpacedFormula(arg2,(char const *)arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMol_1GetSpacedFormula_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetSpacedFormula(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMol_1GetSpacedFormula_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->GetSpacedFormula();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMol_1GetEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (double)((OpenBabel::OBMol const *)arg1)->GetEnergy();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMol_1GetMolWt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (double)(arg1)->GetMolWt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMol_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (double)(arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMol_1GetTotalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (int)(arg1)->GetTotalCharge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetTotalSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned int)(arg1)->GetTotalSpinMultiplicity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMol_1GetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (unsigned short)((OpenBabel::OBMol const *)arg1)->GetDimension();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (double *)(arg1)->GetCoordinates();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetSSSR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBRing * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  {
    std::vector<OpenBabel::OBRing * > &_result_ref = (arg1)->GetSSSR();
    result = (std::vector<OpenBabel::OBRing * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBRing * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AutomaticFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AutomaticFormalCharge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AutomaticPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AutomaticPartialCharge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetTitle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetTitle((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetTitle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (arg1)->SetTitle(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetFormula(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetEnergy(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  (arg1)->SetDimension(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetTotalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTotalCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetTotalSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetTotalSpinMultiplicity(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBInternalCoord * > > arg2 ;
  std::vector<OpenBabel::OBInternalCoord * > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  argp2 = *(std::vector<OpenBabel::OBInternalCoord * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<OpenBabel::OBInternalCoord * >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetInternalCoord(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetAutomaticFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAutomaticFormalCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetAutomaticPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAutomaticPartialCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetAromaticPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetAromaticPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetSSSRPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetSSSRPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetRingAtomsAndBondsPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetRingAtomsAndBondsPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetAtomTypesPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetAtomTypesPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetChainsPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetChainsPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetChiralityPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetChiralityPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetPartialChargesPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetPartialChargesPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetHybridizationPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetHybridizationPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetImplicitValencePerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetImplicitValencePerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetKekulePerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetKekulePerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetClosureBondsPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetClosureBondsPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetHydrogensAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetHydrogensAdded();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetCorrectedForPH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetCorrectedForPH();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetAromaticCorrected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetAromaticCorrected();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetSpinMultiplicityAssigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->SetSpinMultiplicityAssigned();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFlags(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1UnsetAromaticPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->UnsetAromaticPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1UnsetPartialChargesPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->UnsetPartialChargesPerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1UnsetImplicitValencePerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->UnsetImplicitValencePerceived();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1UnsetHydrogensAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->UnsetHydrogensAdded();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1UnsetFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UnsetFlag(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMol_1ClassDescription(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenBabel::OBMol::ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1RenumberAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBAtom * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * > & reference is null");
    return ;
  } 
  (arg1)->RenumberAtoms(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1ToInertialFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  (arg1)->ToInertialFrame(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1ToInertialFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->ToInertialFrame();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1Translate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ;
  } 
  (arg1)->Translate((OpenBabel::vector3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1Translate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->Translate((OpenBabel::vector3 const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1Rotate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  (arg1)->Rotate((double const (*)[3])arg2);
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1Rotate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->Rotate((double const (*))arg2);
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1Rotate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Rotate((double const (*))arg2,arg3);
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1Center_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->Center();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1Kekulize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Kekulize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1PerceiveKekuleBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->PerceiveKekuleBonds();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1NewPerceiveKekuleBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->NewPerceiveKekuleBonds();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1DeleteHydrogens_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->DeleteHydrogens();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1DeleteHydrogens_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->DeleteHydrogens(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1DeleteNonPolarHydrogens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->DeleteNonPolarHydrogens();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1DeleteHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->DeleteHydrogen(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddHydrogens_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->AddHydrogens(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddHydrogens_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->AddHydrogens(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddHydrogens_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AddHydrogens();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddHydrogens_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->AddHydrogens(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AddPolarHydrogens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AddPolarHydrogens();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1StripSalts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->StripSalts();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1Separate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  std::vector<OpenBabel::OBMol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->Separate(arg2);
  *(std::vector<OpenBabel::OBMol > **)&jresult = new std::vector<OpenBabel::OBMol >((std::vector<OpenBabel::OBMol > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1Separate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBMol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->Separate();
  *(std::vector<OpenBabel::OBMol > **)&jresult = new std::vector<OpenBabel::OBMol >((std::vector<OpenBabel::OBMol > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1ConvertDativeBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->ConvertDativeBonds();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1CorrectForPH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->CorrectForPH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1AssignSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->AssignSpinMultiplicity();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1Center_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->Center(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetTorsion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jdouble jarg6) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg5 = (OpenBabel::OBAtom *) 0 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = *(OpenBabel::OBAtom **)&jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->SetTorsion(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1FindSSSR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindSSSR();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1FindRingAtomsAndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindRingAtomsAndBonds();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1FindChiralCenters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindChiralCenters();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1FindChildren_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<int > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->FindChildren(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1FindChildren_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBAtom * > *arg2 = 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * > & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  (arg1)->FindChildren(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1FindLargestFragment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return ;
  } 
  (arg1)->FindLargestFragment(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1ContigFragList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<std::vector<int > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<std::vector<int > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > > & reference is null");
    return ;
  } 
  (arg1)->ContigFragList(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1Align(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  OpenBabel::vector3 *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  arg5 = *(OpenBabel::vector3 **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (arg1)->Align(arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1ConnectTheDots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->ConnectTheDots();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1PerceiveBondOrders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->PerceiveBondOrders();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1FindAngles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindAngles();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1FindTorsions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  (arg1)->FindTorsions();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1GetGTDVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->GetGTDVector(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1GetGIVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return ;
  } 
  (arg1)->GetGIVector(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1GetGIDVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return ;
  } 
  (arg1)->GetGIDVector(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1Has2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Has2D();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1Has3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Has3D();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasNonZeroCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasNonZeroCoords();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasAromaticPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasAromaticPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasSSSRPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasSSSRPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasRingAtomsAndBondsPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasRingAtomsAndBondsPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasAtomTypesPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasAtomTypesPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasChiralityPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasChiralityPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasPartialChargesPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasPartialChargesPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasHybridizationPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasHybridizationPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasImplicitValencePerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasImplicitValencePerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasKekulePerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasKekulePerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasClosureBondsPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasClosureBondsPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasChainsPerceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasChainsPerceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasHydrogensAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasHydrogensAdded();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasAromaticCorrected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasAromaticCorrected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1IsCorrectedForPH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->IsCorrectedForPH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1HasSpinMultiplicityAssigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->HasSpinMultiplicityAssigned();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMol_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (bool)(arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMol_1NumConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (int)(arg1)->NumConformers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<double * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<double * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double * > & reference is null");
    return ;
  } 
  (arg1)->SetConformers(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1AddConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->AddConformer(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1SetConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetConformer(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1CopyConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->CopyConformer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMol_1DeleteConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->DeleteConformer(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double *)(arg1)->GetConformer(arg2);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1BeginConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<double * >::iterator *arg2 = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<double * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double * >::iterator & reference is null");
    return 0;
  } 
  result = (double *)(arg1)->BeginConformer(*arg2);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NextConformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<double * >::iterator *arg2 = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<double * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<double * >::iterator & reference is null");
    return 0;
  } 
  result = (double *)(arg1)->NextConformer(*arg2);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1GetConformers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<double * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  {
    std::vector<double * > &_result_ref = (arg1)->GetConformers();
    result = (std::vector<double * > *) &_result_ref;
  }
  *(std::vector<double * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1BeginAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->BeginAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((OpenBabel::OBAtomIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1EndAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->EndAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((OpenBabel::OBAtomIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1BeginResidues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBResidue * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->BeginResidues();
  *(OpenBabel::OBResidueIterator **)&jresult = new OpenBabel::OBResidueIterator((OpenBabel::OBResidueIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1EndResidues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBResidue * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (arg1)->EndResidues();
  *(OpenBabel::OBResidueIterator **)&jresult = new OpenBabel::OBResidueIterator((OpenBabel::OBResidueIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1BeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtomIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtomIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->BeginAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBAtomIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBAtomIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(arg1)->NextAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1BeginResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidueIterator *arg2 = 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBResidueIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidue *)(arg1)->BeginResidue(*arg2);
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NextResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidueIterator *arg2 = 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(OpenBabel::OBResidueIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidue *)(arg1)->NextResidue(*arg2);
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1BeginInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBInternalCoord * >::iterator *arg2 = 0 ;
  OpenBabel::OBInternalCoord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBInternalCoord * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBInternalCoord * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBInternalCoord *)(arg1)->BeginInternalCoord(*arg2);
  *(OpenBabel::OBInternalCoord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMol_1NextInternalCoord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  std::vector<OpenBabel::OBInternalCoord * >::iterator *arg2 = 0 ;
  OpenBabel::OBInternalCoord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBInternalCoord * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBInternalCoord * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBInternalCoord *)(arg1)->NextInternalCoord(*arg2);
  *(OpenBabel::OBInternalCoord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_tokenize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)OpenBabel::tokenize(*arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_tokenize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)OpenBabel::tokenize(*arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_tokenize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)OpenBabel::tokenize(*arg1,*arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_tokenize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)OpenBabel::tokenize(*arg1,*arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_tokenize_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)OpenBabel::tokenize(*arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_ThrowError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  OpenBabel::ThrowError(arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_ThrowError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  OpenBabel::ThrowError(*arg1);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_CartesianToInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  std::vector<OpenBabel::OBInternalCoord * > *arg1 = 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::vector<OpenBabel::OBInternalCoord * > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBInternalCoord * > & reference is null");
    return ;
  } 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  OpenBabel::CartesianToInternal(*arg1,*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_InternalToCartesian(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  std::vector<OpenBabel::OBInternalCoord * > *arg1 = 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::vector<OpenBabel::OBInternalCoord * > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBInternalCoord * > & reference is null");
    return ;
  } 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  OpenBabel::InternalToCartesian(*arg1,*arg2);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_NewExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = OpenBabel::NewExtension(*arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_etab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBElementTable *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBElementTable **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBElementTable const & reference is null");
    return ;
  } 
  OpenBabel::etab = *arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_etab_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBElementTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBElementTable const &_result_ref = OpenBabel::etab;
    result = (OpenBabel::OBElementTable *) &_result_ref;
  }
  *(OpenBabel::OBElementTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_ttab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBTypeTable *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBTypeTable **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBTypeTable const & reference is null");
    return ;
  } 
  OpenBabel::ttab = *arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_ttab_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBTypeTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBTypeTable const &_result_ref = OpenBabel::ttab;
    result = (OpenBabel::OBTypeTable *) &_result_ref;
  }
  *(OpenBabel::OBTypeTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_isotab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBIsotopeTable *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBIsotopeTable **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBIsotopeTable const & reference is null");
    return ;
  } 
  OpenBabel::isotab = *arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_isotab_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBIsotopeTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBIsotopeTable const &_result_ref = OpenBabel::isotab;
    result = (OpenBabel::OBIsotopeTable *) &_result_ref;
  }
  *(OpenBabel::OBIsotopeTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_aromtyper_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAromaticTyper *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAromaticTyper **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAromaticTyper const & reference is null");
    return ;
  } 
  OpenBabel::aromtyper = *arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_aromtyper_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAromaticTyper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBAromaticTyper const &_result_ref = OpenBabel::aromtyper;
    result = (OpenBabel::OBAromaticTyper *) &_result_ref;
  }
  *(OpenBabel::OBAromaticTyper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_atomtyper_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomTyper *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomTyper **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomTyper const & reference is null");
    return ;
  } 
  OpenBabel::atomtyper = *arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_atomtyper_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomTyper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBAtomTyper const &_result_ref = OpenBabel::atomtyper;
    result = (OpenBabel::OBAtomTyper *) &_result_ref;
  }
  *(OpenBabel::OBAtomTyper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_chainsparser_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBChainsParser *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBChainsParser **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBChainsParser const & reference is null");
    return ;
  } 
  OpenBabel::chainsparser = *arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_chainsparser_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBChainsParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBChainsParser const &_result_ref = OpenBabel::chainsparser;
    result = (OpenBabel::OBChainsParser *) &_result_ref;
  }
  *(OpenBabel::OBChainsParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_resdat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueData *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueData **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueData const & reference is null");
    return ;
  } 
  OpenBabel::resdat = *arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_resdat_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::OBResidueData const &_result_ref = OpenBabel::resdat;
    result = (OpenBabel::OBResidueData *) &_result_ref;
  }
  *(OpenBabel::OBResidueData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_BUFF_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 32768;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_get_1rmat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  OpenBabel::get_rmat(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_ob_1make_1rmat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  double (*arg1)[3] ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double (**)[3])&jarg1; 
  arg2 = *(double **)&jarg2; 
  OpenBabel::ob_make_rmat((double (*)[3])arg1,arg2);
  
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_qtrfit(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double (*arg4)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  OpenBabel::qtrfit(arg1,arg2,arg3,(double (*)[3])arg4);
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_superimpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (double)OpenBabel::superimpose(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRing_1_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  std::vector<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(std::vector<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_path = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRing_1_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  std::vector<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  {
    std::vector<int > const &_result_ref =  ((arg1)->_path);
    result = (std::vector<int > *) &_result_ref;
  }
  *(std::vector<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRing_1_1pathset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_pathset = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRing_1_1pathset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBBitVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  {
    OpenBabel::OBBitVec const &_result_ref =  ((arg1)->_pathset);
    result = (OpenBabel::OBBitVec *) &_result_ref;
  }
  *(OpenBabel::OBBitVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBRing_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing();
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBRing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<int > *arg1 = 0 ;
  int arg2 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing(*arg1,arg2);
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBRing_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector<int > *arg1 = 0 ;
  OpenBabel::OBBitVec arg2 ;
  OpenBabel::OBRing *result = 0 ;
  OpenBabel::OBBitVec *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector<int > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > & reference is null");
    return 0;
  } 
  argp2 = *(OpenBabel::OBBitVec **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenBabel::OBBitVec");
    return 0;
  }
  arg2 = *argp2; 
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing(*arg1,arg2);
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBRing_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *arg1 = 0 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBRing const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBRing *)new OpenBabel::OBRing((OpenBabel::OBRing const &)*arg1);
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBRing_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  result = (int)((OpenBabel::OBRing const *)arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBRing_1PathSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  result = (int)((OpenBabel::OBRing const *)arg1)->PathSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBRing_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  result = (bool)(arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBRing_1IsMember_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(arg1)->IsMember(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBRing_1IsMember_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(arg1)->IsMember(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBRing_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsInRing(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRing_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (arg1)->SetParent(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRing_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  result = (OpenBabel::OBMol *)(arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBRing_1findCenterAndNormal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->findCenterAndNormal(*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBRing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_CompareRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBRing *arg1 = (OpenBabel::OBRing *) 0 ;
  OpenBabel::OBRing *arg2 = (OpenBabel::OBRing *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBRing **)&jarg1; 
  arg2 = *(OpenBabel::OBRing **)&jarg2; 
  result = (bool)OpenBabel::CompareRingSize((OpenBabel::OBRing const *)arg1,(OpenBabel::OBRing const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBRingSearch(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBRingSearch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBRingSearch *)new OpenBabel::OBRingSearch();
  *(OpenBabel::OBRingSearch **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBRingSearch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRingSearch_1SortRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  (arg1)->SortRings();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRingSearch_1RemoveRedundant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveRedundant(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRingSearch_1AddRingFromClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (arg1)->AddRingFromClosure(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBRingSearch_1SaveUniqueRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  std::deque<int > *arg2 = 0 ;
  std::deque<int > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  arg2 = *(std::deque<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque<int > & reference is null");
    return 0;
  } 
  arg3 = *(std::deque<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque<int > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->SaveUniqueRing(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRingSearch_1WriteRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  (arg1)->WriteRings();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRingSearch_1BeginRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBRing * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  result = (arg1)->BeginRings();
  *(std::vector<OpenBabel::OBRing * >::iterator **)&jresult = new std::vector<OpenBabel::OBRing * >::iterator((std::vector<OpenBabel::OBRing * >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBRingSearch_1EndRings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBRingSearch *arg1 = (OpenBabel::OBRingSearch *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBRing * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRingSearch **)&jarg1; 
  result = (arg1)->EndRings();
  *(std::vector<OpenBabel::OBRing * >::iterator **)&jresult = new std::vector<OpenBabel::OBRing * >::iterator((std::vector<OpenBabel::OBRing * >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBRTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBRTree *arg2 = (OpenBabel::OBRTree *) 0 ;
  OpenBabel::OBRTree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  arg2 = *(OpenBabel::OBRTree **)&jarg2; 
  result = (OpenBabel::OBRTree *)new OpenBabel::OBRTree(arg1,arg2);
  *(OpenBabel::OBRTree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBRTree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBRTree **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBRTree_1GetAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRTree **)&jarg1; 
  result = (int)(arg1)->GetAtomIdx();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBRTree_1PathToRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBRTree *arg1 = (OpenBabel::OBRTree *) 0 ;
  std::vector<OpenBabel::OBAtom * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBRTree **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * > & reference is null");
    return ;
  } 
  (arg1)->PathToRoot(*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSmartsPattern_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBSmartsPattern *)new OpenBabel::OBSmartsPattern();
  *(OpenBabel::OBSmartsPattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBSmartsPattern(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSmartsPattern_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = 0 ;
  OpenBabel::OBSmartsPattern *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBSmartsPattern const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBSmartsPattern *)new OpenBabel::OBSmartsPattern((OpenBabel::OBSmartsPattern const &)*arg1);
  *(OpenBabel::OBSmartsPattern **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBSmartsPattern_1Init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->Init((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBSmartsPattern_1GetSMARTS_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenBabel::OBSmartsPattern const *)arg1)->GetSMARTS();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBSmartsPattern_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBSmartsPattern_1IsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (bool)((OpenBabel::OBSmartsPattern const *)arg1)->IsValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSmartsPattern_1NumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumAtoms();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSmartsPattern_1NumBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumBonds();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSmartsPattern_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg4 = *(int **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg5 = (int)jarg5; 
  (arg1)->GetBond(*arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBSmartsPattern_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetAtomicNum(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBSmartsPattern_1GetCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetCharge(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBSmartsPattern_1GetVectorBinding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenBabel::OBSmartsPattern const *)arg1)->GetVectorBinding(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBSmartsPattern_1Match_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->Match(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBSmartsPattern_1Match_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->Match(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  std::vector<std::pair<int,int > > *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(std::vector<std::pair<int,int > > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::pair<int,int > > & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  std::vector<std::pair<int,int > > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(std::vector<std::pair<int,int > > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::pair<int,int > > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBSmartsPattern_1RestrictedMatch_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  OpenBabel::OBBitVec *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::OBBitVec **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->RestrictedMatch(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSmartsPattern_1NumMatches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (unsigned int)((OpenBabel::OBSmartsPattern const *)arg1)->NumMatches();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSmartsPattern_1GetMapList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::vector<std::vector<int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  {
    std::vector<std::vector<int > > &_result_ref = (arg1)->GetMapList();
    result = (std::vector<std::vector<int > > *) &_result_ref;
  }
  *(std::vector<std::vector<int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSmartsPattern_1BeginMList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  SwigValueWrapper<std::vector<std::vector<int > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (arg1)->BeginMList();
  *(std::vector<std::vector<int > >::iterator **)&jresult = new std::vector<std::vector<int > >::iterator((std::vector<std::vector<int > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSmartsPattern_1EndMList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  SwigValueWrapper<std::vector<std::vector<int > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  result = (arg1)->EndMList();
  *(std::vector<std::vector<int > >::iterator **)&jresult = new std::vector<std::vector<int > >::iterator((std::vector<std::vector<int > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBSmartsPattern_1GetUMapList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::vector<std::vector<int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  {
    std::vector<std::vector<int > > &_result_ref = (arg1)->GetUMapList();
    result = (std::vector<std::vector<int > > *) &_result_ref;
  }
  *(std::vector<std::vector<int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSmartsPattern_1WriteMapList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBSmartsPattern *arg1 = (OpenBabel::OBSmartsPattern *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBSmartsPattern **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  (arg1)->WriteMapList(*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBSSMatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = 0 ;
  OpenBabel::Pattern *arg2 = (OpenBabel::Pattern *) 0 ;
  OpenBabel::OBSSMatch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  arg2 = *(OpenBabel::Pattern **)&jarg2; 
  result = (OpenBabel::OBSSMatch *)new OpenBabel::OBSSMatch(*arg1,arg2);
  *(OpenBabel::OBSSMatch **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBSSMatch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBSSMatch **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSSMatch_1Match_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ;
  std::vector<std::vector<int > > *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSSMatch **)&jarg1; 
  arg2 = *(std::vector<std::vector<int > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > > & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->Match(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBSSMatch_1Match_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBSSMatch *arg1 = (OpenBabel::OBSSMatch *) 0 ;
  std::vector<std::vector<int > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBSSMatch **)&jarg1; 
  arg2 = *(std::vector<std::vector<int > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::vector<int > > & reference is null");
    return ;
  } 
  (arg1)->Match(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_SmartsLexReplace(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::string *arg1 = 0 ;
  std::vector<std::pair<std::string,std::string > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  arg2 = *(std::vector<std::pair<std::string,std::string > > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::pair<std::string,std::string > > & reference is null");
    return ;
  } 
  OpenBabel::SmartsLexReplace(*arg1,*arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFingerprint_1Iter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::PluginIter<OpenBabel::OBFingerprint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenBabel::PluginIter<OpenBabel::OBFingerprint > &_result_ref = OpenBabel::OBFingerprint::Iter();
    result = (OpenBabel::PluginIter<OpenBabel::OBFingerprint > *) &_result_ref;
  }
  *(OpenBabel::PluginIter<OpenBabel::OBFingerprint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFingerprint_1FindDefaultType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBFingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBFingerprint *)OpenBabel::OBFingerprint::FindDefaultType();
  *(OpenBabel::OBFingerprint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFingerprint_1FindType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenBabel::OBFingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBFingerprint *)OpenBabel::OBFingerprint::FindType((std::string const &)*arg1);
  *(OpenBabel::OBFingerprint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFingerprint_1SetBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetBit(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFingerprint_1Fold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  (arg1)->Fold(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBFingerprint_1GetFingerprint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::vector<unsigned int > *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::vector<unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->GetFingerprint(arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBFingerprint_1GetFingerprint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::vector<unsigned int > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::vector<unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->GetFingerprint(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBFingerprint_1Description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  result = (arg1)->Description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFingerprint_1FPT_1UNIQUEBITS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenBabel::OBFingerprint::FptFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBFingerprint::FptFlag)OpenBabel::OBFingerprint::FPT_UNIQUEBITS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFingerprint_1Flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBFingerprint *arg1 = (OpenBabel::OBFingerprint *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFingerprint **)&jarg1; 
  result = (unsigned int)(arg1)->Flags();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBFingerprint_1Tanimoto_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  std::vector<unsigned int > *arg1 = 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector<unsigned int > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > const & reference is null");
    return 0;
  } 
  result = (double)OpenBabel::OBFingerprint::Tanimoto((std::vector<unsigned int > const &)*arg1,(std::vector<unsigned int > const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBFingerprint_1Tanimoto_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  std::vector<unsigned int > *arg1 = 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<unsigned int > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > const & reference is null");
    return 0;
  } 
  arg2 = *(unsigned int **)&jarg2; 
  result = (double)OpenBabel::OBFingerprint::Tanimoto((std::vector<unsigned int > const &)*arg1,(unsigned int const *)arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFingerprint_1Getbitsperint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)OpenBabel::OBFingerprint::Getbitsperint();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFingerprint_1FindFingerprint(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenBabel::OBFingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBFingerprint *)OpenBabel::OBFingerprint::FindFingerprint((std::string const &)*arg1);
  *(OpenBabel::OBFingerprint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_FptIndexHeader_1headerlength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->headerlength = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_FptIndexHeader_1headerlength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  result = (unsigned int) ((arg1)->headerlength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_FptIndexHeader_1nEntries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->nEntries = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_FptIndexHeader_1nEntries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  result = (unsigned int) ((arg1)->nEntries);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_FptIndexHeader_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->words = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_FptIndexHeader_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  result = (unsigned int) ((arg1)->words);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_FptIndexHeader_1fpid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) strncpy((char *)arg1->fpid, (const char *)arg2, 16);
    else arg1->fpid[0] = 0;
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_FptIndexHeader_1fpid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  result = (char *)(char *) ((arg1)->fpid);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_FptIndexHeader_1datafilename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) strncpy((char *)arg1->datafilename, (const char *)arg2, 256);
    else arg1->datafilename[0] = 0;
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_FptIndexHeader_1datafilename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  result = (char *)(char *) ((arg1)->datafilename);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1FptIndexHeader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::FptIndexHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::FptIndexHeader *)new OpenBabel::FptIndexHeader();
  *(OpenBabel::FptIndexHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1FptIndexHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::FptIndexHeader *arg1 = (OpenBabel::FptIndexHeader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::FptIndexHeader **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_FptIndex_1header_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  OpenBabel::FptIndexHeader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  arg2 = *(OpenBabel::FptIndexHeader **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::FptIndexHeader const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->header = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_FptIndex_1header_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  OpenBabel::FptIndexHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  {
    OpenBabel::FptIndexHeader const &_result_ref =  ((arg1)->header);
    result = (OpenBabel::FptIndexHeader *) &_result_ref;
  }
  *(OpenBabel::FptIndexHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_FptIndex_1fptdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->fptdata = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_FptIndex_1fptdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  std::vector<unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  {
    std::vector<unsigned int > const &_result_ref =  ((arg1)->fptdata);
    result = (std::vector<unsigned int > *) &_result_ref;
  }
  *(std::vector<unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_FptIndex_1seekdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  arg2 = *(std::vector<unsigned int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->seekdata = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_FptIndex_1seekdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  std::vector<unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  {
    std::vector<unsigned int > const &_result_ref =  ((arg1)->seekdata);
    result = (std::vector<unsigned int > *) &_result_ref;
  }
  *(std::vector<unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_FptIndex_1Read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  arg2 = *(std::istream **)&jarg2; 
  result = (bool)(arg1)->Read(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_FptIndex_1CheckFP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  OpenBabel::OBFingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  result = (OpenBabel::OBFingerprint *)(arg1)->CheckFP();
  *(OpenBabel::OBFingerprint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1FptIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::FptIndex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::FptIndex *)new OpenBabel::FptIndex();
  *(OpenBabel::FptIndex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1FptIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_FastSearch_1ReadIndexFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->ReadIndexFile(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_FastSearch_1ReadIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(std::istream **)&jarg2; 
  result = (arg1)->ReadIndex(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1FastSearch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_FastSearch_1Find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::vector<unsigned int > *arg3 = 0 ;
  unsigned int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::vector<unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->Find(arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_FastSearch_1FindMatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::vector<unsigned int > *arg3 = 0 ;
  unsigned int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::vector<unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<unsigned int > & reference is null");
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->FindMatch(arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_FastSearch_1FindSimilar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::multimap<double,unsigned int > *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::multimap<double,unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::multimap<double,unsigned int > & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->FindSimilar(arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_FastSearch_1FindSimilar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::multimap<double,unsigned int > *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::multimap<double,unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::multimap<double,unsigned int > & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->FindSimilar(arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_FastSearch_1FindSimilar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::multimap<double,unsigned int > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  arg3 = *(std::multimap<double,unsigned int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::multimap<double,unsigned int > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->FindSimilar(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_FastSearch_1GetFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::OBFingerprint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  result = (OpenBabel::OBFingerprint *)((OpenBabel::FastSearch const *)arg1)->GetFingerprint();
  *(OpenBabel::OBFingerprint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_FastSearch_1GetIndexHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::FastSearch *arg1 = (OpenBabel::FastSearch *) 0 ;
  OpenBabel::FptIndexHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FastSearch **)&jarg1; 
  {
    OpenBabel::FptIndexHeader const &_result_ref = ((OpenBabel::FastSearch const *)arg1)->GetIndexHeader();
    result = (OpenBabel::FptIndexHeader *) &_result_ref;
  }
  *(OpenBabel::FptIndexHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1FastSearch(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::FastSearch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::FastSearch *)new OpenBabel::FastSearch();
  *(OpenBabel::FastSearch **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1FastSearchIndexer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  OpenBabel::FastSearchIndexer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg2 = *(std::ostream **)&jarg2; 
  arg3 = *(std::string **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(*arg1,arg2,*arg3,arg4);
  *(OpenBabel::FastSearchIndexer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1FastSearchIndexer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  std::string *arg3 = 0 ;
  OpenBabel::FastSearchIndexer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  arg2 = *(std::ostream **)&jarg2; 
  arg3 = *(std::string **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(*arg1,arg2,*arg3);
  *(OpenBabel::FastSearchIndexer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1FastSearchIndexer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::FptIndex *arg1 = (OpenBabel::FptIndex *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  OpenBabel::FastSearchIndexer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::FptIndex **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  result = (OpenBabel::FastSearchIndexer *)new OpenBabel::FastSearchIndexer(arg1,arg2);
  *(OpenBabel::FastSearchIndexer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1FastSearchIndexer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::FastSearchIndexer *arg1 = (OpenBabel::FastSearchIndexer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::FastSearchIndexer **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_FastSearchIndexer_1Add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::FastSearchIndexer *arg1 = (OpenBabel::FastSearchIndexer *) 0 ;
  OpenBabel::OBBase *arg2 = (OpenBabel::OBBase *) 0 ;
  std::streampos arg3 ;
  bool result;
  std::streampos *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::FastSearchIndexer **)&jarg1; 
  arg2 = *(OpenBabel::OBBase **)&jarg2; 
  argp3 = *(std::streampos **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::streampos");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->Add(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1LOGLVL_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1LOGLVL_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1LOGLVL_1MEDIUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 2;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1LOGLVL_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 3;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1ENERGY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 0);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1EBOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1EANGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 2);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1ESTRBND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 3);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1ETORSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 4);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1EOOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 5);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1EVDW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 6);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1EELECTROSTATIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 7);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1NUMERICAL_1GRADIENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 0);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFF_1ANALYTICAL_1GRADIENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) (1 << 1);
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_KCAL_1TO_1KJ_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) 4.1868;
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->a = arg2;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFFParameter_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (int) ((arg1)->a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->b = arg2;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFFParameter_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (int) ((arg1)->b);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->c = arg2;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFFParameter_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (int) ((arg1)->c);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->d = arg2;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFFParameter_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (int) ((arg1)->d);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_a = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBFFParameter_1_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->_a);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_b = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBFFParameter_1_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->_b);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_c = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBFFParameter_1_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->_c);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->_d = *arg2;
  
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBFFParameter_1_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  {
    std::string const &_result_ref =  ((arg1)->_d);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1ipar1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ipar1 = arg2;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFFParameter_1ipar1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (int) ((arg1)->ipar1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1ipar2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ipar2 = arg2;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFFParameter_1ipar2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (int) ((arg1)->ipar2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1ipar3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ipar3 = arg2;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFFParameter_1ipar3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (int) ((arg1)->ipar3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1ipar4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ipar4 = arg2;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFFParameter_1ipar4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (int) ((arg1)->ipar4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1ipar5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ipar5 = arg2;
  
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBFFParameter_1ipar5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (int) ((arg1)->ipar5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1dpar1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dpar1 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBFFParameter_1dpar1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (double) ((arg1)->dpar1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1dpar2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dpar2 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBFFParameter_1dpar2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (double) ((arg1)->dpar2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1dpar3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dpar3 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBFFParameter_1dpar3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (double) ((arg1)->dpar3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1dpar4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dpar4 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBFFParameter_1dpar4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (double) ((arg1)->dpar4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1dpar5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->dpar5 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBFFParameter_1dpar5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  result = (double) ((arg1)->dpar5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFParameter_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBFFParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBFFParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBFFParameter *)new OpenBabel::OBFFParameter();
  *(OpenBabel::OBFFParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBFFParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFFParameter *arg1 = (OpenBabel::OBFFParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFFParameter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBFFCalculation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBFFCalculation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBFFCalculation *)new OpenBabel::OBFFCalculation();
  *(OpenBabel::OBFFCalculation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBFFCalculation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBFFCalculation *arg1 = (OpenBabel::OBFFCalculation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBFFCalculation **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBFFCalculation_1GetEnergy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBFFCalculation *arg1 = (OpenBabel::OBFFCalculation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation **)&jarg1; 
  result = (double)(arg1)->GetEnergy();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBFFCalculation_1GetGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBFFCalculation *arg1 = (OpenBabel::OBFFCalculation *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBFFCalculation **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (arg1)->GetGradient(arg2);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBFFCalculation_1energy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBFFCalculation *arg1 = (OpenBabel::OBFFCalculation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->energy = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBFFCalculation_1energy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBFFCalculation *arg1 = (OpenBabel::OBFFCalculation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBFFCalculation **)&jarg1; 
  result = (double) ((arg1)->energy);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBForceField_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  bool arg2 ;
  OpenBabel::OBForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenBabel::OBForceField *)new OpenBabel::OBForceField(arg1,arg2);
  *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBForceField_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  OpenBabel::OBForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenBabel::OBForceField *)new OpenBabel::OBForceField(arg1);
  *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBForceField_1Iter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::PluginIter<OpenBabel::OBForceField > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  {
    OpenBabel::PluginIter<OpenBabel::OBForceField > &_result_ref = (arg1)->Iter();
    result = (OpenBabel::PluginIter<OpenBabel::OBForceField > *) &_result_ref;
  }
  *(OpenBabel::PluginIter<OpenBabel::OBForceField > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBForceField_1FindDefaultType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (OpenBabel::OBForceField *)(arg1)->FindDefaultType();
  *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBForceField_1FindType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBForceField *)(arg1)->FindType((std::string const &)*arg2);
  *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBForceField_1FindForceField_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  std::string *arg2 = 0 ;
  OpenBabel::OBForceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenBabel::OBForceField *)(arg1)->FindForceField((std::string const &)*arg2);
  *(OpenBabel::OBForceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBForceField_1GetUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (arg1)->GetUnit();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBForceField_1Setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->Setup(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBForceField_1UpdateCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBMol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMol & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->UpdateCoordinates(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1OBFFLog_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->OBFFLog(arg2);
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1Energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (double)(arg1)->Energy();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1E_1Bond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (double)(arg1)->E_Bond();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1E_1Angle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (double)(arg1)->E_Angle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1E_1StrBnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (double)(arg1)->E_StrBnd();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1E_1Torsion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (double)(arg1)->E_Torsion();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1E_1OOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (double)(arg1)->E_OOP();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1E_1VDW(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (double)(arg1)->E_VDW();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1E_1Electrostatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (double)(arg1)->E_Electrostatic();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBForceField_1SetLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  result = (bool)(arg1)->SetLogFile(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBForceField_1SetLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SetLogLevel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBForceField_1GetLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (int)(arg1)->GetLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1DistanceGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  (arg1)->DistanceGeometry();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1GenerateCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  (arg1)->GenerateCoordinates();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1SystematicRotorSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  (arg1)->SystematicRotorSearch();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBForceField_1LineSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (arg1)->LineSearch(arg2,*arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1SteepestDescent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SteepestDescent(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1SteepestDescent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SteepestDescent(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1SteepestDescent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SteepestDescent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1SteepestDescentInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SteepestDescentInitialize(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1SteepestDescentInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SteepestDescentInitialize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1SteepestDescentInitialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SteepestDescentInitialize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBForceField_1SteepestDescentTakeNSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SteepestDescentTakeNSteps(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1ConjugateGradients_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->ConjugateGradients(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1ConjugateGradients_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->ConjugateGradients(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1ConjugateGradients_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ConjugateGradients(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1ConjugateGradientsInitialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->ConjugateGradientsInitialize(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1ConjugateGradientsInitialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->ConjugateGradientsInitialize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1ConjugateGradientsInitialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ConjugateGradientsInitialize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBForceField_1ConjugateGradientsTakeNSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ConjugateGradientsTakeNSteps(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBForceField_1ValidateLineSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (arg1)->ValidateLineSearch(arg2,*arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1ValidateSteepestDescent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ValidateSteepestDescent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBForceField_1ValidateConjugateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ValidateConjugateGradients(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBForceField_1Validate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (bool)(arg1)->Validate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBForceField_1ValidateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  result = (bool)(arg1)->ValidateGradients();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBForceField_1ValidateGradientError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (arg1)->ValidateGradientError(*arg2,*arg3);
  *(OpenBabel::vector3 **)&jresult = new OpenBabel::vector3((OpenBabel::vector3 &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1VectorLengthDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (double)(arg1)->VectorLengthDerivative(*arg2,*arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1VectorAngleDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (double)(arg1)->VectorAngleDerivative(*arg2,*arg3,*arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBForceField_1VectorTorsionDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ;
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  OpenBabel::vector3 *arg5 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg5 = *(OpenBabel::vector3 **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (double)(arg1)->VectorTorsionDerivative(*arg2,*arg3,*arg4,*arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBForceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBForceField *arg1 = (OpenBabel::OBForceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBForceField **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter();
  *(OpenBabel::OBMolAtomIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter(arg1);
  *(OpenBabel::OBMolAtomIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = 0 ;
  OpenBabel::OBMolAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolAtomIter *)new OpenBabel::OBMolAtomIter((OpenBabel::OBMolAtomIter const &)*arg1);
  *(OpenBabel::OBMolAtomIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBMolAtomIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMolAtomIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1IncrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1DecrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetVector();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1UnsetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetAntiClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1UnsetStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetInRing();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->SetChiral();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetCIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetHvyValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetHeteroValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMolAtomIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetNextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->NewResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->AddResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->ClearBond();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1ForceNoH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasNoHForced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1ImplicitHydrogenCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1BOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1KBOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsCarbon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsSulfur(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsPhosphorus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsNotCorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsAntiClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasChiralitySpecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasChiralVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMolAtomIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomIter_1HasData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomIter_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomIter *arg1 = (OpenBabel::OBMolAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomDFSIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter();
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomDFSIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  int arg2 ;
  OpenBabel::OBMolAtomDFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter(arg1,arg2);
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomDFSIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolAtomDFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter(arg1);
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomDFSIter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = 0 ;
  OpenBabel::OBMolAtomDFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomDFSIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolAtomDFSIter *)new OpenBabel::OBMolAtomDFSIter((OpenBabel::OBMolAtomDFSIter const &)*arg1);
  *(OpenBabel::OBMolAtomDFSIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomDFSIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBMolAtomDFSIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(arg1)->next();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMolAtomDFSIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IncrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1DecrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetVector();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1UnsetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetAntiClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1UnsetStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetInRing();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->SetChiral();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetCIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetHvyValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetHeteroValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetNextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->NewResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->AddResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->ClearBond();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1ForceNoH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasNoHForced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1ImplicitHydrogenCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1BOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1KBOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsCarbon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsSulfur(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsPhosphorus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsNotCorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsAntiClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasChiralitySpecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasChiralVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1HasData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomDFSIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomDFSIter *arg1 = (OpenBabel::OBMolAtomDFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomDFSIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomBFSIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter();
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomBFSIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolAtomBFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter(arg1);
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAtomBFSIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = 0 ;
  OpenBabel::OBMolAtomBFSIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAtomBFSIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolAtomBFSIter *)new OpenBabel::OBMolAtomBFSIter((OpenBabel::OBMolAtomBFSIter const &)*arg1);
  *(OpenBabel::OBMolAtomBFSIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBMolAtomBFSIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBMolAtomBFSIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMolAtomBFSIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IncrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1DecrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetVector();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1UnsetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetAntiClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1UnsetStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetInRing();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->SetChiral();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetCIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetHvyValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetHeteroValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetNextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->NewResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->AddResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->ClearBond();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1ForceNoH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasNoHForced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1ImplicitHydrogenCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1BOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1KBOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsCarbon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsSulfur(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsPhosphorus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsNotCorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsAntiClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasChiralitySpecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasChiralVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1HasData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAtomBFSIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAtomBFSIter *arg1 = (OpenBabel::OBMolAtomBFSIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAtomBFSIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolBondIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter();
  *(OpenBabel::OBMolBondIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolBondIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter(arg1);
  *(OpenBabel::OBMolBondIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolBondIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = 0 ;
  OpenBabel::OBMolBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolBondIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolBondIter *)new OpenBabel::OBMolBondIter((OpenBabel::OBMolBondIter const &)*arg1);
  *(OpenBabel::OBMolBondIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBMolBondIter const *)arg1)->operator ->();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  {
    OpenBabel::OBBond &_result_ref = ((OpenBabel::OBMolBondIter const *)arg1)->operator *();
    result = (OpenBabel::OBBond *) &_result_ref;
  }
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMolBondIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetBO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetBO(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetBondOrder(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->SetBegin(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->SetEnd(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (double)jarg3; 
  (*arg1)->SetLength(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (*arg1)->Set(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetKSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetKSingle();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetKDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetKDouble();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetKTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetKTriple();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetHash();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetWedge();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetUp();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetDown();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetInRing();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->SetClosure();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1UnsetHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetHash();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1UnsetWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetWedge();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1UnsetUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetUp();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1UnsetDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetDown();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1UnsetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1UnsetKekule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  (*arg1)->UnsetKekule();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetBO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBO();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBondOrder();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetFlags();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetBeginAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBeginAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetEndAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetEndAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetBeginAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetEndAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolBondIter_1GetEquibLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (double)(*arg1)->GetEquibLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBMolBondIter_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (double)(*arg1)->GetLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetNbrAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)(*arg1)->GetNbrAtomIdx(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsRotor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsRotor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsPrimaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsPrimaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsSecondaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsSecondaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsEster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsEster();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsCarbonyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbonyl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsSingle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDouble();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsTriple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsKSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKSingle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsKDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKDouble();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsKTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKTriple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsClosure();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsUp();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsWedge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsHash();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1IsDoubleBondGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDoubleBondGeometry();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBMolBondIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolBondIter_1HasData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolBondIter_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolBondIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolBondIter *arg1 = (OpenBabel::OBMolBondIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolBondIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAtomAtomIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter();
  *(OpenBabel::OBAtomAtomIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAtomAtomIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtomAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter(arg1);
  *(OpenBabel::OBAtomAtomIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAtomAtomIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = 0 ;
  OpenBabel::OBAtomAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomAtomIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtomAtomIter *)new OpenBabel::OBAtomAtomIter((OpenBabel::OBAtomAtomIter const &)*arg1);
  *(OpenBabel::OBAtomAtomIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBAtomAtomIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBAtomAtomIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBAtomAtomIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1IncrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1DecrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetVector();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1UnsetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetAntiClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1UnsetStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetInRing();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->SetChiral();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetCIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetHvyValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetHeteroValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetNextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->NewResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->AddResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->ClearBond();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1ForceNoH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasNoHForced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1ImplicitHydrogenCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomAtomIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1BOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1KBOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsCarbon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsSulfur(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsPhosphorus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsNotCorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsAntiClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasChiralitySpecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasChiralVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBAtomAtomIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBAtomAtomIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomAtomIter_1HasData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomAtomIter_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomAtomIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomAtomIter *arg1 = (OpenBabel::OBAtomAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomAtomIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAtomBondIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter();
  *(OpenBabel::OBAtomBondIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAtomBondIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtom *arg1 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtomBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtom **)&jarg1; 
  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter(arg1);
  *(OpenBabel::OBAtomBondIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBAtomBondIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = 0 ;
  OpenBabel::OBAtomBondIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBAtomBondIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtomBondIter *)new OpenBabel::OBAtomBondIter((OpenBabel::OBAtomBondIter const &)*arg1);
  *(OpenBabel::OBAtomBondIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBBond *)((OpenBabel::OBAtomBondIter const *)arg1)->operator ->();
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  {
    OpenBabel::OBBond &_result_ref = ((OpenBabel::OBAtomBondIter const *)arg1)->operator *();
    result = (OpenBabel::OBBond *) &_result_ref;
  }
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBAtomBondIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetBO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetBO(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetBondOrder(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->SetBegin(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->SetEnd(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (double)jarg3; 
  (*arg1)->SetLength(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  int arg2 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg4 = (OpenBabel::OBAtom *) 0 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  arg4 = *(OpenBabel::OBAtom **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (*arg1)->Set(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetKSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetKSingle();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetKDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetKDouble();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetKTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetKTriple();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetHash();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetWedge();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetUp();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetDown();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetInRing();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->SetClosure();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1UnsetHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetHash();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1UnsetWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetWedge();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1UnsetUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetUp();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1UnsetDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetDown();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1UnsetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1UnsetKekule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  (*arg1)->UnsetKekule();
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetBO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBO();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetBondOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBondOrder();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetFlags();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetBeginAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetBeginAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetEndAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetEndAtomIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetBeginAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetBeginAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetEndAtom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetEndAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNbrAtom(arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomBondIter_1GetEquibLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (double)(*arg1)->GetEquibLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBAtomBondIter_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (double)(*arg1)->GetLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetNbrAtomIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)(*arg1)->GetNbrAtomIdx(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsRotor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsRotor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsPrimaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsPrimaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsSecondaryAmide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsSecondaryAmide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsEster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsEster();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsCarbonyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbonyl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsSingle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDouble();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsTriple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsKSingle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKSingle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsKDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKDouble();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsKTriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsKTriple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsClosure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsClosure();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsUp();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsWedge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsWedge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsHash();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1IsDoubleBondGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->IsDoubleBondGeometry();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBAtomBondIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBAtomBondIter_1HasData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBAtomBondIter_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBAtomBondIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBAtomBondIter *arg1 = (OpenBabel::OBAtomBondIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBAtomBondIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBResidueIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter();
  *(OpenBabel::OBResidueIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBResidueIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBResidueIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter(arg1);
  *(OpenBabel::OBResidueIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBResidueIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = 0 ;
  OpenBabel::OBResidueIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidueIter *)new OpenBabel::OBResidueIter((OpenBabel::OBResidueIter const &)*arg1);
  *(OpenBabel::OBResidueIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)((OpenBabel::OBResidueIter const *)arg1)->operator ->();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  {
    OpenBabel::OBResidue &_result_ref = ((OpenBabel::OBResidueIter const *)arg1)->operator *();
    result = (OpenBabel::OBResidue *) &_result_ref;
  }
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBResidueIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1AddAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->AddAtom(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1InsertAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->InsertAtom(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1RemoveAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  (*arg1)->RemoveAtom(arg2);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (*arg1)->SetName((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1SetNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1SetChain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (char)jarg2; 
  (*arg1)->SetChain(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1SetChainNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetChainNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1SetAtomID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (*arg1)->SetAtomID(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1SetHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->SetHetAtom(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1SetSerialNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetSerialNum(arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBResidueIter_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->GetName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetNumAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetNumAtoms();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_openbabelJNI_OBResidueIter_1GetChain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (char)(*arg1)->GetChain();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetChainNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetChainNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetResKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetResKey();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->GetAtoms();
  *(std::vector<OpenBabel::OBAtom * > **)&jresult = new std::vector<OpenBabel::OBAtom * >((std::vector<OpenBabel::OBAtom * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetBonds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  bool arg2 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->GetBonds(arg2);
  *(std::vector<OpenBabel::OBBond * > **)&jresult = new std::vector<OpenBabel::OBBond * >((std::vector<OpenBabel::OBBond * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetBonds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->GetBonds();
  *(std::vector<OpenBabel::OBBond * > **)&jresult = new std::vector<OpenBabel::OBBond * >((std::vector<OpenBabel::OBBond * > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBResidueIter_1GetAtomID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (*arg1)->GetAtomID(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetSerialNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (unsigned int)(*arg1)->GetSerialNum(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueIter_1GetAminoAcidProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->GetAminoAcidProperty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueIter_1GetAtomProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(*arg1)->GetAtomProperty(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueIter_1GetResidueProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->GetResidueProperty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueIter_1IsHetAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsHetAtom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueIter_1IsResidueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsResidueType(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1BeginAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->BeginAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((OpenBabel::OBAtomIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1EndAtoms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBAtom * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->EndAtoms();
  *(OpenBabel::OBAtomIterator **)&jresult = new OpenBabel::OBAtomIterator((OpenBabel::OBAtomIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1BeginAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector<OpenBabel::OBAtom * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1NextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector<OpenBabel::OBAtom * >::iterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBAtom * >::iterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBAtom * >::iterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBResidueIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueIter_1HasData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueIter_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueIter *arg1 = (OpenBabel::OBResidueIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBResidueAtomIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter();
  *(OpenBabel::OBResidueAtomIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBResidueAtomIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidue *arg1 = (OpenBabel::OBResidue *) 0 ;
  OpenBabel::OBResidueAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidue **)&jarg1; 
  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter(arg1);
  *(OpenBabel::OBResidueAtomIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBResidueAtomIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = 0 ;
  OpenBabel::OBResidueAtomIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBResidueAtomIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBResidueAtomIter *)new OpenBabel::OBResidueAtomIter((OpenBabel::OBResidueAtomIter const &)*arg1);
  *(OpenBabel::OBResidueAtomIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)((OpenBabel::OBResidueAtomIter const *)arg1)->operator ->();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  {
    OpenBabel::OBAtom &_result_ref = ((OpenBabel::OBResidueAtomIter const *)arg1)->operator *();
    result = (OpenBabel::OBAtom *) &_result_ref;
  }
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBResidueAtomIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1Visit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (*arg1)->Visit = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1Visit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool) ((*arg1)->Visit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->Clear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetIdx(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetHyb(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetAtomicNum(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetIsotope(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetImplicitValence(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1IncrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->IncrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1DecrementImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->DecrementImplicitValence();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFormalCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->SetSpinMultiplicity(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (*arg1)->SetType(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (*arg1)->SetType(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->SetPartialCharge(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return ;
  } 
  (*arg1)->SetVector(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (*arg1)->SetVector(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetVector();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double **arg2 = (double **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(double ***)&jarg2; 
  (*arg1)->SetCoordPtr(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->SetResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1UnsetAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->UnsetAromatic();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetAntiClockwiseStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetAntiClockwiseStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetPositiveStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetNegativeStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1UnsetStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->UnsetStereo();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetInRing();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->SetChiral();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1ClearCoordPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->ClearCoordPtr();
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetFormalCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetFormalCharge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetAtomicNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetAtomicNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetIsotope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned short)(*arg1)->GetIsotope();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetSpinMultiplicity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (int)(*arg1)->GetSpinMultiplicity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetAtomicMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetAtomicMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetExactMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetExactMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetCoordinateIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCoordinateIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetCIdx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetCIdx();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetHyb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHyb();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetImplicitValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetImplicitValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetHvyValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHvyValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetHeteroValence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->GetHeteroValence();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (char *)(*arg1)->GetType();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double *)(*arg1)->GetCoordinate();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  {
    OpenBabel::vector3 &_result_ref = (*arg1)->GetVector();
    result = (OpenBabel::vector3 *) &_result_ref;
  }
  *(OpenBabel::vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetPartialCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->GetPartialCharge();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBResidue *)(*arg1)->GetResidue();
  *(OpenBabel::OBResidue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetNewBondVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(*arg1)->GetNewBondVector(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (OpenBabel::OBBond *)(*arg1)->GetBond(arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetNextAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (OpenBabel::OBAtom *)(*arg1)->GetNextAtom();
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1BeginBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (*arg1)->BeginBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1EndBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBBond * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (*arg1)->EndBonds();
  *(OpenBabel::OBBondIterator **)&jresult = new OpenBabel::OBBondIterator((OpenBabel::OBBondIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1BeginBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->BeginBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1NextBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBBond *)(*arg1)->NextBond(*arg2);
  *(OpenBabel::OBBond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1BeginNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->BeginNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1NextNbrAtom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBAtom *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBAtom *)(*arg1)->NextNbrAtom(*arg2);
  *(OpenBabel::OBAtom **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (double)(*arg1)->GetDistance(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetAngle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetAngle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  OpenBabel::OBAtom *arg3 = (OpenBabel::OBAtom *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  arg3 = *(OpenBabel::OBAtom **)&jarg3; 
  result = (double)(*arg1)->GetAngle(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1NewResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->NewResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1AddResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBResidue *arg2 = (OpenBabel::OBResidue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBResidue **)&jarg2; 
  (*arg1)->AddResidue(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1DeleteResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->DeleteResidue();
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1AddBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  (*arg1)->AddBond(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1InsertBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBondIterator *arg2 = 0 ;
  OpenBabel::OBBond *arg3 = (OpenBabel::OBBond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBondIterator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBondIterator & reference is null");
    return ;
  } 
  arg3 = *(OpenBabel::OBBond **)&jarg3; 
  (*arg1)->InsertBond(*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1DeleteBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->DeleteBond(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1ClearBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->ClearBond();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HtoMethyl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HtoMethyl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetHybAndGeom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->SetHybAndGeom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1ForceNoH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  (*arg1)->ForceNoH();
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasNoHForced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNoHForced();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1CountFreeOxygens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountFreeOxygens();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1ImplicitHydrogenCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ImplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1ExplicitHydrogenCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1ExplicitHydrogenCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->ExplicitHydrogenCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1MemberOfRingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1MemberOfRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->MemberOfRingSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1CountRingBonds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->CountRingBonds();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1SmallestBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->SmallestBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_openbabelJNI_OBResidueAtomIter_1AverageBondAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (double)(*arg1)->AverageBondAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1BOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->BOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1KBOSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->KBOSum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasResidue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasResidue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsCarbon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarbon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsSulfur(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfur();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsPhosphorus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphorus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsInRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsInRingSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRingSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsHeteroatom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHeteroatom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsNotCorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNotCorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsConnected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsOneThree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneThree(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsOneFour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsOneFour(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsCarboxylOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsCarboxylOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsPhosphateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPhosphateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsSulfateOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsSulfateOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsNitroOxygen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNitroOxygen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsAmideNitrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAmideNitrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsNonPolarHydrogen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNonPolarHydrogen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsAromaticNOxide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromaticNOxide();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsChiral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsChiral();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsAxial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAxial();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsAntiClockwise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsAntiClockwise();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsPositiveStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsPositiveStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsNegativeStereo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsNegativeStereo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasChiralitySpecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralitySpecified();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasChiralVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasChiralVolume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsHbondAcceptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondAcceptor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsHbondDonor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1IsHbondDonorH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->IsHbondDonorH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasAlphaBetaUnsat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasAlphaBetaUnsat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAlphaBetaUnsat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasBondOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasBondOfOrder(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBResidueAtomIter_1CountBondsOfOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->CountBondsOfOrder(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasNonSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasNonSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasSingleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasSingleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasDoubleBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasDoubleBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasAromaticBond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (bool)(*arg1)->HasAromaticBond();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1MatchesSMARTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(*arg1)->MatchesSMARTS((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1DoTransformations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::map<std::string,std::string > *arg2 = (std::map<std::string,std::string > *) 0 ;
  OpenBabel::OBBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::map<std::string,std::string > **)&jarg2; 
  result = (OpenBabel::OBBase *)(*arg1)->DoTransformations((std::map<std::string,std::string > const *)arg2);
  *(OpenBabel::OBBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_openbabelJNI_OBResidueAtomIter_1ClassDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (char *)(*arg1)->ClassDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBResidueAtomIter_1HasData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(*arg1)->HasData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->DeleteData(arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1DeleteData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(std::vector<OpenBabel::OBGenericData * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<OpenBabel::OBGenericData * > & reference is null");
    return ;
  } 
  (*arg1)->DeleteData(*arg2);
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBResidueAtomIter_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  OpenBabel::OBGenericData *arg2 = (OpenBabel::OBGenericData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = *(OpenBabel::OBGenericData **)&jarg2; 
  (*arg1)->SetData(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1DataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (unsigned int)(*arg1)->DataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  unsigned int arg2 ;
  OpenBabel::OBGenericData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (OpenBabel::OBGenericData *)(*arg1)->GetData(arg2);
  *(OpenBabel::OBGenericData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1GetData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  std::vector<OpenBabel::OBGenericData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  {
    std::vector<OpenBabel::OBGenericData * > &_result_ref = (*arg1)->GetData();
    result = (std::vector<OpenBabel::OBGenericData * > *) &_result_ref;
  }
  *(std::vector<OpenBabel::OBGenericData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1BeginData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (*arg1)->BeginData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBResidueAtomIter_1EndData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBResidueAtomIter *arg1 = (OpenBabel::OBResidueAtomIter *) 0 ;
  SwigValueWrapper<std::vector<OpenBabel::OBGenericData * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBResidueAtomIter **)&jarg1; 
  result = (*arg1)->EndData();
  *(OpenBabel::OBDataIterator **)&jresult = new OpenBabel::OBDataIterator((OpenBabel::OBDataIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAngleIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAngleIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolAngleIter *)new OpenBabel::OBMolAngleIter();
  *(OpenBabel::OBMolAngleIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAngleIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolAngleIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolAngleIter *)new OpenBabel::OBMolAngleIter(arg1);
  *(OpenBabel::OBMolAngleIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolAngleIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAngleIter *arg1 = 0 ;
  OpenBabel::OBMolAngleIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAngleIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolAngleIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolAngleIter *)new OpenBabel::OBMolAngleIter((OpenBabel::OBMolAngleIter const &)*arg1);
  *(OpenBabel::OBMolAngleIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolAngleIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolAngleIter *arg1 = (OpenBabel::OBMolAngleIter *) 0 ;
  std::vector<unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolAngleIter **)&jarg1; 
  result = ((OpenBabel::OBMolAngleIter const *)arg1)->operator *();
  *(std::vector<unsigned int > **)&jresult = new std::vector<unsigned int >((std::vector<unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMolAngleIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolAngleIter *arg1 = (OpenBabel::OBMolAngleIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolAngleIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolTorsionIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolTorsionIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolTorsionIter *)new OpenBabel::OBMolTorsionIter();
  *(OpenBabel::OBMolTorsionIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolTorsionIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolTorsionIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolTorsionIter *)new OpenBabel::OBMolTorsionIter(arg1);
  *(OpenBabel::OBMolTorsionIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolTorsionIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolTorsionIter *arg1 = 0 ;
  OpenBabel::OBMolTorsionIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolTorsionIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolTorsionIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolTorsionIter *)new OpenBabel::OBMolTorsionIter((OpenBabel::OBMolTorsionIter const &)*arg1);
  *(OpenBabel::OBMolTorsionIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolTorsionIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolTorsionIter *arg1 = (OpenBabel::OBMolTorsionIter *) 0 ;
  std::vector<unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolTorsionIter **)&jarg1; 
  result = ((OpenBabel::OBMolTorsionIter const *)arg1)->operator *();
  *(std::vector<unsigned int > **)&jresult = new std::vector<unsigned int >((std::vector<unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMolTorsionIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolTorsionIter *arg1 = (OpenBabel::OBMolTorsionIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolTorsionIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolPairIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolPairIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolPairIter *)new OpenBabel::OBMolPairIter();
  *(OpenBabel::OBMolPairIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolPairIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolPairIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolPairIter *)new OpenBabel::OBMolPairIter(arg1);
  *(OpenBabel::OBMolPairIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolPairIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolPairIter *arg1 = 0 ;
  OpenBabel::OBMolPairIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolPairIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolPairIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolPairIter *)new OpenBabel::OBMolPairIter((OpenBabel::OBMolPairIter const &)*arg1);
  *(OpenBabel::OBMolPairIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolPairIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolPairIter *arg1 = (OpenBabel::OBMolPairIter *) 0 ;
  std::vector<unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolPairIter **)&jarg1; 
  result = ((OpenBabel::OBMolPairIter const *)arg1)->operator *();
  *(std::vector<unsigned int > **)&jresult = new std::vector<unsigned int >((std::vector<unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMolPairIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolPairIter *arg1 = (OpenBabel::OBMolPairIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolPairIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolRingIter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenBabel::OBMolRingIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenBabel::OBMolRingIter *)new OpenBabel::OBMolRingIter();
  *(OpenBabel::OBMolRingIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolRingIter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMol *arg1 = (OpenBabel::OBMol *) 0 ;
  OpenBabel::OBMolRingIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMol **)&jarg1; 
  result = (OpenBabel::OBMolRingIter *)new OpenBabel::OBMolRingIter(arg1);
  *(OpenBabel::OBMolRingIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_new_1OBMolRingIter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = 0 ;
  OpenBabel::OBMolRingIter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBMolRingIter const & reference is null");
    return 0;
  } 
  result = (OpenBabel::OBMolRingIter *)new OpenBabel::OBMolRingIter((OpenBabel::OBMolRingIter const &)*arg1);
  *(OpenBabel::OBMolRingIter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolRingIter_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (OpenBabel::OBRing *)((OpenBabel::OBMolRingIter const *)arg1)->operator ->();
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolRingIter_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBRing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  {
    OpenBabel::OBRing &_result_ref = ((OpenBabel::OBMolRingIter const *)arg1)->operator *();
    result = (OpenBabel::OBRing *) &_result_ref;
  }
  *(OpenBabel::OBRing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_delete_1OBMolRingIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolRingIter_1_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  std::vector<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  arg2 = *(std::vector<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<int > const & reference is null");
    return ;
  } 
  if (arg1) (*arg1)->_path = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolRingIter_1_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  std::vector<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  {
    std::vector<int > const &_result_ref =  ((*arg1)->_path);
    result = (std::vector<int > *) &_result_ref;
  }
  *(std::vector<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolRingIter_1_1pathset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBBitVec *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBitVec **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::OBBitVec const & reference is null");
    return ;
  } 
  if (arg1) (*arg1)->_pathset = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolRingIter_1_1pathset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBBitVec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  {
    OpenBabel::OBBitVec const &_result_ref =  ((*arg1)->_pathset);
    result = (OpenBabel::OBBitVec *) &_result_ref;
  }
  *(OpenBabel::OBBitVec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolRingIter_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (int)(*arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_openbabelJNI_OBMolRingIter_1PathSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (int)(*arg1)->PathSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolRingIter_1IsAromatic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (bool)(*arg1)->IsAromatic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolRingIter_1IsMember_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBAtom *arg2 = (OpenBabel::OBAtom *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  arg2 = *(OpenBabel::OBAtom **)&jarg2; 
  result = (bool)(*arg1)->IsMember(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolRingIter_1IsMember_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBBond *arg2 = (OpenBabel::OBBond *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  arg2 = *(OpenBabel::OBBond **)&jarg2; 
  result = (bool)(*arg1)->IsMember(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolRingIter_1IsInRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(*arg1)->IsInRing(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_openbabelJNI_OBMolRingIter_1SetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBMol *arg2 = (OpenBabel::OBMol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  arg2 = *(OpenBabel::OBMol **)&jarg2; 
  (*arg1)->SetParent(arg2);
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_OBMolRingIter_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::OBMol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  result = (OpenBabel::OBMol *)(*arg1)->GetParent();
  *(OpenBabel::OBMol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_openbabelJNI_OBMolRingIter_1findCenterAndNormal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  OpenBabel::OBMolRingIter *arg1 = (OpenBabel::OBMolRingIter *) 0 ;
  OpenBabel::vector3 *arg2 = 0 ;
  OpenBabel::vector3 *arg3 = 0 ;
  OpenBabel::vector3 *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenBabel::OBMolRingIter **)&jarg1; 
  arg2 = *(OpenBabel::vector3 **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg3 = *(OpenBabel::vector3 **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  arg4 = *(OpenBabel::vector3 **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenBabel::vector3 & reference is null");
    return 0;
  } 
  result = (bool)(*arg1)->findCenterAndNormal(*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBElementTableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBElementTable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBIsotopeTableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBIsotopeTable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBTypeTableUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBTypeTable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBResidueDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBResidueData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBCommentDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBCommentData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBExternalBondDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBExternalBondData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBPairDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBPairData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBSetDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBSetData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBVirtualBondUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBVirtualBond **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBRingDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBRingData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBUnitCellUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBUnitCell **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBConformerDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBConformerData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBSymmetryDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBSymmetryData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBTorsionDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBTorsionData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBAngleDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBAngleData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBChiralDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBChiralData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBSerialNumsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGenericData **)&baseptr = *(OpenBabel::OBSerialNums **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBAtomTyperUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBAtomTyper **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBAromaticTyperUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBGlobalDataBase **)&baseptr = *(OpenBabel::OBAromaticTyper **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBResidueUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBResidue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBAtomUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBAtom **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBBondUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBBond **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_openbabelJNI_SWIGOBMolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenBabel::OBBase **)&baseptr = *(OpenBabel::OBMol **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

