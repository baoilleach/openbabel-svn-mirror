set(common_formats
  smilesformat
  mdlformat
  mol2format
  pdbformat
  )
set(utility_formats
  copyformat
  MNAformat
  molreport
  pngformat
  povrayformat
  reportformat
  svgformat
  textformat
  titleformat
  )
set(compchem_formats
      adfformat
      dmolformat
      fchkformat
      gamessformat
      gaussformat
      gausscubeformat
      gausszmatformat
      gulpformat
      hinformat
      jaguarformat
      molproformat
      mopacformat
      nwchemformat
      qchemformat
      turbomoleformat
      vaspformat
      zindoformat
      )
set(misc_formats
      APIInterface
      CSRformat
      PQSformat
      MCDLformat
      alchemyformat
      acrformat
      amberformat
      balstformat
      bgfformat
      boxformat
      cacaoformat
      cacheformat
      carformat
      cccformat
      chem3dformat
      chemdrawct
      chemtoolformat
      cifformat
      crkformat
      cssrformat
      fastsearchformat
      fastaformat
      featformat
      fhformat
      fingerprintformat
      freefracformat
      ghemicalformat
      gromos96format
      mmcifformat
      mmodformat
      moldenformat
      mpdformat
      mpqcformat
      msiformat
      msmsformat
      opendxformat
      outformat
      pcmodelformat
      pqrformat
      shelxformat
      thermoformat
      tinkerformat
      unichemformat
      viewmolformat
      xedformat
      xyzformat
      yasaraformat
      )

if(MINIMAL_BUILD)
  set(formats
    ${common_formats}
  )
else(MINIMAL_BUILD)
  set(formats
      ${common_formats}
      ${utility_formats}
      ${compchem_formats}
      ${misc_formats}
  )

  if(Boost_FOUND)
    set(formats
      ${formats}
      rxnformat
      chemdrawcdx
      chemkinformat
      rsmiformat
    )
  endif(Boost_FOUND)

  if(WITH_INCHI)
    add_definitions(-DINCHI_LINK_AS_DLL)
    if(NOT MSVC)
      add_subdirectory(inchi102)
      include_directories(${CMAKE_SOURCE_DIR}/include/inchi102)
      set(libs ${libs} inchi)
    else(NOT MSVC)
      set(libs ${libs} ${CMAKE_SOURCE_DIR}/windows-vc2005/libstdinchi.lib)
    endif(NOT MSVC)
    set(inchiformat_additional_sources getinchi.cpp)
    set(formats
      ${formats}
      inchiformat
    )
  endif(WITH_INCHI)

  if(LIBXML2_FOUND)
    if(NOT MSVC)
      include_directories(${LIBXML2_INCLUDE_DIR})
    endif(NOT MSVC)
    set(xml_formats
      cdxmlformat
      cmlformat
      pubchem
      xmlformat
    )
    if(Boost_FOUND)
      set(xml_formats
          ${xml_formats}
          cmlreactformat
      )
    endif(Boost_FOUND)
  endif(LIBXML2_FOUND)

  if(NOT WIN32)
    set(formats
      ${formats}
      gamessukformat
      xtcformat
    )
  endif(NOT WIN32)

endif(MINIMAL_BUILD)

if(NOT WIN32)
  set(libs ${libs} m)
endif(NOT WIN32)

if(BUILD_SHARED)
  if(WIN32)
    set(openbabel_srcs ${openbabel_srcs}
        dlhandler_win32
        )
  else(WIN32)
    set(openbabel_srcs ${openbabel_srcs}
        dlhandler_unix
        )
  endif(WIN32)
endif(BUILD_SHARED)

if(MSVC)
  foreach(formatgroup common_formats utility_formats compchem_formats misc_formats)
    set(formatsources "")
    foreach(format ${${formatgroup}})
      set(formatsources ${formatsources} ${format}.cpp)
    endforeach(format)
    add_library(${formatgroup} ${PLUGIN_TYPE} ${formatsources}
        "${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h")
    target_link_libraries(${formatgroup} ${libs} ${BABEL_LIBRARY})
    install(TARGETS ${formatgroup}
                  RUNTIME DESTINATION ${BIN_INSTALL_DIR}
                  LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}
                  ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR})
    set_target_properties(${formatgroup} PROPERTIES
                  OUTPUT_NAME ${formatgroup}
                  PREFIX ""
                  SUFFIX ${MODULE_EXTENSION}
                  LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  endforeach(formatgroup)
else(MSVC)
foreach(format ${formats})
  add_library(${format} ${PLUGIN_TYPE} ${format}.cpp
    ${${format}_additional_sources}
    "${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h")
  target_link_libraries(${format} ${libs} ${BABEL_LIBRARY})
  install(TARGETS ${format}
                  RUNTIME DESTINATION ${BIN_INSTALL_DIR}
                  LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}
                  ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR})
  set_target_properties(${format} PROPERTIES
                        OUTPUT_NAME ${format}
                        PREFIX ""
                        SUFFIX ${MODULE_EXTENSION})
endforeach(format)
endif(MSVC)

if(MSVC)
  set(xmlsources "")
  foreach(format ${xml_formats})
    set(xmlsources ${xmlsources} xml/${format}.cpp)
  endforeach(format)
  add_library(xml_formats ${PLUGIN_TYPE} ${xmlsources} xml/xml.cpp)
  target_link_libraries(xml_formats ${libs} ${BABEL_LIBRARY})
  install(TARGETS xml_formats
                  RUNTIME DESTINATION ${BIN_INSTALL_DIR}
                  LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}
                  ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR})
  set_target_properties(xml_formats PROPERTIES
                  OUTPUT_NAME xml_formats
                  PREFIX ""
                  SUFFIX ${MODULE_EXTENSION}
                  LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
else(MSVC)
foreach(format ${xml_formats})
  add_library(${format} ${PLUGIN_TYPE} xml/${format}.cpp xml/xml.cpp)
  target_link_libraries(${format} ${libs} ${BABEL_LIBRARY})
  install(TARGETS ${format}
                  RUNTIME DESTINATION ${BIN_INSTALL_DIR}
                  LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}
                  ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR})
  set_target_properties(${format} PROPERTIES
                        OUTPUT_NAME ${format}
                        PREFIX ""
                        SUFFIX ${MODULE_EXTENSION})
  if(MSVC)
    set_target_properties(${format} PROPERTIES
                  LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  endif(MSVC)
endforeach(format)
endif(MSVC)

