if(MINIMAL_BUILD)
  set(formats
    smilesformat
    mdlformat
  )
else(MINIMAL_BUILD)
  set(formats
      APIInterface
      CSRformat
      PQSformat
      MCDLformat
      MNAformat
      alchemyformat
      adfformat
      acrformat
      amberformat
      balstformat
      bgfformat
      boxformat
      cacaoformat
      cacheformat
      carformat
      cccformat
      chem3dformat
      chemdrawct
      chemtoolformat
      cifformat
      copyformat
      crkformat
      cssrformat
      dmolformat
      fastsearchformat
      fastaformat
      fchkformat
      featformat
      fhformat
      fingerprintformat
      freefracformat
      gamessformat
      gaussformat
      gausscubeformat
      gausszmatformat
      ghemicalformat
      gulpformat
      gromos96format
      hinformat
      jaguarformat
      mdlformat
      mmcifformat
      mmodformat
      mol2format
      moldenformat
      molproformat
      molreport
      mopacformat
      mpdformat
      mpqcformat
      msiformat
      msmsformat
      nwchemformat
      opendxformat
      outformat
      pcmodelformat
      pdbformat
      pngformat
      povrayformat
      pqrformat
      qchemformat
      reportformat
      shelxformat
      smilesformat
      svgformat
      thermoformat
      tinkerformat
      titleformat
      turbomoleformat
      unichemformat
      vaspformat
      viewmolformat
      xedformat
      xyzformat
      yasaraformat
      zindoformat
  )

  if(Boost_FOUND)
    set(formats
      ${formats}
      rxnformat
      chemdrawcdx
      chemkinformat
      rsmiformat
    )
  endif(Boost_FOUND)

  if(WITH_INCHI)
    add_definitions(-DINCHI_LINK_AS_DLL)
    if(NOT MSVC)
      add_subdirectory(inchi102)
      include_directories(${CMAKE_SOURCE_DIR}/include/inchi102)
      set(libs ${libs} inchi)
    else(NOT MSVC)
      set(libs ${libs} ${CMAKE_SOURCE_DIR}/windows-vc2005/libstdinchi.lib)
    endif(NOT MSVC)
    set(inchiformat_additional_sources getinchi.cpp)
    set(formats
      ${formats}
      inchiformat
    )
  endif(WITH_INCHI)

  if(LIBXML2_FOUND)
    if(NOT MSVC)
      include_directories(${LIBXML2_INCLUDE_DIR})
    endif(NOT MSVC)
    set(xml_formats
      cdxmlformat
      cmlformat
      pubchem
      xmlformat
    )
    if(Boost_FOUND)
      set(xml_formats
          ${xml_formats}
          cmlreactformat
      )
    endif(Boost_FOUND)
  endif(LIBXML2_FOUND)

  if(NOT WIN32)
    set(formats
      ${formats}
      gamessukformat
      xtcformat
    )
  endif(NOT WIN32)

endif(MINIMAL_BUILD)

if(NOT WIN32)
  set(libs ${libs} m)
endif(NOT WIN32)

if(BUILD_SHARED)
  if(WIN32)
    set(openbabel_srcs ${openbabel_srcs}
        dlhandler_win32
        )
  else(WIN32)
    set(openbabel_srcs ${openbabel_srcs}
        dlhandler_unix
        )
  endif(WIN32)
endif(BUILD_SHARED)

foreach(format ${formats})
  add_library(${format} ${PLUGIN_TYPE} ${format}.cpp
    ${${format}_additional_sources}
    "${openbabel_BINARY_DIR}/include/openbabel/babelconfig.h")
  target_link_libraries(${format} ${libs} ${BABEL_LIBRARY})
  install(TARGETS ${format}
                  RUNTIME DESTINATION ${BIN_INSTALL_DIR}
                  LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}
                  ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR})
  set_target_properties(${format} PROPERTIES
                        OUTPUT_NAME ${format}
                        PREFIX ""
                        SUFFIX ${MODULE_EXTENSION})
  if(MSVC)
    set_target_properties(${format} PROPERTIES
                  LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  endif(MSVC)
endforeach(format)

foreach(format ${xml_formats})
  add_library(${format} ${PLUGIN_TYPE} xml/${format}.cpp xml/xml.cpp)
  target_link_libraries(${format} ${libs} ${BABEL_LIBRARY})
  install(TARGETS ${format}
                  RUNTIME DESTINATION ${BIN_INSTALL_DIR}
                  LIBRARY DESTINATION ${OB_PLUGIN_INSTALL_DIR}
                  ARCHIVE DESTINATION ${OB_PLUGIN_INSTALL_DIR})
  set_target_properties(${format} PROPERTIES
                        OUTPUT_NAME ${format}
                        PREFIX ""
                        SUFFIX ${MODULE_EXTENSION})
  if(MSVC)
    set_target_properties(${format} PROPERTIES
                  LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  endif(MSVC)
endforeach(format)

